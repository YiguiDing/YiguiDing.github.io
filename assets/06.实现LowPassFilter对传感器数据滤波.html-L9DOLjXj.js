import{_ as c,c as o,d as l,w as a,a as n,b as i,r as u,o as r,e as s}from"./app-DjDtDPYL.js";const k="/assets/image-8-CGtTUvb2.png",d={},v=n("h2",{id:"_06-实现lowpassfilter对传感器数据滤波",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_06-实现lowpassfilter对传感器数据滤波"},[n("span",null,"06.实现LowPassFilter对传感器数据滤波")])],-1),m=n("h3",{id:"具体实现",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#具体实现"},[n("span",null,"具体实现")])],-1),b=n("code",null,"LowPassFilter.hpp",-1),h=n("div",{class:"language-cpp line-numbers-mode","data-highlighter":"prismjs","data-ext":"cpp","data-title":"cpp"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"ifndef"),s(),n("span",{class:"token expression"},"_LowPassFilter_H_")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"define"),s(),n("span",{class:"token macro-name"},"_LowPassFilter_H_")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"Timer.hpp"')])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"LowPassFilter"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token base-clause"},[n("span",{class:"token class-name"},"Timer")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"private"),n("span",{class:"token operator"},":")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"uint16_t"),s(" Tms"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"int32_t"),s(" pre_value"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"LowPassFilter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"uint16_t"),s(" Tms"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("Tms "),n("span",{class:"token operator"},"="),s(" Tms"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"int32_t"),s(),n("span",{class:"token keyword"},"operator"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int32_t"),s(" value"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"uint16_t"),s(" dt_ms "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),n("span",{class:"token function"},"dt_ms"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"uint8_t"),s(" k "),n("span",{class:"token operator"},"="),s(" UINT8_MAX "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"uint32_t"),n("span",{class:"token punctuation"},")"),s("dt_ms "),n("span",{class:"token operator"},"/"),s(),n("span",{class:"token punctuation"},"("),s("Tms "),n("span",{class:"token operator"},"+"),s(" dt_ms"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"int32_t"),s(" out "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("k "),n("span",{class:"token operator"},"*"),s(" value "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token punctuation"},"("),s("UINT8_MAX "),n("span",{class:"token operator"},"-"),s(" k"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"*"),s(" pre_value"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"/"),s(" UINT8_MAX"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"return"),s(" pre_value "),n("span",{class:"token operator"},"="),s(" out"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"endif")])]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=i('<h3 id="实现效果" tabindex="-1"><a class="header-anchor" href="#实现效果"><span>实现效果</span></a></h3><p><img src="'+k+`" alt="alt text"></p><p><code>06.filter.ino</code></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Arduino.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Wire.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;BLDCMotor.hpp&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;BLDCDriver.hpp&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Sensor.hpp&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;foc_utils.h&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;typedef.h&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AS5600</span></span></span>
<span class="line"><span class="token comment">// #define AS5047P</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">AS5600</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AS5600_ADDR</span> <span class="token expression"><span class="token number">0x36</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AS5600_RAW_ANGLE</span> <span class="token expression"><span class="token number">0x0c</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AS5600_ANGLE</span> <span class="token expression"><span class="token number">0x0e</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">defined AS5047P</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;AS5047P.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AS5047P_CHIP_SELECT_PORT</span> <span class="token expression"><span class="token number">9</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AS5047P_CUSTOM_SPI_BUS_SPEED</span> <span class="token expression"><span class="token number">100000</span></span></span></span>
<span class="line">AS5047P as5047p <span class="token operator">=</span> <span class="token function">AS5047P</span><span class="token punctuation">(</span>AS5047P_CHIP_SELECT_PORT<span class="token punctuation">,</span> AS5047P_CUSTOM_SPI_BUS_SPEED<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">Sensor <span class="token operator">*</span>sensor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Sensor</span><span class="token punctuation">(</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">AS5600</span></span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      Wire<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      Wire<span class="token punctuation">.</span><span class="token function">beginTransmission</span><span class="token punctuation">(</span>AS5600_ADDR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Wire<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>AS5600_ANGLE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Wire<span class="token punctuation">.</span><span class="token function">endTransmission</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Wire<span class="token punctuation">.</span><span class="token function">requestFrom</span><span class="token punctuation">(</span>AS5600_ADDR<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">uint16_t</span> data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>data <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> Wire<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>data <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> Wire<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Wire<span class="token punctuation">.</span><span class="token function">endTransmission</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// as5600 12bit精度，左移4位变成16位</span></span>
<span class="line">      data <span class="token operator">&lt;&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> data<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">defined AS5047P</span></span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">pinMode</span><span class="token punctuation">(</span>AS5047P_CHIP_SELECT_PORT<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      as5047p<span class="token punctuation">.</span><span class="token function">initSPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>AS5047P_CHIP_SELECT_PORT<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 14bit精度 左移2位变成16位</span></span>
<span class="line">      <span class="token keyword">uint16_t</span> data <span class="token operator">=</span> as5047p<span class="token punctuation">.</span><span class="token function">readAngleRaw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>AS5047P_CHIP_SELECT_PORT<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> data<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;LowPassFilter.hpp&quot;</span></span></span>
<span class="line">LowPassFilter filter1 <span class="token operator">=</span> <span class="token function">LowPassFilter</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">LowPassFilter filter2 <span class="token operator">=</span> <span class="token function">LowPassFilter</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">LowPassFilter filter3 <span class="token operator">=</span> <span class="token function">LowPassFilter</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  sensor<span class="token operator">-&gt;</span><span class="token function">initSensor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  sensor<span class="token operator">-&gt;</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>sensor<span class="token operator">-&gt;</span><span class="token function">getVelocity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">filter1</span><span class="token punctuation">(</span>sensor<span class="token operator">-&gt;</span><span class="token function">getVelocity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">filter2</span><span class="token punctuation">(</span>sensor<span class="token operator">-&gt;</span><span class="token function">getVelocity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">filter3</span><span class="token punctuation">(</span>sensor<span class="token operator">-&gt;</span><span class="token function">getVelocity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function y(f,w){const p=u("CodeTabs");return r(),o("div",null,[v,m,l(p,{id:"6",data:[{id:"<code v-pre>LowPassFilter.hpp</code>"}]},{title0:a(({value:e,isActive:t})=>[b]),tab0:a(({value:e,isActive:t})=>[h]),_:1}),_])}const g=c(d,[["render",y],["__file","06.实现LowPassFilter对传感器数据滤波.html.vue"]]),A=JSON.parse('{"path":"/%E7%94%B5%E5%AD%90/FOC%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/06.%E5%AE%9E%E7%8E%B0LowPassFilter%E5%AF%B9%E4%BC%A0%E6%84%9F%E5%99%A8%E6%95%B0%E6%8D%AE%E6%BB%A4%E6%B3%A2.html","title":"06.实现LowPassFilter对传感器数据滤波","lang":"zh-CN","frontmatter":{"title":"06.实现LowPassFilter对传感器数据滤波","date":"2024-09-20T15:41:00.000Z","index":true,"article":false,"order":6,"description":"06.实现LowPassFilter对传感器数据滤波 具体实现 实现效果 alt text 06.filter.ino","head":[["meta",{"property":"og:url","content":"https://dingdingdang.online/%E7%94%B5%E5%AD%90/FOC%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/06.%E5%AE%9E%E7%8E%B0LowPassFilter%E5%AF%B9%E4%BC%A0%E6%84%9F%E5%99%A8%E6%95%B0%E6%8D%AE%E6%BB%A4%E6%B3%A2.html"}],["meta",{"property":"og:site_name","content":"YiguiDing的Blog小站"}],["meta",{"property":"og:title","content":"06.实现LowPassFilter对传感器数据滤波"}],["meta",{"property":"og:description","content":"06.实现LowPassFilter对传感器数据滤波 具体实现 实现效果 alt text 06.filter.ino"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-02T14:04:53.000Z"}],["meta",{"property":"article:author","content":"丁毅桂"}],["meta",{"property":"article:published_time","content":"2024-09-20T15:41:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-02T14:04:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"06.实现LowPassFilter对传感器数据滤波\\",\\"description\\":\\"06.实现LowPassFilter对传感器数据滤波 具体实现 实现效果 alt text 06.filter.ino\\"}"],["meta",{"name":"baidu-site-verification","content":"codeva-PwE9Ts6nMl"}]]},"headers":[{"level":2,"title":"06.实现LowPassFilter对传感器数据滤波","slug":"_06-实现lowpassfilter对传感器数据滤波","link":"#_06-实现lowpassfilter对传感器数据滤波","children":[{"level":3,"title":"具体实现","slug":"具体实现","link":"#具体实现","children":[]},{"level":3,"title":"实现效果","slug":"实现效果","link":"#实现效果","children":[]}]}],"git":{"createdTime":1726821356000,"updatedTime":1733148293000,"contributors":[{"name":"YiguiDing","email":"2449695354@qq.com","commits":5}]},"readingTime":{"minutes":0.21,"words":62},"filePathRelative":"电子/FOC算法实现过程记录/06.实现LowPassFilter对传感器数据滤波.md","localizedDate":"2024年9月20日","excerpt":"","autoDesc":true}');export{g as comp,A as data};
