import{_ as o,c as l,d as c,w as a,a as n,b as i,r,o as u,e as s}from"./app-DjDtDPYL.js";const k="/assets/image-17-Dnv38yl9.png",d={},m=n("h2",{id:"_13-使用锁相环实现对转子位置和速度的计算",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_13-使用锁相环实现对转子位置和速度的计算"},[n("span",null,"13.使用锁相环实现对转子位置和速度的计算")])],-1),v=n("h3",{id:"具体实现",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#具体实现"},[n("span",null,"具体实现")])],-1),b=n("code",null,"PLL.h",-1),h=n("div",{class:"language-cpp line-numbers-mode","data-highlighter":"prismjs","data-ext":"cpp","data-title":"cpp"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"ifndef"),s(),n("span",{class:"token expression"},"_PLL_H_")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"define"),s(),n("span",{class:"token macro-name"},"_PLL_H_")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"LowPassFilter.hpp"')])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"PIDControler.hpp"')])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"Timer.hpp"')])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"config.h"')])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"foc_utils.h"')])]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"PLL")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"private"),n("span",{class:"token operator"},":")]),s(`
`),n("span",{class:"line"},[s("    Timer "),n("span",{class:"token operator"},"*"),s("timer "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token function"},"ConcreteTimer"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":")]),s(`
`),n("span",{class:"line"},[s("    PIDControler pid_speed_controller"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"500"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"250"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1e10"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    LowPassFilter lpf"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"float"),s(" speed "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"float"),s(" value "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"float"),s(),n("span",{class:"token function"},"update"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"float"),s(" target"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// PLL=鉴相=>低通滤波=>压控振荡器")]),s(`
`),n("span",{class:"line"},[s("        speed "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"pid_speed_controller"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"lpf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"_sin"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"_normalizeAngle"),n("span",{class:"token punctuation"},"("),s("target "),n("span",{class:"token operator"},"-"),s(" value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        value "),n("span",{class:"token operator"},"+="),s(" speed "),n("span",{class:"token operator"},"*"),s(" timer"),n("span",{class:"token operator"},"->"),n("span",{class:"token function"},"dt_s"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"return"),s(" value"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"endif")])]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=i('<h3 id="实现效果" tabindex="-1"><a class="header-anchor" href="#实现效果"><span>实现效果</span></a></h3><p><img src="'+k+`" alt="alt text"></p><p><strong>代码</strong></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Arduino.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Wire.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;BLDCMotor.hpp&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;BLDCDriver.hpp&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Sensor.hpp&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;foc_utils.h&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;communication.hpp&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;arduino/ArduinoBLDCDriver.hpp&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;arduino/ArduinoCurrentSensor.hpp&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;arduino/AS5600Sensor.hpp&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Pll.h&quot;</span></span></span>
<span class="line"></span>
<span class="line">BLDCMotor motor <span class="token operator">=</span> <span class="token function">BLDCMotor</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">AS5600Sensor <span class="token operator">*</span>sensor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">AS5600Sensor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">BLDCDriver <span class="token operator">*</span>driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ArduinoBLDCDriver</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">CurrentSensor <span class="token operator">*</span>currentSensor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ArduinoCurrentSensor</span><span class="token punctuation">(</span>A0<span class="token punctuation">,</span> A2<span class="token punctuation">,</span> <span class="token number">0.01f</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  motor<span class="token punctuation">.</span><span class="token function">connectDriver</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  motor<span class="token punctuation">.</span><span class="token function">connectSensor</span><span class="token punctuation">(</span>sensor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  motor<span class="token punctuation">.</span><span class="token function">connectCurrentSensor</span><span class="token punctuation">(</span>currentSensor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  motor<span class="token punctuation">.</span><span class="token function">initFOC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  motor<span class="token punctuation">.</span><span class="token function">setMode</span><span class="token punctuation">(</span>BLDCControlMode<span class="token double-colon punctuation">::</span>Current<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">decode_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Timer <span class="token operator">*</span>tim <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ConcreteTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  motor<span class="token punctuation">.</span><span class="token function">loopFOC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">decode_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">send_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token keyword">uint8_t</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>cnt <span class="token operator">%</span> <span class="token number">15</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">buffer_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    buf_len <span class="token operator">+=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token string">&quot;0,%.2f,%.2f\\n&quot;</span><span class="token punctuation">,</span> sensor<span class="token operator">-&gt;</span>position_now<span class="token punctuation">,</span> <span class="token function">_normalizeAngle</span><span class="token punctuation">(</span>sensor<span class="token operator">-&gt;</span>pll<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">decode_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">uint8_t</span> cmd <span class="token operator">=</span> Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">float</span> val <span class="token operator">=</span> Serial<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token char">&#39;m&#39;</span><span class="token operator">:</span></span>
<span class="line">      motor<span class="token punctuation">.</span><span class="token function">setMode</span><span class="token punctuation">(</span><span class="token punctuation">(</span>BLDCControlMode<span class="token punctuation">)</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token char">&#39;t&#39;</span><span class="token operator">:</span></span>
<span class="line">      motor<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">case</span> <span class="token char">&#39;l&#39;</span><span class="token operator">:</span></span>
<span class="line">      sensor<span class="token operator">-&gt;</span>pll<span class="token punctuation">.</span>lpf<span class="token punctuation">.</span>Tms<span class="token operator">=</span>val<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token char">&#39;p&#39;</span><span class="token operator">:</span></span>
<span class="line">      sensor<span class="token operator">-&gt;</span>pll<span class="token punctuation">.</span>pid_speed_controller<span class="token punctuation">.</span>Kp<span class="token operator">=</span>val<span class="token punctuation">;</span></span>
<span class="line">      sensor<span class="token operator">-&gt;</span>pll<span class="token punctuation">.</span>pid_speed_controller<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token char">&#39;i&#39;</span><span class="token operator">:</span></span>
<span class="line">      sensor<span class="token operator">-&gt;</span>pll<span class="token punctuation">.</span>pid_speed_controller<span class="token punctuation">.</span>Ki<span class="token operator">=</span>val<span class="token punctuation">;</span></span>
<span class="line">      sensor<span class="token operator">-&gt;</span>pll<span class="token punctuation">.</span>pid_speed_controller<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token char">&#39;d&#39;</span><span class="token operator">:</span></span>
<span class="line">      sensor<span class="token operator">-&gt;</span>pll<span class="token punctuation">.</span>pid_speed_controller<span class="token punctuation">.</span>Kd<span class="token operator">=</span>val<span class="token punctuation">;</span></span>
<span class="line">      sensor<span class="token operator">-&gt;</span>pll<span class="token punctuation">.</span>pid_speed_controller<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// case &#39;l&#39;:</span></span>
<span class="line">    <span class="token comment">//   motor.current_d_filter.Tms = val;</span></span>
<span class="line">    <span class="token comment">//   motor.current_q_filter.Tms = val;</span></span>
<span class="line">    <span class="token comment">//   break;</span></span>
<span class="line">    <span class="token comment">// case &#39;p&#39;:</span></span>
<span class="line">    <span class="token comment">//   motor.pid_id_controller.Kp = val;</span></span>
<span class="line">    <span class="token comment">//   motor.pid_iq_controller.Kp = val;</span></span>
<span class="line">    <span class="token comment">//   motor.pid_id_controller.reset();</span></span>
<span class="line">    <span class="token comment">//   motor.pid_iq_controller.reset();</span></span>
<span class="line">    <span class="token comment">//   break;</span></span>
<span class="line">    <span class="token comment">// case &#39;i&#39;:</span></span>
<span class="line">    <span class="token comment">//   motor.pid_id_controller.Ki = val;</span></span>
<span class="line">    <span class="token comment">//   motor.pid_iq_controller.Ki = val;</span></span>
<span class="line">    <span class="token comment">//   motor.pid_id_controller.reset();</span></span>
<span class="line">    <span class="token comment">//   motor.pid_iq_controller.reset();</span></span>
<span class="line">    <span class="token comment">//   break;</span></span>
<span class="line">    <span class="token comment">// case &#39;d&#39;:</span></span>
<span class="line">    <span class="token comment">//   motor.pid_id_controller.Kd = val;</span></span>
<span class="line">    <span class="token comment">//   motor.pid_iq_controller.Kd = val;</span></span>
<span class="line">    <span class="token comment">//   motor.pid_id_controller.reset();</span></span>
<span class="line">    <span class="token comment">//   motor.pid_iq_controller.reset();</span></span>
<span class="line">    <span class="token comment">//   break;</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function y(f,g){const e=r("CodeTabs");return u(),l("div",null,[m,v,c(e,{id:"6",data:[{id:"<code v-pre>PLL.h</code>"}]},{title0:a(({value:p,isActive:t})=>[b]),tab0:a(({value:p,isActive:t})=>[h]),_:1}),_])}const E=o(d,[["render",y],["__file","13.锁相环实现.html.vue"]]),C=JSON.parse('{"path":"/%E7%94%B5%E5%AD%90/FOC%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/13.%E9%94%81%E7%9B%B8%E7%8E%AF%E5%AE%9E%E7%8E%B0.html","title":"FOC算法实现过程记录:13.锁相环实现","lang":"zh-CN","frontmatter":{"title":"FOC算法实现过程记录:13.锁相环实现","shortTitle":"13.锁相环实现","date":"2024-12-02T21:31:00.000Z","index":true,"article":false,"order":13,"description":"13.使用锁相环实现对转子位置和速度的计算 具体实现 实现效果 alt text 代码","head":[["meta",{"property":"og:url","content":"https://dingdingdang.online/%E7%94%B5%E5%AD%90/FOC%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/13.%E9%94%81%E7%9B%B8%E7%8E%AF%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"YiguiDing的Blog小站"}],["meta",{"property":"og:title","content":"FOC算法实现过程记录:13.锁相环实现"}],["meta",{"property":"og:description","content":"13.使用锁相环实现对转子位置和速度的计算 具体实现 实现效果 alt text 代码"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-07T02:25:20.000Z"}],["meta",{"property":"article:author","content":"丁毅桂"}],["meta",{"property":"article:published_time","content":"2024-12-02T21:31:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-07T02:25:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"FOC算法实现过程记录:13.锁相环实现\\",\\"description\\":\\"13.使用锁相环实现对转子位置和速度的计算 具体实现 实现效果 alt text 代码\\"}"],["meta",{"name":"baidu-site-verification","content":"codeva-PwE9Ts6nMl"}]]},"headers":[{"level":2,"title":"13.使用锁相环实现对转子位置和速度的计算","slug":"_13-使用锁相环实现对转子位置和速度的计算","link":"#_13-使用锁相环实现对转子位置和速度的计算","children":[{"level":3,"title":"具体实现","slug":"具体实现","link":"#具体实现","children":[]},{"level":3,"title":"实现效果","slug":"实现效果","link":"#实现效果","children":[]}]}],"git":{"createdTime":1735317469000,"updatedTime":1736216720000,"contributors":[{"name":"YiguiDing","email":"2449695354@qq.com","commits":2}]},"readingTime":{"minutes":0.27,"words":80},"filePathRelative":"电子/FOC算法实现过程记录/13.锁相环实现.md","localizedDate":"2024年12月2日","excerpt":"","autoDesc":true}');export{E as comp,C as data};
