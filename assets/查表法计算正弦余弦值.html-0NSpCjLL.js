import{_ as n,c as s,o as a,b as p}from"./app-DjDtDPYL.js";const t="/assets/image-RhTKuQtj.jpg",e="/assets/image-1-CMZPTpVE.jpg",o="/assets/image-2-DIhEHX0Q.jpg",c="/assets/image-5-Z9Wn5t-t.jpg",l={},u=p(`<h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h2><p>源代码中称，使用这种方法计算正弦余弦后，<strong>计算耗时从300us降低到了110us</strong>，性能提升了3倍。</p><p><code>BLDCMotor.cpp</code></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// Function using sine approximation</span></span>
<span class="line"><span class="token comment">// regular sin + cos ~300us    (no memory usage)</span></span>
<span class="line"><span class="token comment">// approx  _sin + _cos ~110us  (400Byte)</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token class-name">BLDCMotor</span><span class="token double-colon punctuation">::</span><span class="token function">setPhaseVoltage</span><span class="token punctuation">(</span><span class="token keyword">float</span> Uq<span class="token punctuation">,</span> <span class="token keyword">float</span> Ud<span class="token punctuation">,</span> <span class="token keyword">float</span> angle_el<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><p><a href="#%E6%BA%90%E4%BB%A3%E7%A0%81"><code>foc_utils.c</code></a>中的代码实现了一个简化版的正弦函数计算方法，它使用了一个包含65个元素的查找表（lookup table）来进行近似计算，<strong>并通过线性插值来提高精度</strong>。这种方法在资源受限的环境中非常有用，比如在嵌入式系统中，可以节省大量的计算资源。</p><p>下面是对代码的一些理解和解释：</p><hr><p><code>sine_array</code> 是一个16位整数数组，存储了<code>1/4</code>个周期内的正弦值。</p><p>剩下<code>3/4</code>周期的sin值和前<code>1/4</code>周期对称（左右对称、上下对称、原点对称），不需要存储</p><p>数组本身的精度应该是<code>90°/64=1.406°</code>，经过线性插值精度将会更高。</p><p><img src="`+t+`" alt="alt text"></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">uint16_t</span> sine_array<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">804</span><span class="token punctuation">,</span><span class="token number">1608</span><span class="token punctuation">,</span><span class="token number">2411</span><span class="token punctuation">,</span><span class="token number">3212</span><span class="token punctuation">,</span><span class="token number">4011</span><span class="token punctuation">,</span><span class="token number">4808</span><span class="token punctuation">,</span><span class="token number">5602</span><span class="token punctuation">,</span><span class="token number">6393</span><span class="token punctuation">,</span><span class="token number">7180</span><span class="token punctuation">,</span><span class="token number">7962</span><span class="token punctuation">,</span><span class="token number">8740</span><span class="token punctuation">,</span><span class="token number">9512</span><span class="token punctuation">,</span><span class="token number">10279</span><span class="token punctuation">,</span><span class="token number">11039</span><span class="token punctuation">,</span><span class="token number">11793</span><span class="token punctuation">,</span><span class="token number">12540</span><span class="token punctuation">,</span><span class="token number">13279</span><span class="token punctuation">,</span><span class="token number">14010</span><span class="token punctuation">,</span><span class="token number">14733</span><span class="token punctuation">,</span><span class="token number">15447</span><span class="token punctuation">,</span><span class="token number">16151</span><span class="token punctuation">,</span><span class="token number">16846</span><span class="token punctuation">,</span><span class="token number">17531</span><span class="token punctuation">,</span><span class="token number">18205</span><span class="token punctuation">,</span><span class="token number">18868</span><span class="token punctuation">,</span><span class="token number">19520</span><span class="token punctuation">,</span><span class="token number">20160</span><span class="token punctuation">,</span><span class="token number">20788</span><span class="token punctuation">,</span><span class="token number">21403</span><span class="token punctuation">,</span><span class="token number">22006</span><span class="token punctuation">,</span><span class="token number">22595</span><span class="token punctuation">,</span><span class="token number">23170</span><span class="token punctuation">,</span><span class="token number">23732</span><span class="token punctuation">,</span><span class="token number">24279</span><span class="token punctuation">,</span><span class="token number">24812</span><span class="token punctuation">,</span><span class="token number">25330</span><span class="token punctuation">,</span><span class="token number">25833</span><span class="token punctuation">,</span><span class="token number">26320</span><span class="token punctuation">,</span><span class="token number">26791</span><span class="token punctuation">,</span><span class="token number">27246</span><span class="token punctuation">,</span><span class="token number">27684</span><span class="token punctuation">,</span><span class="token number">28106</span><span class="token punctuation">,</span><span class="token number">28511</span><span class="token punctuation">,</span><span class="token number">28899</span><span class="token punctuation">,</span><span class="token number">29269</span><span class="token punctuation">,</span><span class="token number">29622</span><span class="token punctuation">,</span><span class="token number">29957</span><span class="token punctuation">,</span><span class="token number">30274</span><span class="token punctuation">,</span><span class="token number">30572</span><span class="token punctuation">,</span><span class="token number">30853</span><span class="token punctuation">,</span><span class="token number">31114</span><span class="token punctuation">,</span><span class="token number">31357</span><span class="token punctuation">,</span><span class="token number">31581</span><span class="token punctuation">,</span><span class="token number">31786</span><span class="token punctuation">,</span><span class="token number">31972</span><span class="token punctuation">,</span><span class="token number">32138</span><span class="token punctuation">,</span><span class="token number">32286</span><span class="token punctuation">,</span><span class="token number">32413</span><span class="token punctuation">,</span><span class="token number">32522</span><span class="token punctuation">,</span><span class="token number">32610</span><span class="token punctuation">,</span><span class="token number">32679</span><span class="token punctuation">,</span><span class="token number">32729</span><span class="token punctuation">,</span><span class="token number">32758</span><span class="token punctuation">,</span><span class="token number">32768</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><p><code>i = (unsigned int)(a * (64*4*256.0f/_2PI));</code> 是计算索引，可以拆分两部分</p><ul><li><code>i=a*64*4/_2PI</code> 实现将<code>a</code>从<code>[0,2PI]</code>映射到<code>[0,256]</code></li><li><code>i*=256.0f</code> 实现将<code>i</code>放大<code>2^8=256</code>倍，即把二进制小数点往左移动8位。</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">256.0f</span><span class="token operator">/</span>_2PI<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><p><code>frac = i &amp; 0xff</code> 得到小数部分<br><code>i = (i &gt;&gt; 8) &amp; 0xff</code> 得到整数部分</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">int</span> frac <span class="token operator">=</span> i <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span></span>
<span class="line">i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>根据所在的周期计算值<br><img src="`+e+`" alt="alt text"></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>sine_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>sine_array<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>sine_array<span class="token punctuation">[</span><span class="token number">128</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span> t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>sine_array<span class="token punctuation">[</span><span class="token number">127</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">192</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  t1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>sine_array<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">128</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span> t2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>sine_array<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">127</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  t1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>sine_array<span class="token punctuation">[</span><span class="token number">256</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span> t2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>sine_array<span class="token punctuation">[</span><span class="token number">255</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>通过线性插值来提高精度</p><p><img src="`+o+'" alt="alt text"><br><img src="'+c+`" alt="alt text"></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token operator">/</span><span class="token number">32768.0f</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t1 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span> <span class="token operator">*</span> frac<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><p>cos函数可用通过sin函数求解，</p><p>因为在其图像上，sin向左平移<code>π/2</code>就是cos</p><p><code>sin(π/2 + x) = cos(x)</code></p><p>唯一可能需要注意的只有定义域的范围，须保证 <code>a_sin∈[0,2PI]</code></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">float</span> <span class="token function">_cos</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">float</span> a_sin <span class="token operator">=</span> a <span class="token operator">+</span> _PI_2<span class="token punctuation">;</span></span>
<span class="line">  a_sin <span class="token operator">=</span> a_sin <span class="token operator">&gt;</span> _2PI <span class="token operator">?</span> a_sin <span class="token operator">-</span> _2PI <span class="token operator">:</span> a_sin<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">_sin</span><span class="token punctuation">(</span>a_sin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源代码" tabindex="-1"><a class="header-anchor" href="#源代码"><span>源代码</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;foc_utils.h&quot;</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// function approximating the sine calculation by using fixed size array</span></span>
<span class="line"><span class="token comment">// uses a 65 element lookup table and interpolation</span></span>
<span class="line"><span class="token comment">// thanks to @dekutree for his work on optimizing this</span></span>
<span class="line"><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>weak<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">float</span> <span class="token function">_sin</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 16bit integer array for sine lookup. interpolation is used for better precision</span></span>
<span class="line">  <span class="token comment">// 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size</span></span>
<span class="line">  <span class="token comment">// resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token keyword">uint16_t</span> sine_array<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">804</span><span class="token punctuation">,</span><span class="token number">1608</span><span class="token punctuation">,</span><span class="token number">2411</span><span class="token punctuation">,</span><span class="token number">3212</span><span class="token punctuation">,</span><span class="token number">4011</span><span class="token punctuation">,</span><span class="token number">4808</span><span class="token punctuation">,</span><span class="token number">5602</span><span class="token punctuation">,</span><span class="token number">6393</span><span class="token punctuation">,</span><span class="token number">7180</span><span class="token punctuation">,</span><span class="token number">7962</span><span class="token punctuation">,</span><span class="token number">8740</span><span class="token punctuation">,</span><span class="token number">9512</span><span class="token punctuation">,</span><span class="token number">10279</span><span class="token punctuation">,</span><span class="token number">11039</span><span class="token punctuation">,</span><span class="token number">11793</span><span class="token punctuation">,</span><span class="token number">12540</span><span class="token punctuation">,</span><span class="token number">13279</span><span class="token punctuation">,</span><span class="token number">14010</span><span class="token punctuation">,</span><span class="token number">14733</span><span class="token punctuation">,</span><span class="token number">15447</span><span class="token punctuation">,</span><span class="token number">16151</span><span class="token punctuation">,</span><span class="token number">16846</span><span class="token punctuation">,</span><span class="token number">17531</span><span class="token punctuation">,</span><span class="token number">18205</span><span class="token punctuation">,</span><span class="token number">18868</span><span class="token punctuation">,</span><span class="token number">19520</span><span class="token punctuation">,</span><span class="token number">20160</span><span class="token punctuation">,</span><span class="token number">20788</span><span class="token punctuation">,</span><span class="token number">21403</span><span class="token punctuation">,</span><span class="token number">22006</span><span class="token punctuation">,</span><span class="token number">22595</span><span class="token punctuation">,</span><span class="token number">23170</span><span class="token punctuation">,</span><span class="token number">23732</span><span class="token punctuation">,</span><span class="token number">24279</span><span class="token punctuation">,</span><span class="token number">24812</span><span class="token punctuation">,</span><span class="token number">25330</span><span class="token punctuation">,</span><span class="token number">25833</span><span class="token punctuation">,</span><span class="token number">26320</span><span class="token punctuation">,</span><span class="token number">26791</span><span class="token punctuation">,</span><span class="token number">27246</span><span class="token punctuation">,</span><span class="token number">27684</span><span class="token punctuation">,</span><span class="token number">28106</span><span class="token punctuation">,</span><span class="token number">28511</span><span class="token punctuation">,</span><span class="token number">28899</span><span class="token punctuation">,</span><span class="token number">29269</span><span class="token punctuation">,</span><span class="token number">29622</span><span class="token punctuation">,</span><span class="token number">29957</span><span class="token punctuation">,</span><span class="token number">30274</span><span class="token punctuation">,</span><span class="token number">30572</span><span class="token punctuation">,</span><span class="token number">30853</span><span class="token punctuation">,</span><span class="token number">31114</span><span class="token punctuation">,</span><span class="token number">31357</span><span class="token punctuation">,</span><span class="token number">31581</span><span class="token punctuation">,</span><span class="token number">31786</span><span class="token punctuation">,</span><span class="token number">31972</span><span class="token punctuation">,</span><span class="token number">32138</span><span class="token punctuation">,</span><span class="token number">32286</span><span class="token punctuation">,</span><span class="token number">32413</span><span class="token punctuation">,</span><span class="token number">32522</span><span class="token punctuation">,</span><span class="token number">32610</span><span class="token punctuation">,</span><span class="token number">32679</span><span class="token punctuation">,</span><span class="token number">32729</span><span class="token punctuation">,</span><span class="token number">32758</span><span class="token punctuation">,</span><span class="token number">32768</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int32_t</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">256.0f</span><span class="token operator">/</span>_2PI<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> frac <span class="token operator">=</span> i <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span></span>
<span class="line">  i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>sine_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>sine_array<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>sine_array<span class="token punctuation">[</span><span class="token number">128</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span> t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>sine_array<span class="token punctuation">[</span><span class="token number">127</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">192</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    t1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>sine_array<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">128</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span> t2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>sine_array<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">127</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    t1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>sine_array<span class="token punctuation">[</span><span class="token number">256</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span> t2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>sine_array<span class="token punctuation">[</span><span class="token number">255</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token operator">/</span><span class="token number">32768.0f</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t1 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span> <span class="token operator">*</span> frac<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// function approximating cosine calculation by using fixed size array</span></span>
<span class="line"><span class="token comment">// ~55us (float array)</span></span>
<span class="line"><span class="token comment">// ~56us (int array)</span></span>
<span class="line"><span class="token comment">// precision +-0.005</span></span>
<span class="line"><span class="token comment">// it has to receive an angle in between 0 and 2PI</span></span>
<span class="line"><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>weak<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">float</span> <span class="token function">_cos</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">float</span> a_sin <span class="token operator">=</span> a <span class="token operator">+</span> _PI_2<span class="token punctuation">;</span></span>
<span class="line">  a_sin <span class="token operator">=</span> a_sin <span class="token operator">&gt;</span> _2PI <span class="token operator">?</span> a_sin <span class="token operator">-</span> _2PI <span class="token operator">:</span> a_sin<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">_sin</span><span class="token punctuation">(</span>a_sin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>weak<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token function">_sincos</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token function">_sin</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token function">_cos</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35),i=[u];function k(r,d){return a(),s("div",null,i)}const b=n(l,[["render",k],["__file","查表法计算正弦余弦值.html.vue"]]),v=JSON.parse('{"path":"/%E7%94%B5%E5%AD%90/SimpleFOC%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9F%A5%E8%A1%A8%E6%B3%95%E8%AE%A1%E7%AE%97%E6%AD%A3%E5%BC%A6%E4%BD%99%E5%BC%A6%E5%80%BC.html","title":"SimpleFOC源码阅读学习笔记：查表法计算正弦余弦值","lang":"zh-CN","frontmatter":{"title":"SimpleFOC源码阅读学习笔记：查表法计算正弦余弦值","shortTitle":"查表法计算正弦余弦值","date":"2024-09-06T09:31:00.000Z","article":false,"index":true,"description":"作用 源代码中称，使用这种方法计算正弦余弦后，计算耗时从300us降低到了110us，性能提升了3倍。 BLDCMotor.cpp 原理 foc_utils.c中的代码实现了一个简化版的正弦函数计算方法，它使用了一个包含65个元素的查找表（lookup table）来进行近似计算，并通过线性插值来提高精度。这种方法在资源受限的环境中非常有用，比如在嵌入...","head":[["meta",{"property":"og:url","content":"https://dingdingdang.online/%E7%94%B5%E5%AD%90/SimpleFOC%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9F%A5%E8%A1%A8%E6%B3%95%E8%AE%A1%E7%AE%97%E6%AD%A3%E5%BC%A6%E4%BD%99%E5%BC%A6%E5%80%BC.html"}],["meta",{"property":"og:site_name","content":"YiguiDing的Blog小站"}],["meta",{"property":"og:title","content":"SimpleFOC源码阅读学习笔记：查表法计算正弦余弦值"}],["meta",{"property":"og:description","content":"作用 源代码中称，使用这种方法计算正弦余弦后，计算耗时从300us降低到了110us，性能提升了3倍。 BLDCMotor.cpp 原理 foc_utils.c中的代码实现了一个简化版的正弦函数计算方法，它使用了一个包含65个元素的查找表（lookup table）来进行近似计算，并通过线性插值来提高精度。这种方法在资源受限的环境中非常有用，比如在嵌入..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-25T05:39:45.000Z"}],["meta",{"property":"article:author","content":"丁毅桂"}],["meta",{"property":"article:published_time","content":"2024-09-06T09:31:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-25T05:39:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"SimpleFOC源码阅读学习笔记：查表法计算正弦余弦值\\",\\"description\\":\\"作用 源代码中称，使用这种方法计算正弦余弦后，计算耗时从300us降低到了110us，性能提升了3倍。 BLDCMotor.cpp 原理 foc_utils.c中的代码实现了一个简化版的正弦函数计算方法，它使用了一个包含65个元素的查找表（lookup table）来进行近似计算，并通过线性插值来提高精度。这种方法在资源受限的环境中非常有用，比如在嵌入...\\"}"],["meta",{"name":"baidu-site-verification","content":"codeva-PwE9Ts6nMl"}]]},"headers":[{"level":2,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":2,"title":"源代码","slug":"源代码","link":"#源代码","children":[]}],"git":{"createdTime":1725594274000,"updatedTime":1732513185000,"contributors":[{"name":"YiguiDing","email":"2449695354@qq.com","commits":5}]},"readingTime":{"minutes":3.16,"words":947},"filePathRelative":"电子/SimpleFOC源码阅读学习笔记/查表法计算正弦余弦值.md","localizedDate":"2024年9月6日","excerpt":"","autoDesc":true}');export{b as comp,v as data};
