import{_ as n,c as s,o as a,b as p}from"./app-DjDtDPYL.js";const t="/assets/image-10-BxAx0vdC.png",e="/assets/image-11-CAuFhYG9.png",c="/assets/image-12-CvaCi7q0.png",l="/assets/5d3f95aa0b5db04cb5964b68745a60f1-DaSnfsFP.png",o="/assets/image-_7ZNUn9n.png",i="/assets/image-1-B4EPieMY.png",u="/assets/image-2-zoGBhsAP.png",r="/assets/image-3-45CRhuLA.png",k="/assets/image-4-DxYKL9Ru.png",d="/assets/image-5-D1629hX7.png",v="/assets/image-7-CCfBBqpI.png",m="/assets/image-8-BQAu2F0O.png",b="/assets/image-6-EGxkPaws.png",f="/assets/image-9-yBDTRhfB.png",_="/assets/image-13-DBymkk8l.png",g="/assets/image-14-j83o5ZZK.png",h="/assets/image-15-BYRARtai.png",y="/assets/image-16-DdboDbxP.png",w="/assets/image-17-eEciIJZ4.png",x="/assets/image-18-aRgmCPaT.png",L="/assets/image-19-nKTvxPxh.png",A="/assets/image-20-enIlnP4c.png",C="/assets/image-21-CeVhZUmC.png",F="/assets/image-22-cIYYXvl4.png",R="/assets/image-23-BUveD0no.png",U="/assets/image-24-C0PpH3gE.png",q="/assets/image-25-C7zY5zue.png",V="/assets/image-34-vL_Bt3Ex.png",E="/assets/image-33-B3rdfJqh.png",N="/assets/image-35-DdxawQDy.png",O="/assets/image-36-QIBP_nGy.png",B="/assets/image-28-CsymLX26.png",D="/assets/image-29-C6GBp-Dq.png",G="/assets/image-26-SruUoIQP.png",P="/assets/image-27-BeLWtWZa.png",I="/assets/image-31-CBFpu5hS.png",S="/assets/image-32-Cjpaf6A_.png",T="/assets/image-30-oibcU7zT.png",M="/assets/image-37-DyZ_7DRm.png",Y="/assets/image-38-BbwfFWC0.png",z="/assets/image-39-BR-wQD83.png",H="/assets/image-40-LU2-N4cy.png",W="/assets/image-41-L9j-Wglo.png",$="/assets/image-43-D8HjxgdW.png",j="/assets/image-42-BOm90U7z.png",Q="/assets/image-44-DV3-Aw8k.png",X="/assets/image-45-Bi_bDula.png",Z="/assets/image-46-CvNeNZ-8.png",J="/assets/image-47-BwTj37th.png",K="/assets/image-48-CkZEueT-.png",nn="/assets/image-49-DZPvMTFm.png",sn="/assets/image-50-BjbQOY2C.png",an={},pn=p(`<h1 id="ffmpeg音视频开发学习笔记" tabindex="-1"><a class="header-anchor" href="#ffmpeg音视频开发学习笔记"><span>ffmpeg音视频开发学习笔记</span></a></h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ul><li><a href="#ffmpeg%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">ffmpeg音视频开发学习笔记</a><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#ffmpeg%E7%AE%80%E4%BB%8B">ffmpeg简介</a></li><li><a href="#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">开发环境搭建</a></li><li><a href="#%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F">日志系统</a></li><li><a href="#%E7%BC%96%E8%AF%91%E5%91%BD%E4%BB%A4">编译命令</a></li><li><a href="#%E6%89%93%E5%BC%80%E8%BE%93%E5%85%A5">打开输入</a></li><li><a href="#%E8%A7%A3%E5%B0%81%E8%A3%85%E6%8F%90%E5%8F%96aac%E9%9F%B3%E9%A2%91">解封装提取AAC音频</a></li><li><a href="#%E8%A7%A3%E5%B0%81%E8%A3%85%E6%8F%90%E5%8F%96h264%E8%A7%86%E9%A2%91">解封装提取H264视频</a></li><li><a href="#%E8%BD%AC%E5%B0%81%E8%A3%85mp4-to-flv">转封装——mp4-to-flv</a></li><li><a href="#%E6%97%B6%E9%97%B4%E5%9F%BA%E6%97%B6%E9%97%B4%E6%88%B3%E6%97%B6%E9%95%BF">时间基、时间戳、时长</a></li><li><a href="#%E6%88%AA%E5%8F%96%E5%B0%81%E8%A3%85">截取封装</a></li><li><a href="#rgbyuv">RGB、YUV</a><ul><li><a href="#rgb">RGB</a></li><li><a href="#yuv">YUV</a></li></ul></li><li><a href="#%E8%A7%86%E9%A2%91%E8%A7%A3%E7%A0%81">视频解码</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E5%88%86%E8%BE%A8%E7%8E%87">修改分辨率</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E6%A0%BC%E5%BC%8F%E4%B8%BArgb24">修改格式为RGB24</a></li><li><a href="#%E4%BF%9D%E5%AD%98raw%E6%A0%BC%E5%BC%8F%E5%9B%BE%E5%83%8F">保存raw格式图像</a></li><li><a href="#yuv_to_h264%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81">YUV_to_H264视频编码</a></li><li><a href="#%E9%9F%B3%E9%A2%91%E8%A7%A3%E7%A0%81aac_pcm">音频解码AAC_PCM</a></li><li><a href="#%E9%9F%B3%E9%A2%91%E7%BC%96%E7%A0%81pcm_to_aac">音频编码PCM_to_AAC</a></li><li><a href="#%E9%9F%B3%E8%A7%86%E9%A2%91%E9%87%87%E9%9B%86">音视频采集</a><ul><li><a href="#%E8%A7%86%E9%A2%91%E9%87%87%E9%9B%86">视频采集</a></li><li><a href="#%E9%9F%B3%E9%A2%91%E9%87%87%E9%9B%86">音频采集</a></li><li><a href="#%E5%90%8C%E6%97%B6%E9%87%87%E9%9B%86%E8%A7%86%E9%A2%91%E5%92%8C%E9%9F%B3%E9%A2%91">同时采集视频和音频</a></li></ul></li><li><a href="#%E9%9F%B3%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E4%B8%8E%E6%98%BE%E7%A4%BA">音视频播放与显示</a><ul><li><a href="#sdl">SDL</a></li></ul></li></ul></li></ul><h2 id="ffmpeg简介" tabindex="-1"><a class="header-anchor" href="#ffmpeg简介"><span>ffmpeg简介</span></a></h2><p><strong>组成</strong></p><ul><li>ffmpeg音视频转码、编解码工具</li><li>ffprobe多媒体分析器</li><li>ffplay音视频播放器</li><li>ffserver多媒体实时广播流服务器</li></ul><p><strong>模块</strong></p><ul><li><strong>AVCodec编解码模块</strong></li><li><strong>AVFormat封装模块</strong></li><li>AVFilter滤镜模块</li><li>AVUtil基本工具模块</li><li>AVDevice采集与渲染（输入与输出）模块</li><li>swcacle视频图像转换模块</li><li>swresample音频转换计算模块</li></ul><p><strong>应用</strong></p><ul><li><strong>开发音视频播放器（ffmpeg+SDL/QT）</strong></li><li>开发流媒体服务器/在线直播 (ffmpeg + Live555/libRTMP)</li><li><strong>提取可移植的codec算法 (音频、视频)</strong></li><li>开发编解码、转码器 (ffmpeg + libx264/libx265)</li><li>视频会议 (ffmpeg+ webrtc)</li><li>辅助工具，后处理(postproc + libavutils)</li><li><strong>CV训练工具 (ffmpeg+opencv)</strong></li></ul><h2 id="开发环境搭建" tabindex="-1"><a class="header-anchor" href="#开发环境搭建"><span>开发环境搭建</span></a></h2><ul><li>根据 <a href="https://ffmpeg.org/download.html" target="_blank" rel="noopener noreferrer">https://ffmpeg.org/download.html</a>页面提示，</li><li>可从<a href="https://www.gyan.dev/ffmpeg/builds/" target="_blank" rel="noopener noreferrer">Windows builds from gyan.dev</a>下载windows预编译版，</li><li>下载发行版（full-shared）<a href="https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full-shared.7z" target="_blank" rel="noopener noreferrer">release builds-ffmpeg-release-full-shared.7z</a></li></ul><p><strong>目录结构</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token builtin class-name">cd</span> ffmpeg-6.1.1-full_build-shared</span>
<span class="line">$ <span class="token function">ls</span></span>
<span class="line">bin/  doc/  include/  lib/  LICENSE  presets/  README.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置PKG_CONFIG_PATH</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 可能也不是必要的</span></span>
<span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable">PKG_CONFIG_PATH</span><span class="token operator">=</span><span class="token variable">$PKG_CONFIG_PATH</span>:/path/to/ffmpeg-6.1.1/lib/pkgconfig/</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="日志系统" tabindex="-1"><a class="header-anchor" href="#日志系统"><span>日志系统</span></a></h2><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil/log.h&gt;</span> <span class="token comment">// ffmpeg的日志系统</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 设置日志级别</span></span>
<span class="line">    <span class="token function">av_log_set_level</span><span class="token punctuation">(</span>AV_LOG_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;this is a info log.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;this is a error log.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_DEBUG<span class="token punctuation">,</span> <span class="token string">&quot;this is a debug log.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_FATAL<span class="token punctuation">,</span> <span class="token string">&quot;this is a fatal log.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编译命令" tabindex="-1"><a class="header-anchor" href="#编译命令"><span>编译命令</span></a></h2><p><strong>最简写法</strong></p><div class="language-makefile line-numbers-mode" data-highlighter="prismjs" data-ext="makefile" data-title="makefile"><pre><code><span class="line"><span class="token comment">#######################################</span></span>
<span class="line"><span class="token comment"># simple test</span></span>
<span class="line"><span class="token comment">#######################################</span></span>
<span class="line"><span class="token comment"># 编译</span></span>
<span class="line"><span class="token comment"># gcc -c src/main.c -o ./out.o -I D:/app/ffmpeg-6.1.1-full_build-shared/include</span></span>
<span class="line"><span class="token comment"># 链接</span></span>
<span class="line"><span class="token comment"># gcc ./out.o -o ./out.exe -L D:/app/ffmpeg-6.1.1-full_build-shared/lib  -l avutil -l avformat -l avcodec</span></span>
<span class="line"><span class="token comment">#######################################</span></span>
<span class="line"><span class="token comment"># OUTPUT</span></span>
<span class="line"><span class="token comment">#######################################</span></span>
<span class="line">TARGET <span class="token operator">=</span> main.exe</span>
<span class="line">BUILD_DIR <span class="token operator">=</span> build</span>
<span class="line">OUTPUT_DIR <span class="token operator">=</span> output</span>
<span class="line"><span class="token comment">#######################################</span></span>
<span class="line"><span class="token comment"># SOURCES</span></span>
<span class="line"><span class="token comment">#######################################</span></span>
<span class="line">C_CPP_DEFS <span class="token operator">=</span></span>
<span class="line"></span>
<span class="line">C_SOURCES <span class="token operator">=</span>  \\</span>
<span class="line"> src/main.c</span>
<span class="line"><span class="token keyword">vpath</span> %.c <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">sort</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">dir</span> <span class="token variable">$</span><span class="token punctuation">(</span>C_SOURCES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">CPP_SOURCES <span class="token operator">=</span> \\</span>
<span class="line"> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">wildcard</span> src/lib/*.cpp<span class="token punctuation">)</span> \\</span>
<span class="line"> <span class="token comment"># src/main.cpp</span></span>
<span class="line"><span class="token keyword">vpath</span> %.cpp <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">sort</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">dir</span> <span class="token variable">$</span><span class="token punctuation">(</span>CPP_SOURCES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">C_CPP_INCLUDES <span class="token operator">=</span>  \\</span>
<span class="line"><span class="token target symbol"> -I D</span><span class="token punctuation">:</span>/app/ffmpeg-6.1.1-full_build-shared/<span class="token keyword">include</span> \\</span>
<span class="line"> -I src/lib/</span>
<span class="line"></span>
<span class="line">LIBDIR <span class="token operator">=</span> \\</span>
<span class="line"><span class="token target symbol"> -L D</span><span class="token punctuation">:</span>/app/ffmpeg-6.1.1-full_build-shared/lib  -l avutil -l avformat -l avcodec</span>
<span class="line"></span>
<span class="line">DLL_SOURCES <span class="token operator">=</span> \\</span>
<span class="line"><span class="token target symbol"> <span class="token variable">$</span>(wildcard D</span><span class="token punctuation">:</span>/app/ffmpeg-6.1.1-full_build-shared/bin/*.dll<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#######################################</span></span>
<span class="line"><span class="token comment"># COMMAND</span></span>
<span class="line"><span class="token comment">#######################################</span></span>
<span class="line">CC <span class="token operator">=</span> gcc</span>
<span class="line">XX <span class="token operator">=</span> g++</span>
<span class="line"><span class="token comment">#######################################</span></span>
<span class="line"><span class="token comment"># OBJECTS</span></span>
<span class="line"><span class="token comment">#######################################</span></span>
<span class="line">C_CPP_FLAGS <span class="token operator">=</span>  <span class="token variable">$</span><span class="token punctuation">(</span>C_CPP_DEFS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>C_CPP_INCLUDES<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token target symbol"><span class="token variable">$</span>(BUILD_DIR)</span><span class="token punctuation">:</span></span>
<span class="line"> mkdir <span class="token variable">$@</span></span>
<span class="line"></span>
<span class="line">C_OBJECTS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>addprefix <span class="token variable">$</span><span class="token punctuation">(</span>BUILD_DIR<span class="token punctuation">)</span>/,<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">notdir</span> <span class="token variable">$</span><span class="token punctuation">(</span>C_SOURCES<span class="token punctuation">:</span>.c<span class="token operator">=</span>.o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">vpath</span> %.o <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">sort</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">dir</span> <span class="token variable">$</span><span class="token punctuation">(</span>C_OBJECTS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token target symbol"><span class="token variable">$</span>(BUILD_DIR)/%.o</span><span class="token punctuation">:</span> %.c <span class="token operator">|</span> <span class="token variable">$</span><span class="token punctuation">(</span>BUILD_DIR<span class="token punctuation">)</span></span>
<span class="line"> <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$</span><span class="token punctuation">(</span>C_CPP_FLAGS<span class="token punctuation">)</span> <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span></span>
<span class="line"></span>
<span class="line">CPP_OBJECTS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>addprefix <span class="token variable">$</span><span class="token punctuation">(</span>BUILD_DIR<span class="token punctuation">)</span>/,<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">notdir</span> <span class="token variable">$</span><span class="token punctuation">(</span>CPP_SOURCES<span class="token punctuation">:</span>.cpp<span class="token operator">=</span>.o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">vpath</span> %.o <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">sort</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">dir</span> <span class="token variable">$</span><span class="token punctuation">(</span>CPP_OBJECTS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token target symbol"><span class="token variable">$</span>(BUILD_DIR)/%.o</span><span class="token punctuation">:</span> %.cpp <span class="token operator">|</span> <span class="token variable">$</span><span class="token punctuation">(</span>BUILD_DIR<span class="token punctuation">)</span></span>
<span class="line"> <span class="token variable">$</span><span class="token punctuation">(</span>XX<span class="token punctuation">)</span> -c <span class="token variable">$</span><span class="token punctuation">(</span>C_CPP_FLAGS<span class="token punctuation">)</span> <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#######################################</span></span>
<span class="line"><span class="token comment"># LINK</span></span>
<span class="line"><span class="token comment">#######################################</span></span>
<span class="line">LD_FLAGS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>LIBDIR<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token target symbol"><span class="token variable">$</span>(OUTPUT_DIR)</span><span class="token punctuation">:</span></span>
<span class="line"> mkdir <span class="token variable">$@</span></span>
<span class="line"> cp <span class="token variable">$</span><span class="token punctuation">{</span>DLL_SOURCES<span class="token punctuation">}</span> <span class="token variable">$@</span></span>
<span class="line"></span>
<span class="line"><span class="token target symbol"><span class="token variable">$</span>(OUTPUT_DIR)/<span class="token variable">$</span>(TARGET)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>C_OBJECTS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CPP_OBJECTS<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token variable">$</span><span class="token punctuation">(</span>OUTPUT_DIR<span class="token punctuation">)</span></span>
<span class="line"> <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span>  <span class="token variable">$</span><span class="token punctuation">(</span>C_OBJECTS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CPP_OBJECTS<span class="token punctuation">)</span> -o <span class="token variable">$@</span> <span class="token variable">$</span><span class="token punctuation">(</span>LD_FLAGS<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#######################################</span></span>
<span class="line"><span class="token comment"># COMMAND</span></span>
<span class="line"><span class="token comment">#######################################</span></span>
<span class="line"><span class="token target symbol">all</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OUTPUT_DIR<span class="token punctuation">)</span>/<span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token target symbol">clean</span><span class="token punctuation">:</span></span>
<span class="line"> -rm -fR <span class="token variable">$</span><span class="token punctuation">(</span>BUILD_DIR<span class="token punctuation">)</span></span>
<span class="line"> -rm -fR <span class="token variable">$</span><span class="token punctuation">(</span>OUTPUT_DIR<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="打开输入" tabindex="-1"><a class="header-anchor" href="#打开输入"><span>打开输入</span></a></h2><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil/log.h&gt;</span> <span class="token comment">// ffmpeg的日志系统</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavformat/avformat.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> err<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 设置日志级别</span></span>
<span class="line">    <span class="token function">av_log_set_level</span><span class="token punctuation">(</span>AV_LOG_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 提示用法</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;usage %s media.mp4_or_url&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>url <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    AVFormatContext <span class="token operator">*</span>formatCtx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 打开流</span></span>
<span class="line">    err <span class="token operator">=</span> <span class="token function">avformat_open_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>formatCtx<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_FATAL<span class="token punctuation">,</span> <span class="token string">&quot;open url %s fail: %s;&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token function">av_err2str</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> err<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 输出流信息</span></span>
<span class="line">    <span class="token function">av_dump_format</span><span class="token punctuation">(</span>formatCtx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 关闭流</span></span>
<span class="line">    <span class="token function">avformat_close_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>formatCtx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">mime <span class="token builtin class-name">type</span> is not rfc8216 compliant</span>
<span class="line"><span class="token punctuation">[</span>hls @ 000002a673c8a8c0<span class="token punctuation">]</span> Opening <span class="token string">&#39;http://devimages.apple.com/iphone/samples/bipbop/gear1/fileSequence0.ts&#39;</span> <span class="token keyword">for</span> reading</span>
<span class="line"><span class="token punctuation">[</span>hls @ 000002a673c8a8c0<span class="token punctuation">]</span> Opening <span class="token string">&#39;http://devimages.apple.com/iphone/samples/bipbop/gear1/fileSequence1.ts&#39;</span> <span class="token keyword">for</span> reading</span>
<span class="line">Input <span class="token comment">#0, hls, from &#39;http://devimages.apple.com/iphone/samples/bipbop/gear1/prog_index.m3u8&#39;:</span></span>
<span class="line">  Duration: 00:30:01.00, bitrate: N/A</span>
<span class="line">  Program <span class="token number">0</span></span>
<span class="line">    Metadata:</span>
<span class="line">      variant_bitrate <span class="token builtin class-name">:</span> <span class="token number">0</span></span>
<span class="line">  Stream <span class="token comment">#0:0: Audio: aac ([15][0][0][0] / 0x000F), 0 channels</span></span>
<span class="line">    Metadata:</span>
<span class="line">      variant_bitrate <span class="token builtin class-name">:</span> <span class="token number">0</span></span>
<span class="line">  Stream <span class="token comment">#0:1: Video: h264 ([27][0][0][0] / 0x001B), none, 90k tbn</span></span>
<span class="line">    Metadata:</span>
<span class="line">      variant_bitrate <span class="token builtin class-name">:</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解封装提取aac音频" tabindex="-1"><a class="header-anchor" href="#解封装提取aac音频"><span>解封装提取AAC音频</span></a></h2><p><strong>AAC</strong></p><ul><li>AAC只是数据编码格式</li><li>码流组织格式有： <ul><li>ADIF(Audio Data Interchange Format)</li><li>ADTS (Audio Data Transport Stream)</li></ul></li><li>ADIF编码信息存在一个固定的地方,所以ADIF主要用于磁盘存储文件，</li><li>ADTS编码信息是每一个包中都有,ADTS主要用于渐进式传输的网络流</li></ul><p><strong>ADTS 流格式</strong></p><ul><li>ADTS流格式为ADTS头部加AAC裸数据。</li><li><code>[ADTS头](AAC数据) | [ADTS头](AAC数据) | ...</code></li><li>ADTS Header为固定的7字节长度，格式可以用下面字母序列来表示，一个字母表示一种字段，数量表示比特长度。</li><li><code>AAAAAAAA AAAABCCD EEFFFFGH HHIJKLMM MMMMMMMM MMMOOOOO OOOOOOPP (QQQQQQQQ QQQQQQQQ)</code></li><li>其中A-J称为ADTS固定头部，K-Q称为可变头部。</li></ul><table><thead><tr><th style="text-align:left;">标志</th><th style="text-align:left;">比特</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">A</td><td style="text-align:left;">12</td><td style="text-align:left;">同步字段，全1</td></tr><tr><td style="text-align:left;">B</td><td style="text-align:left;">1</td><td style="text-align:left;">MPEG版本: 0 for MPEG-4, 1 for MPEG-2，mp4是0</td></tr><tr><td style="text-align:left;">C</td><td style="text-align:left;">2</td><td style="text-align:left;">Layer: 全0</td></tr><tr><td style="text-align:left;">D</td><td style="text-align:left;">1</td><td style="text-align:left;">保护缺失标识ProtectionAbsent , 1 表示无 CRC ，0 表示有 CRC</td></tr><tr><td style="text-align:left;">E</td><td style="text-align:left;">2</td><td style="text-align:left;">AAC编码级别, MPEG-4 Audio Object Type减1。0: Main Profile, 1:LC, 2: SSR，3:保留。常用低复杂度编码LC。</td></tr><tr><td style="text-align:left;">F</td><td style="text-align:left;">4</td><td style="text-align:left;">MPEG-4 采样率表序号，注意这里是序号，不是采样率值，参考采样率表。</td></tr><tr><td style="text-align:left;">G</td><td style="text-align:left;">1</td><td style="text-align:left;">私有位，设为0，解码时忽略</td></tr><tr><td style="text-align:left;">H</td><td style="text-align:left;">3</td><td style="text-align:left;">声道数，取值范围1-7。</td></tr><tr><td style="text-align:left;">I</td><td style="text-align:left;">1</td><td style="text-align:left;">源标识, 编码设为0，解码忽略</td></tr><tr><td style="text-align:left;">J</td><td style="text-align:left;">1</td><td style="text-align:left;">home, 编码设为0，解码忽略</td></tr><tr><td style="text-align:left;">K</td><td style="text-align:left;">1</td><td style="text-align:left;">版权标志位，编码设为0，解码忽略</td></tr><tr><td style="text-align:left;">L</td><td style="text-align:left;">1</td><td style="text-align:left;">版权标志开始位，编码设为0，解码忽略</td></tr><tr><td style="text-align:left;">M</td><td style="text-align:left;">13</td><td style="text-align:left;">帧长度，为AAC原始数据长度+ADTS头长度（ProtectionAbsent == 1 ? 7 : 9）</td></tr><tr><td style="text-align:left;">O</td><td style="text-align:left;">11</td><td style="text-align:left;">Buffer fullness， 0x7FF 说明是码率可变的码流</td></tr><tr><td style="text-align:left;">P</td><td style="text-align:left;">2</td><td style="text-align:left;">AAC帧数量减1值，有1个帧时此值为0</td></tr><tr><td style="text-align:left;">Q</td><td style="text-align:left;">16</td><td style="text-align:left;">如果保护缺失标识ProtectionAbsent为0，标识有2字节CRC校验字段</td></tr></tbody></table><p><strong>固定头</strong><br><img src="`+t+'" alt="Alt text"></p><p><strong>可变头</strong><br><img src="'+e+'" alt="Alt text"></p><p><strong>采样率对照表</strong></p><p><img src="'+c+'" alt="Alt text"></p><p><img src="'+l+'" alt="Alt text"><br><img src="'+o+`" alt="Alt text"></p><p><strong>提取视频中的AAC音频</strong></p><blockquote><p>如果ffplay不能播放，是因为aac格式不是adts</p></blockquote><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil/avutil.h&gt;</span>     <span class="token comment">// for log</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavformat/avformat.h&gt;</span> <span class="token comment">// for avformat</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavcodec/avcodec.h&gt;</span>   <span class="token comment">// for packet</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;./lib/adts.h&quot;</span>           <span class="token comment">// for adts 音频头</span></span></span>
<span class="line"><span class="token keyword">int</span> err<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 设置日志级别</span></span>
<span class="line">  <span class="token function">av_log_set_level</span><span class="token punctuation">(</span>AV_LOG_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 提示用法</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;usage: %s input.mp4 output.aac\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>input <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>output <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 打开流</span></span>
<span class="line">  AVFormatContext <span class="token operator">*</span>format_ctx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">  err <span class="token operator">=</span> <span class="token function">avformat_open_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>format_ctx<span class="token punctuation">,</span> input<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;open input %s fail: %s;\\n&quot;</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> <span class="token function">av_err2str</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> err<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">av_dump_format</span><span class="token punctuation">(</span>format_ctx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 获取码流信息，实际是去对formatCtx中stream相关的参数赋值，因为后面需要用</span></span>
<span class="line">  <span class="token comment">// Read packets of a media file to get stream information.</span></span>
<span class="line">  err <span class="token operator">=</span> <span class="token function">avformat_find_stream_info</span><span class="token punctuation">(</span>format_ctx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;find stream info failed:%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">av_err2str</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> err<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 获取音频流</span></span>
<span class="line">  <span class="token keyword">int</span> audio_idx <span class="token operator">=</span> <span class="token function">av_find_best_stream</span><span class="token punctuation">(</span>format_ctx<span class="token punctuation">,</span> AVMEDIA_TYPE_AUDIO<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>audio_idx <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;find best audio stream index failed; index: %d\\n&quot;</span><span class="token punctuation">,</span> audio_idx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">else</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;find best audio stream index is %d\\n&quot;</span><span class="token punctuation">,</span> audio_idx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 创建文件</span></span>
<span class="line">  FILE <span class="token operator">*</span>dest_fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>dest_fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;make file failed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 初始化packet</span></span>
<span class="line">  AVPacket <span class="token operator">*</span>packet <span class="token operator">=</span> <span class="token function">av_packet_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 读取packet</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">av_read_frame</span><span class="token punctuation">(</span>format_ctx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 找到音频流</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>stream_index <span class="token operator">==</span> audio_idx<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 写入ADTS_Header</span></span>
<span class="line">      <span class="token class-name">uint8_t</span> adts_header<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">set_ADTS_Header</span><span class="token punctuation">(</span></span>
<span class="line">          adts_header<span class="token punctuation">,</span></span>
<span class="line">          packet<span class="token operator">-&gt;</span>size<span class="token punctuation">,</span></span>
<span class="line">          format_ctx<span class="token operator">-&gt;</span>streams<span class="token punctuation">[</span>audio_idx<span class="token punctuation">]</span><span class="token operator">-&gt;</span>codecpar<span class="token operator">-&gt;</span>profile<span class="token punctuation">,</span></span>
<span class="line">          format_ctx<span class="token operator">-&gt;</span>streams<span class="token punctuation">[</span>audio_idx<span class="token punctuation">]</span><span class="token operator">-&gt;</span>codecpar<span class="token operator">-&gt;</span>sample_rate<span class="token punctuation">,</span></span>
<span class="line">          format_ctx<span class="token operator">-&gt;</span>streams<span class="token punctuation">[</span>audio_idx<span class="token punctuation">]</span><span class="token operator">-&gt;</span>codecpar<span class="token operator">-&gt;</span>channels <span class="token comment">//</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fwrite</span><span class="token punctuation">(</span>adts_header<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>adts_header<span class="token punctuation">)</span><span class="token punctuation">,</span> dest_fp<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>adts_header<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;write ADTS_Header failed.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 写入文件（data是原始数据）</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fwrite</span><span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> packet<span class="token operator">-&gt;</span>size<span class="token punctuation">,</span> dest_fp<span class="token punctuation">)</span> <span class="token operator">!=</span> packet<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;write file failed.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 释放packet中的data</span></span>
<span class="line">    <span class="token function">av_packet_unref</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 释放packet</span></span>
<span class="line">  <span class="token function">av_packet_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 关闭流</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>format_ctx<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">avformat_close_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>format_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 关闭文件</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>dest_fp<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">fclose</span><span class="token punctuation">(</span>dest_fp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>adts.h</strong></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_ADTSHEADER_H</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_ADTSHEADER_H</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADTS_HEADER_LEN</span> <span class="token expression"><span class="token number">7</span><span class="token punctuation">;</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">int</span> sampling_frequencies<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token number">96000</span><span class="token punctuation">,</span> <span class="token comment">// 0x0</span></span>
<span class="line">    <span class="token number">88200</span><span class="token punctuation">,</span> <span class="token comment">// 0x1</span></span>
<span class="line">    <span class="token number">64000</span><span class="token punctuation">,</span> <span class="token comment">// 0x2</span></span>
<span class="line">    <span class="token number">48000</span><span class="token punctuation">,</span> <span class="token comment">// 0x3</span></span>
<span class="line">    <span class="token number">44100</span><span class="token punctuation">,</span> <span class="token comment">// 0x4</span></span>
<span class="line">    <span class="token number">32000</span><span class="token punctuation">,</span> <span class="token comment">// 0x5</span></span>
<span class="line">    <span class="token number">24000</span><span class="token punctuation">,</span> <span class="token comment">// 0x6</span></span>
<span class="line">    <span class="token number">22050</span><span class="token punctuation">,</span> <span class="token comment">// 0x7</span></span>
<span class="line">    <span class="token number">16000</span><span class="token punctuation">,</span> <span class="token comment">// 0x8</span></span>
<span class="line">    <span class="token number">12000</span><span class="token punctuation">,</span> <span class="token comment">// 0x9</span></span>
<span class="line">    <span class="token number">11025</span><span class="token punctuation">,</span> <span class="token comment">// 0xa</span></span>
<span class="line">    <span class="token number">8000</span>   <span class="token comment">// 0xb</span></span>
<span class="line">    <span class="token comment">// 0xc d e f是保留的</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">set_ADTS_Header</span><span class="token punctuation">(</span><span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token keyword">int</span> data_length<span class="token punctuation">,</span></span>
<span class="line">                <span class="token keyword">int</span> profile<span class="token punctuation">,</span></span>
<span class="line">                <span class="token keyword">int</span> samplerate<span class="token punctuation">,</span></span>
<span class="line">                <span class="token keyword">int</span> channels<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">int</span> sampling_frequency_index <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 默认使用48000hz</span></span>
<span class="line">    <span class="token keyword">int</span> adtsLen <span class="token operator">=</span> data_length <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// ADTS不是单纯的data，是hearder+data的，所以加7这个头部hearder的长度，这里7是因为后面protection absent位设为1，不做校验，所以直接加7，如果做校验，可能会是9</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">int</span> frequencies_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sampling_frequencies<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sampling_frequencies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> frequencies_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 查找采样率</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>sampling_frequencies<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> samplerate<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            sampling_frequency_index <span class="token operator">=</span> i<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> frequencies_size<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;unsupport samplerate:%d\\n&quot;</span><span class="token punctuation">,</span> samplerate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>                                    <span class="token comment">// syncword:0xfff                          高8bits</span></span>
<span class="line">    data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xf0</span><span class="token punctuation">;</span>                                    <span class="token comment">// syncword:0xfff                          低4bits</span></span>
<span class="line">    data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">// MPEG Version:0 for MPEG-4,1 for MPEG-2  1bit</span></span>
<span class="line">    data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">// Layer:0                                 2bits</span></span>
<span class="line">    data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                      <span class="token comment">// protection absent:1                     1bit</span></span>
<span class="line">    data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>profile<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span>                          <span class="token comment">// profile:profile               2bits</span></span>
<span class="line">    data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span>sampling_frequency_index <span class="token operator">&amp;</span> <span class="token number">0x0f</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// sampling frequency index:sampling_frequency_index  4bits</span></span>
<span class="line">    data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">// private bit:0                   1bit</span></span>
<span class="line">    data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span>channels <span class="token operator">&amp;</span> <span class="token number">0x04</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>                 <span class="token comment">// channel configuration:channels  高1bit</span></span>
<span class="line">    data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>channels <span class="token operator">&amp;</span> <span class="token number">0x03</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span>                  <span class="token comment">// channel configuration:channels 低2bits</span></span>
<span class="line">    data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">// original：0                1bit</span></span>
<span class="line">    data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">// home：0                    1bit</span></span>
<span class="line">    data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">// copyright id bit：0        1bit</span></span>
<span class="line">    data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">// copyright id start：0      1bit</span></span>
<span class="line">    data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>adtsLen <span class="token operator">&amp;</span> <span class="token number">0x1800</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// frame length：value    高2bits</span></span>
<span class="line">    data<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>adtsLen <span class="token operator">&amp;</span> <span class="token number">0x7f8</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// frame length: value    中间8bits</span></span>
<span class="line">    data<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>adtsLen <span class="token operator">&amp;</span> <span class="token number">0x7</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// frame length: value    低3bits</span></span>
<span class="line">    data<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">0x1f</span><span class="token punctuation">;</span>                                   <span class="token comment">// buffer fullness:0x7ff 高5bits</span></span>
<span class="line">    data<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xfc</span><span class="token punctuation">;</span>                                    <span class="token comment">// 11111100       //buffer fullness:0x7ff 低6bits</span></span>
<span class="line">    <span class="token comment">// number_of_raw_data_blocks_in_frame：  //    表示ADTS帧中有number_of_raw_data_blocks_in_frame + 1个AAC原始帧。</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// _ADTSHEADER_H</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>AAC音频格式</strong></p><ul><li><img src="`+i+'" alt="Alt text"></li><li>ADIF-头信息仅在开头，适用于文件传输</li><li>ADTS-头信息在任意帧，适用于流媒体 <ul><li>7~9个字节的头信息</li><li><img src="'+u+'" alt="Alt text"></li><li><img src="'+r+'" alt="Alt text"></li><li><img src="'+k+'" alt="Alt text"></li></ul></li></ul><h2 id="解封装提取h264视频" tabindex="-1"><a class="header-anchor" href="#解封装提取h264视频"><span>解封装提取H264视频</span></a></h2><p><img src="'+d+'" alt="Alt text"><br><strong>264封装格式</strong></p><ul><li>AnnexB 每一帧数据都由<code>startCode</code>+<code>NALU</code>数据组成，适合于流媒体实时传输的封装格式</li><li>AVCC 整个文件由NALU长度+NALU数据组成， 适合存储<br><img src="'+v+'" alt="Alt text"></li></ul><p><strong>字节流过滤器：AVCC转AnnexB</strong></p><p><img src="'+m+'" alt="Alt text"></p><p><img src="'+b+'" alt="Alt text"><br><img src="'+f+`" alt="Alt text"></p><p>代码和提取音频几乎没有区别</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil/avutil.h&gt;</span>     <span class="token comment">// for log</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavformat/avformat.h&gt;</span> <span class="token comment">// for avformat</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavcodec/avcodec.h&gt;</span>   <span class="token comment">// for packet</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavcodec/bsf.h&gt;</span>       <span class="token comment">// for bsf</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> err<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 设置日志级别</span></span>
<span class="line">  <span class="token function">av_log_set_level</span><span class="token punctuation">(</span>AV_LOG_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 提示用法</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;usage: %s input.mp4 output.h264\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>input <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>output <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 打开流</span></span>
<span class="line">  AVFormatContext <span class="token operator">*</span>format_ctx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">  err <span class="token operator">=</span> <span class="token function">avformat_open_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>format_ctx<span class="token punctuation">,</span> input<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;open input %s fail: %s;\\n&quot;</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> <span class="token function">av_err2str</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> err<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">av_dump_format</span><span class="token punctuation">(</span>format_ctx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 获取码流信息，实际是去对formatCtx中stream相关的参数赋值，因为后面需要用</span></span>
<span class="line">  <span class="token comment">// Read packets of a media file to get stream information.</span></span>
<span class="line">  err <span class="token operator">=</span> <span class="token function">avformat_find_stream_info</span><span class="token punctuation">(</span>format_ctx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;find stream info failed:%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">av_err2str</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> err<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 获取视频流</span></span>
<span class="line">  <span class="token keyword">int</span> video_idx <span class="token operator">=</span> <span class="token function">av_find_best_stream</span><span class="token punctuation">(</span>format_ctx<span class="token punctuation">,</span> AVMEDIA_TYPE_VIDEO<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>video_idx <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;find best video stream index failed; index: %d\\n&quot;</span><span class="token punctuation">,</span> video_idx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">else</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;find best video stream index is %d\\n&quot;</span><span class="token punctuation">,</span> video_idx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 创建文件</span></span>
<span class="line">  FILE <span class="token operator">*</span>dest_fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>dest_fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;make file failed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 获取比特流过滤器</span></span>
<span class="line">  <span class="token comment">// mp4 to annexb</span></span>
<span class="line">  <span class="token comment">// Convert an H.264 bitstream from \`length prefixed mode\` to \`start code prefixed mode\`</span></span>
<span class="line">  <span class="token comment">//  this filter is auto-inserted for MPEG-TS (muxer mpegts) and raw H.264 (muxer h264) output formats.</span></span>
<span class="line">  <span class="token comment">// ffmpeg -i INPUT.mp4 -codec copy -bsf:v h264_mp4toannexb OUTPUT.ts</span></span>
<span class="line">  <span class="token keyword">const</span> AVBitStreamFilter <span class="token operator">*</span>bsf <span class="token operator">=</span> <span class="token function">av_bsf_get_by_name</span><span class="token punctuation">(</span><span class="token string">&quot;h264_mp4toannexb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>bsf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;creat AVBitStreamFilter: h264_mp4toannexb  failed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// Allocate a context for a given bitstream filter.</span></span>
<span class="line">  <span class="token comment">// 创建bsf上下文</span></span>
<span class="line">  AVBSFContext <span class="token operator">*</span>bsf_ctx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">av_bsf_alloc</span><span class="token punctuation">(</span>bsf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bsf_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 复制编码参数</span></span>
<span class="line">  <span class="token comment">// 提取h264,不需要改变编码参数</span></span>
<span class="line">  <span class="token function">avcodec_parameters_copy</span><span class="token punctuation">(</span>bsf_ctx<span class="token operator">-&gt;</span>par_in<span class="token punctuation">,</span> format_ctx<span class="token operator">-&gt;</span>streams<span class="token punctuation">[</span>video_idx<span class="token punctuation">]</span><span class="token operator">-&gt;</span>codecpar<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 初始化bsf</span></span>
<span class="line">  <span class="token comment">// Prepare the filter for use</span></span>
<span class="line">  <span class="token function">av_bsf_init</span><span class="token punctuation">(</span>bsf_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 初始化packet</span></span>
<span class="line">  AVPacket <span class="token operator">*</span>packet <span class="token operator">=</span> <span class="token function">av_packet_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 读取packet</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">av_read_frame</span><span class="token punctuation">(</span>format_ctx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 找到视频流</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>stream_index <span class="token operator">==</span> video_idx<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 发送到bsf</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">av_bsf_send_packet</span><span class="token punctuation">(</span>bsf_ctx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 从bsf接收数据</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">av_bsf_receive_packet</span><span class="token punctuation">(</span>bsf_ctx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 写入文件</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fwrite</span><span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> packet<span class="token operator">-&gt;</span>size<span class="token punctuation">,</span> dest_fp<span class="token punctuation">)</span> <span class="token operator">!=</span> packet<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;write file failed.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">else</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;send packet to bsf failed.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 释放packet中的data</span></span>
<span class="line">    <span class="token function">av_packet_unref</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 释放packet</span></span>
<span class="line">  <span class="token function">av_packet_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 关闭流</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>format_ctx<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">avformat_close_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>format_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 清除bsf</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>bsf_ctx<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">av_bsf_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bsf_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 关闭文件</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>dest_fp<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">fclose</span><span class="token punctuation">(</span>dest_fp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="转封装——mp4-to-flv" tabindex="-1"><a class="header-anchor" href="#转封装——mp4-to-flv"><span>转封装——mp4-to-flv</span></a></h2><p><strong>I、P、B帧</strong></p><ul><li>I帧，关键帧，GOP的第一帧，轻度压缩，</li><li>P帧，前向预测编码帧。</li><li>B帧，双向预测内插编码帧。</li><li><img src="`+_+'" alt="Alt text"></li></ul><p><strong>解码和显示顺序</strong></p><ul><li>B帧解码依赖I帧和P帧，B帧太多，则解码需要缓存更多数据</li><li>B帧又是体机最小的帧，B帧多，可以降低带宽。<br><img src="'+g+'" alt="Alt text"></li></ul><p><strong>PTS和DTS</strong><br><img src="'+h+'" alt="Alt text"></p><p><strong>转封装流程</strong></p><p><img src="'+y+`" alt="Alt text"></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil/avutil.h&gt;</span>     <span class="token comment">// for log</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavformat/avformat.h&gt;</span> <span class="token comment">// for avformat</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavcodec/avcodec.h&gt;</span>   <span class="token comment">// for packet</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavcodec/bsf.h&gt;</span>       <span class="token comment">// for bsf</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 设置日志级别</span></span>
<span class="line">  <span class="token function">av_log_set_level</span><span class="token punctuation">(</span>AV_LOG_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 提示用法</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;usage: %s input.mp4 output.flv\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>input <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>output <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 打开输入上下文</span></span>
<span class="line">  AVFormatContext <span class="token operator">*</span>in_format_ctx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">avformat_open_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>in_format_ctx<span class="token punctuation">,</span> input<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;open input %s fail;\\n&quot;</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 显示输入的详细信息</span></span>
<span class="line">  <span class="token comment">// Print detailed information about the input or output format</span></span>
<span class="line">  <span class="token function">av_dump_format</span><span class="token punctuation">(</span>in_format_ctx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 获取输入码流信息，实际是去对formatCtx中stream相关的参数赋值，因为后面需要用</span></span>
<span class="line">  <span class="token comment">// Read packets of a media file to get stream information.</span></span>
<span class="line">  ret <span class="token operator">=</span> <span class="token function">avformat_find_stream_info</span><span class="token punctuation">(</span>in_format_ctx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;find stream info failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 创建输出上下文</span></span>
<span class="line">  AVFormatContext <span class="token operator">*</span>out_format_ctx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">  ret <span class="token operator">=</span> <span class="token function">avformat_alloc_output_context2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>out_format_ctx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;alloc output format failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 对输出流计数</span></span>
<span class="line">  <span class="token keyword">int</span> out_stream_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 记录输入流和输出流的对应关系</span></span>
<span class="line">  <span class="token keyword">int</span> io_stream_idx_map<span class="token punctuation">[</span>in_format_ctx<span class="token operator">-&gt;</span>nb_streams<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">memset</span><span class="token punctuation">(</span>io_stream_idx_map<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>io_stream_idx_map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 收集(挑选)视频流、音频流、字幕流</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> in_stream_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> in_stream_idx <span class="token operator">&lt;</span> in_format_ctx<span class="token operator">-&gt;</span>nb_streams<span class="token punctuation">;</span> in_stream_idx<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    AVStream <span class="token operator">*</span>in_stream <span class="token operator">=</span> in_format_ctx<span class="token operator">-&gt;</span>streams<span class="token punctuation">[</span>in_stream_idx<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>in_stream<span class="token operator">-&gt;</span>codecpar<span class="token operator">-&gt;</span>codec_type <span class="token operator">==</span> AVMEDIA_TYPE_AUDIO <span class="token operator">||</span></span>
<span class="line">        in_stream<span class="token operator">-&gt;</span>codecpar<span class="token operator">-&gt;</span>codec_type <span class="token operator">==</span> AVMEDIA_TYPE_VIDEO <span class="token operator">||</span></span>
<span class="line">        in_stream<span class="token operator">-&gt;</span>codecpar<span class="token operator">-&gt;</span>codec_type <span class="token operator">==</span> AVMEDIA_TYPE_SUBTITLE<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 创建输出的视频流、音频流、字幕流</span></span>
<span class="line">      <span class="token comment">// Add a new stream to a media file. When demuxing</span></span>
<span class="line">      AVStream <span class="token operator">*</span>out_stream <span class="token operator">=</span> <span class="token function">avformat_new_stream</span><span class="token punctuation">(</span>out_format_ctx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>out_stream <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;creat media stream failed.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 拷贝流的编码参数</span></span>
<span class="line">      <span class="token comment">// Copy the contents of src to dst.</span></span>
<span class="line">      <span class="token function">avcodec_parameters_copy</span><span class="token punctuation">(</span>out_stream<span class="token operator">-&gt;</span>codecpar<span class="token punctuation">,</span> in_stream<span class="token operator">-&gt;</span>codecpar<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// Additional information about the codec</span></span>
<span class="line">      out_stream<span class="token operator">-&gt;</span>codecpar<span class="token operator">-&gt;</span>codec_tag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// codec_tag不需要拷贝</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 记录对应关系</span></span>
<span class="line">      io_stream_idx_map<span class="token punctuation">[</span>in_stream_idx<span class="token punctuation">]</span> <span class="token operator">=</span> out_stream_idx<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>out_format_ctx<span class="token operator">-&gt;</span>oformat<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> AVFMT_NOFILE<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// AVFMT_NOFILE cant be write</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;AVFMT_NOFILE cant be write.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// Create and initialize a AVIOContext for accessing the resource indicated by url.</span></span>
<span class="line">  <span class="token comment">// 输出文件</span></span>
<span class="line">  <span class="token comment">// I/O context</span></span>
<span class="line">  ret <span class="token operator">=</span> <span class="token function">avio_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>out_format_ctx<span class="token operator">-&gt;</span>pb<span class="token punctuation">,</span> output<span class="token punctuation">,</span> AVIO_FLAG_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;open %s file failed.\\n&quot;</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 写入文件头</span></span>
<span class="line">  ret <span class="token operator">=</span> <span class="token function">avformat_write_header</span><span class="token punctuation">(</span>out_format_ctx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;write stream header to output media file failed.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 读取流</span></span>
<span class="line">  AVPacket <span class="token operator">*</span>packet <span class="token operator">=</span> <span class="token function">av_packet_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">av_read_frame</span><span class="token punctuation">(</span>in_format_ctx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 如果找到</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>io_stream_idx_map<span class="token punctuation">[</span>packet<span class="token operator">-&gt;</span>stream_index<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 获取输入流和输出流</span></span>
<span class="line">      AVStream <span class="token operator">*</span>inStream <span class="token operator">=</span> in_format_ctx<span class="token operator">-&gt;</span>streams<span class="token punctuation">[</span>packet<span class="token operator">-&gt;</span>stream_index<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      AVStream <span class="token operator">*</span>outStream <span class="token operator">=</span> out_format_ctx<span class="token operator">-&gt;</span>streams<span class="token punctuation">[</span>io_stream_idx_map<span class="token punctuation">[</span>packet<span class="token operator">-&gt;</span>stream_index<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 修改stream_index</span></span>
<span class="line">      packet<span class="token operator">-&gt;</span>stream_index <span class="token operator">=</span> io_stream_idx_map<span class="token punctuation">[</span>packet<span class="token operator">-&gt;</span>stream_index<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 重新计算pts(显示时间戳) : arg1 * arg2 / arg3</span></span>
<span class="line">      packet<span class="token operator">-&gt;</span>pts <span class="token operator">=</span> <span class="token function">av_rescale_q</span><span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>pts<span class="token punctuation">,</span> inStream<span class="token operator">-&gt;</span>time_base<span class="token punctuation">,</span> outStream<span class="token operator">-&gt;</span>time_base<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 重新计算dts(解码时间戳)</span></span>
<span class="line">      packet<span class="token operator">-&gt;</span>dts <span class="token operator">=</span> <span class="token function">av_rescale_q</span><span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>dts<span class="token punctuation">,</span> inStream<span class="token operator">-&gt;</span>time_base<span class="token punctuation">,</span> outStream<span class="token operator">-&gt;</span>time_base<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 重新计算duration</span></span>
<span class="line">      packet<span class="token operator">-&gt;</span>duration <span class="token operator">=</span> <span class="token function">av_rescale_q</span><span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>duration<span class="token punctuation">,</span> inStream<span class="token operator">-&gt;</span>time_base<span class="token punctuation">,</span> outStream<span class="token operator">-&gt;</span>time_base<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// byte position in stream, -1 if unknown</span></span>
<span class="line">      packet<span class="token operator">-&gt;</span>pos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 写入packet</span></span>
<span class="line">      <span class="token comment">// Write a packet to an output media file ensuring correct interleaving.</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">av_interleaved_write_frame</span><span class="token punctuation">(</span>out_format_ctx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Write packet to output media file failed.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 清除buffer</span></span>
<span class="line">    <span class="token function">av_packet_unref</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">av_packet_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 写入文件尾</span></span>
<span class="line">  <span class="token function">av_write_trailer</span><span class="token punctuation">(</span>out_format_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 关闭输入上下文</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>in_format_ctx<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">avformat_close_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>in_format_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 关闭I/O context.</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>out_format_ctx <span class="token operator">&amp;&amp;</span> out_format_ctx<span class="token operator">-&gt;</span>pb <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>out_format_ctx<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> AVFMT_NOFILE<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">avio_closep</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>out_format_ctx<span class="token operator">-&gt;</span>pb<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 关闭输出上下文</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>out_format_ctx<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">avformat_free_context</span><span class="token punctuation">(</span>out_format_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="时间基、时间戳、时长" tabindex="-1"><a class="header-anchor" href="#时间基、时间戳、时长"><span>时间基、时间戳、时长</span></a></h2><p><strong>总结</strong></p><blockquote><ul><li>时间基可以理解为砖块的厚度，</li><li>时间戳可以理解为砖块的数量</li><li>时间（墙的高度）=时间基(砖块厚度) * 时间戳(砖块数量)</li></ul></blockquote><p>在 FFmpeg 中，有几个关键的时间基概念以及它们的作用：</p><ol><li><p><strong>时间基（Time Base）</strong>：在 FFmpeg 中，时间基是用于衡量时间的基本单位，通常表示每秒的帧数或样本数。默认的时间基是 1 秒等于 1000000 微秒（AV_TIME_BASE）。时间基在视频和音频编解码过程中起着重要作用，用于同步和计时。</p></li><li><p><strong>封装格式（Container Format）</strong>：封装格式是用于封装音频、视频、字幕等多种数据流的容器。常见的封装格式有 MP4、AVI、MKV 等。封装格式中包含了媒体数据的描述信息以及时间基等元数据。</p></li><li><p><strong>TBR 帧率（Time Base Rate Frame Rate）</strong>：TBR 帧率指的是视频流中实际的帧率，即每秒显示的帧数。TBR 帧率是根据时间基和时长计算得出的，确保视频流的播放速度。</p></li><li><p><strong>TBN 流的时间基（Time Base Numerator）</strong>：TBN 是视频流的时间基的分子部分，用于确定每个时间单位的大小。TBN 指定了视频流中时间单位的数量。</p></li><li><p><strong>TBC 解码时间基（Time Base Denominator）</strong>：TBC 是视频流的时间基的分母部分，用于指定视频解码器的时间单位。TBC 指定了视频解码器使用的时间单位。</p></li></ol><p>这些概念之间的关系是：</p><ul><li>时间基为其他时间相关参数提供了基础单位，比如 TBR 帧率、TBN 流的时间基和 TBC 解码时间基。</li><li>封装格式中通常包含了媒体数据流的时间基信息，确保播放器能够正确解释和同步音视频数据。</li><li>TBR 帧率是根据时间基计算得出的实际帧率，用于确保视频流的播放速度。</li><li>TBN 流的时间基和 TBC 解码时间基是视频流的时间基的分子和分母部分，分别指定了视频流中时间单位的大小和解码器的时间单位。</li></ul><p>综上所述，时间基、封装格式、TBR 帧率、TBN 流的时间基和 TBC 解码时间基之间密切相关，共同确保了媒体文件的正确解析、同步和播放。</p><p><img src="`+w+'" alt="Alt text"></p><p>在FFmpeg中，时间基（Time Base）和时间戳（Timestamp）是用于描述媒体数据时间信息的重要概念。</p><ol><li><p><strong>时间基（Time Base）</strong>：时间基表示媒体数据中时间单位的大小，通常以分数的形式表示。它描述了时间的刻度，即每个时间单位的大小。例如，一个时间基为 1/1000 秒，则表示每个时间单位是毫秒级别的。时间基定义了媒体数据的时间分辨率。</p></li><li><p><strong>时间戳（Timestamp）</strong>：时间戳表示特定媒体数据帧或样本的时间信息。它是一个以时间基为单位的整数值，用于表示特定帧或样本在时间轴上的位置。时间戳可以是相对时间，也可以是绝对时间。在视频中，时间戳通常表示每个视频帧的呈现时间；在音频中，时间戳表示每个音频样本的呈现时间。</p></li></ol><p>为什么说时间基表示时间刻度，而时间戳表示有多少个时间刻度，相乘就是时长呢？</p><ul><li><p><strong>时间基表示时间刻度</strong>：时间基描述了每个时间单位的大小，它是时间的刻度。就像一把尺子上的刻度一样，它告诉我们时间的单位大小是多少，但不提供任何特定时间点的信息。</p></li><li><p><strong>时间戳表示有多少个时间刻度</strong>：时间戳是特定帧或样本的时间信息，它表示了从媒体开始到该帧或样本的时间距离。这个距离是以时间基为单位的整数值。因此，如果我们将时间基乘以时间戳的值，就可以得到从媒体开始到该帧或样本的时长。例如，时间基为 1/1000 秒，时间戳为 500，则表示该帧或样本距离媒体开始的时间是 500 * (1/1000) = 0.5 秒。</p></li></ul><p>综上所述，时间基和时间戳在描述媒体数据时间信息时起到了不同的作用，时间基表示时间的刻度，而时间戳表示具体的时间距离，通过与时间基相乘可以得到时间的时长。</p><p><img src="'+x+`" alt="Alt text"></p><p><code>时间 = 时间戳 \\* 时间基</code></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;libavutil/avutil.h&quot;</span>     <span class="token comment">// 工具函数</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;libavformat/avformat.h&quot;</span> <span class="token comment">// 封装</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;libavcodec/avcodec.h&quot;</span>   <span class="token comment">// 编解码器</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">av_log_set_level</span><span class="token punctuation">(</span>AV_LOG_DEBUG<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;usage: %s &lt;filename.mp4&gt;\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">char</span> <span class="token operator">*</span>inFileName <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 打开输入</span></span>
<span class="line">  <span class="token comment">// Open an input stream and read the header.</span></span>
<span class="line">  AVFormatContext <span class="token operator">*</span>format_ctx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">avformat_open_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>format_ctx<span class="token punctuation">,</span> inFileName<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 获取流信息</span></span>
<span class="line">  <span class="token comment">// Read packets of a media file to get stream information.</span></span>
<span class="line">  <span class="token function">avformat_find_stream_info</span><span class="token punctuation">(</span>format_ctx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 输出封装的input的详细信息</span></span>
<span class="line">  <span class="token comment">// Print detailed information about the input or output format</span></span>
<span class="line">  <span class="token function">av_dump_format</span><span class="token punctuation">(</span>format_ctx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inFileName<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">//  ffmpeg 内部时间基</span></span>
<span class="line">  <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;ffmpeg internal time base: %d / %d\\n&quot;</span><span class="token punctuation">,</span> AV_TIME_BASE_Q<span class="token punctuation">.</span>num<span class="token punctuation">,</span> AV_TIME_BASE_Q<span class="token punctuation">.</span>den<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// AV_TIME_BASE_Q 表示的是时间基,值为 1/1000000 秒</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 时间基x时间戳=时间</span></span>
<span class="line">  <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;input format duration(timestamp):%lld\\n&quot;</span><span class="token punctuation">,</span> format_ctx<span class="token operator">-&gt;</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// duration表征的是时间戳</span></span>
<span class="line">  <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;input format duration(s):%lf\\n&quot;</span><span class="token punctuation">,</span> format_ctx<span class="token operator">-&gt;</span>duration <span class="token operator">*</span> <span class="token function">av_q2d</span><span class="token punctuation">(</span>AV_TIME_BASE_Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// av_q2d将分数转换成小数</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> format_ctx<span class="token operator">-&gt;</span>nb_streams<span class="token punctuation">;</span> idx<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    AVStream <span class="token operator">*</span>stream <span class="token operator">=</span> format_ctx<span class="token operator">-&gt;</span>streams<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>codecpar<span class="token operator">-&gt;</span>codec_type <span class="token operator">==</span> AVMEDIA_TYPE_VIDEO<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 视频流的时间基</span></span>
<span class="line">      AVRational videoTimeBase <span class="token operator">=</span> stream<span class="token operator">-&gt;</span>time_base<span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;video stream time base: %d / %d\\n&quot;</span><span class="token punctuation">,</span> videoTimeBase<span class="token punctuation">.</span>num<span class="token punctuation">,</span> videoTimeBase<span class="token punctuation">.</span>den<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>codecpar<span class="token operator">-&gt;</span>codec_type <span class="token operator">==</span> AVMEDIA_TYPE_AUDIO<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 音频流的时间基</span></span>
<span class="line">      AVRational audioTimeBase <span class="token operator">=</span> stream<span class="token operator">-&gt;</span>time_base<span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;audio stream time base: %d / %d\\n&quot;</span><span class="token punctuation">,</span> audioTimeBase<span class="token punctuation">.</span>num<span class="token punctuation">,</span> audioTimeBase<span class="token punctuation">.</span>den<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  AVPacket <span class="token operator">*</span>packet <span class="token operator">=</span> <span class="token function">av_packet_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">av_read_frame</span><span class="token punctuation">(</span>format_ctx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    AVStream <span class="token operator">*</span>mediaStream <span class="token operator">=</span> format_ctx<span class="token operator">-&gt;</span>streams<span class="token punctuation">[</span>packet<span class="token operator">-&gt;</span>stream_index<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    AVRational streamTimeBase <span class="token operator">=</span> mediaStream<span class="token operator">-&gt;</span>time_base<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;stream index: %d\\n&quot;</span><span class="token punctuation">,</span> packet<span class="token operator">-&gt;</span>stream_index<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;\\t stream time base: %d / %d\\n&quot;</span><span class="token punctuation">,</span> streamTimeBase<span class="token punctuation">.</span>num<span class="token punctuation">,</span> streamTimeBase<span class="token punctuation">.</span>den<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;\\t packet pts渲染时间戳: %lld\\n&quot;</span><span class="token punctuation">,</span> packet<span class="token operator">-&gt;</span>pts<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;\\t packet ptsTime渲染时间: %lf\\n&quot;</span><span class="token punctuation">,</span> packet<span class="token operator">-&gt;</span>pts <span class="token operator">*</span> <span class="token function">av_q2d</span><span class="token punctuation">(</span>streamTimeBase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;\\t packet dts解码时间戳: %lld\\n&quot;</span><span class="token punctuation">,</span> packet<span class="token operator">-&gt;</span>dts<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;\\t packet ptsTime解码时间: %lf\\n&quot;</span><span class="token punctuation">,</span> packet<span class="token operator">-&gt;</span>dts <span class="token operator">*</span> <span class="token function">av_q2d</span><span class="token punctuation">(</span>streamTimeBase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;\\t packet duration时间戳: %lld\\n&quot;</span><span class="token punctuation">,</span> packet<span class="token operator">-&gt;</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;\\t packet duration时间: %lf\\n&quot;</span><span class="token punctuation">,</span> packet<span class="token operator">-&gt;</span>duration <span class="token operator">*</span> <span class="token function">av_q2d</span><span class="token punctuation">(</span>streamTimeBase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 释放buffer内存</span></span>
<span class="line">    <span class="token function">av_packet_unref</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">av_packet_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="截取封装" tabindex="-1"><a class="header-anchor" href="#截取封装"><span>截取封装</span></a></h2><p><img src="`+L+`" alt="Alt text"></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;libavutil/avutil.h&quot;</span>     <span class="token comment">// 工具函数</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;libavformat/avformat.h&quot;</span> <span class="token comment">// 封装</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;libavcodec/avcodec.h&quot;</span>   <span class="token comment">// 编解码器</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 设置log级别</span></span>
<span class="line">  <span class="token function">av_log_set_level</span><span class="token punctuation">(</span>AV_LOG_DEBUG<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 判断参数个数</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;usage: %s &lt;in_filename.mp4&gt; &lt;start_time_s&gt; &lt;end_time_s&gt; &lt;out_filename.mp4&gt;\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">char</span> <span class="token operator">*</span>inFileName <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">char</span> <span class="token operator">*</span>outFileName <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> startTimeS <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> endTimeS <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 打开输入流并读取头</span></span>
<span class="line">  AVFormatContext <span class="token operator">*</span>inFmtCtx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// Open an input stream and read the header.</span></span>
<span class="line">  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">avformat_open_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inFmtCtx<span class="token punctuation">,</span> inFileName<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avformat_open_input failed.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 读取流的头信息</span></span>
<span class="line">  <span class="token comment">// Read packets of a media file to get stream information.</span></span>
<span class="line">  ret <span class="token operator">=</span> <span class="token function">avformat_find_stream_info</span><span class="token punctuation">(</span>inFmtCtx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avformat_find_stream_info failed.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Allocate an AVFormatContext for an output format</span></span>
<span class="line">  AVFormatContext <span class="token operator">*</span>outFmtCtx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">  ret <span class="token operator">=</span> <span class="token function">avformat_alloc_output_context2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>outFmtCtx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> outFileName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avformat_alloc_output_context2 failed.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 创建流到输出文件</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> inFmtCtx<span class="token operator">-&gt;</span>nb_streams<span class="token punctuation">;</span> idx<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    AVStream <span class="token operator">*</span>inStream <span class="token operator">=</span> inFmtCtx<span class="token operator">-&gt;</span>streams<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    AVStream <span class="token operator">*</span>outStream <span class="token operator">=</span> <span class="token function">avformat_new_stream</span><span class="token punctuation">(</span>outFmtCtx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  Add a new stream to a media file.</span></span>
<span class="line">    <span class="token comment">// Copy the contents of src to dst.</span></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">avcodec_parameters_copy</span><span class="token punctuation">(</span>outStream<span class="token operator">-&gt;</span>codecpar<span class="token punctuation">,</span> inStream<span class="token operator">-&gt;</span>codecpar<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_parameters_copy failed.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    outStream<span class="token operator">-&gt;</span>codecpar<span class="token operator">-&gt;</span>codec_tag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 检测标志位</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>outFmtCtx<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> AVFMT_NOFILE<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;AVFMT_NOFILE flag is set in iformat/oformat.flags. In this a case, the (de)muxer will handle I/O in some other way and this field(outFmtCtx-&gt;pb) will be NULL.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 打开输入（创建输入输出环境AVIOContext）</span></span>
<span class="line">  ret <span class="token operator">=</span> <span class="token function">avio_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>outFmtCtx<span class="token operator">-&gt;</span>pb<span class="token punctuation">,</span> outFileName<span class="token punctuation">,</span> AVIO_FLAG_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avio_open failed.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 写入文件头</span></span>
<span class="line">  ret <span class="token operator">=</span> <span class="token function">avformat_write_header</span><span class="token punctuation">(</span>outFmtCtx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avformat_write_header failed.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 定位到关键帧</span></span>
<span class="line">  <span class="token comment">// Seek to the keyframe at timestamp</span></span>
<span class="line">  ret <span class="token operator">=</span> <span class="token function">av_seek_frame</span><span class="token punctuation">(</span></span>
<span class="line">      inFmtCtx<span class="token punctuation">,</span>                  <span class="token comment">// media file handle</span></span>
<span class="line">      <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>                        <span class="token comment">//  流的id,-1为默认流</span></span>
<span class="line">      startTimeS <span class="token operator">*</span> AV_TIME_BASE<span class="token punctuation">,</span> <span class="token comment">// 时间戳，如果指定了具体流，则填基于流时间基的时间戳；如果未指定具体流（-1），则填基于AV_TIME_BASE时间基的时间戳</span></span>
<span class="line">      AVSEEK_FLAG_ANY            <span class="token comment">// seek to any frame, even non-keyframes</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;av_seek_frame failed.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 记录流的开始时间戳</span></span>
<span class="line">  <span class="token keyword">int</span> firstPTS<span class="token punctuation">[</span>inFmtCtx<span class="token operator">-&gt;</span>nb_streams<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> firstDTS<span class="token punctuation">[</span>inFmtCtx<span class="token operator">-&gt;</span>nb_streams<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">memset</span><span class="token punctuation">(</span>firstPTS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>firstPTS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">memset</span><span class="token punctuation">(</span>firstDTS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>firstDTS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  AVPacket <span class="token operator">*</span>packet <span class="token operator">=</span> <span class="token function">av_packet_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">av_read_frame</span><span class="token punctuation">(</span>inFmtCtx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    AVStream <span class="token operator">*</span>inStream <span class="token operator">=</span> inFmtCtx<span class="token operator">-&gt;</span>streams<span class="token punctuation">[</span>packet<span class="token operator">-&gt;</span>stream_index<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    AVStream <span class="token operator">*</span>outStream <span class="token operator">=</span> outFmtCtx<span class="token operator">-&gt;</span>streams<span class="token punctuation">[</span>packet<span class="token operator">-&gt;</span>stream_index<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// pts渲染时间戳 x 流的时间基 = 播放时间</span></span>
<span class="line">    <span class="token keyword">int</span> curTimeS <span class="token operator">=</span> packet<span class="token operator">-&gt;</span>pts <span class="token operator">*</span> <span class="token function">av_q2d</span><span class="token punctuation">(</span>inStream<span class="token operator">-&gt;</span>time_base<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>curTimeS <span class="token operator">&gt;</span> endTimeS<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 记录流的开始时间戳</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstPTS<span class="token punctuation">[</span>packet<span class="token operator">-&gt;</span>stream_index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">      firstPTS<span class="token punctuation">[</span>packet<span class="token operator">-&gt;</span>stream_index<span class="token punctuation">]</span> <span class="token operator">=</span> packet<span class="token operator">-&gt;</span>pts<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstDTS<span class="token punctuation">[</span>packet<span class="token operator">-&gt;</span>stream_index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">      firstDTS<span class="token punctuation">[</span>packet<span class="token operator">-&gt;</span>stream_index<span class="token punctuation">]</span> <span class="token operator">=</span> packet<span class="token operator">-&gt;</span>dts<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 重新计算渲染时间戳</span></span>
<span class="line">    packet<span class="token operator">-&gt;</span>pts <span class="token operator">=</span> <span class="token function">av_rescale_q</span><span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>pts <span class="token operator">-</span> firstPTS<span class="token punctuation">[</span>packet<span class="token operator">-&gt;</span>stream_index<span class="token punctuation">]</span><span class="token punctuation">,</span> inStream<span class="token operator">-&gt;</span>time_base<span class="token punctuation">,</span> outStream<span class="token operator">-&gt;</span>time_base<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>pts <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">      packet<span class="token operator">-&gt;</span>pts <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 重新计算解码时间戳</span></span>
<span class="line">    packet<span class="token operator">-&gt;</span>dts <span class="token operator">=</span> <span class="token function">av_rescale_q</span><span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>dts <span class="token operator">-</span> firstDTS<span class="token punctuation">[</span>packet<span class="token operator">-&gt;</span>stream_index<span class="token punctuation">]</span><span class="token punctuation">,</span> inStream<span class="token operator">-&gt;</span>time_base<span class="token punctuation">,</span> outStream<span class="token operator">-&gt;</span>time_base<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>dts <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">      packet<span class="token operator">-&gt;</span>dts <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 重新计算时长</span></span>
<span class="line">    packet<span class="token operator">-&gt;</span>duration <span class="token operator">=</span> <span class="token function">av_rescale_q</span><span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>duration<span class="token punctuation">,</span> inStream<span class="token operator">-&gt;</span>time_base<span class="token punctuation">,</span> outStream<span class="token operator">-&gt;</span>time_base<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 位置位置</span></span>
<span class="line">    packet<span class="token operator">-&gt;</span>pos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 由于I P B 三个帧的存在，pts和dts的值可能不一样，这里根据时间范围暴力截取packet时，可能导致pts&lt;dts的情况发生，那么后续的校验会不通过</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>pts <span class="token operator">&lt;</span> packet<span class="token operator">-&gt;</span>dts<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 写入封装</span></span>
<span class="line">    <span class="token comment">// av_interleaved_write_frame 相比于 write_packet 前者会对pts、dts、stream_index做校验，且前者依赖于后者</span></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">av_interleaved_write_frame</span><span class="token punctuation">(</span>outFmtCtx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;av_interleaved_write_frame failed.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 释放packet中buffer内存</span></span>
<span class="line">    <span class="token function">av_packet_unref</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 释放packet内存</span></span>
<span class="line">  <span class="token function">av_packet_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 写文件尾</span></span>
<span class="line">  <span class="token comment">// Write the stream trailer to an output media file and free the file private data</span></span>
<span class="line">  <span class="token function">av_write_trailer</span><span class="token punctuation">(</span>outFmtCtx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 释放内存</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>inFmtCtx<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">avformat_close_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inFmtCtx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>outFmtCtx<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">avio_close</span><span class="token punctuation">(</span>outFmtCtx<span class="token operator">-&gt;</span>pb<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">avformat_close_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>outFmtCtx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rgb、yuv" tabindex="-1"><a class="header-anchor" href="#rgb、yuv"><span>RGB、YUV</span></a></h2><p>三原色: 红绿蓝三种色光无法被分解，故称为三原色光，等量的三原色光相加会变为白光，即白光中含有等量的红光 (R) 、绿光 (G) 、蓝光 (B)。</p><p>显示器: 使用RGB三种颜色的发光体作为基本发光单元，通过控制它们发光强度从而得到不同色彩。</p><p>分辨率含义: 手机屏幕分辩是1280x720，说明水平方向有720个像素点，垂直方向有1280个像素点，所以整个手机屏幕就有1280X720个像素点。</p><p>如图，每个像素点都由三个子像素点组成，计算机使用数字的方式表达R G B的发光强度数值，这就是RGB格式。<br><img src="`+A+'" alt="Alt text"></p><h3 id="rgb" tabindex="-1"><a class="header-anchor" href="#rgb"><span>RGB</span></a></h3><p>调色板: 通过编号映射到颜色的一张二维表，如01索引，表示红色。</p><p><strong>索引格式:</strong></p><ul><li>RGB1:每个像素用1bit表示，可表示颜色范围为双色，即黑和白，需要用到调色板</li><li>RGB4:每个像素用4bit表示，索引范围为0-16，共16个，表示16种颜色，需要用到调色板。</li><li>RGB8:每个像素用8bit表示，索引范围为0-255，共256个，表示256种颜色，需要用到调色板。</li></ul><p>总结:图像质量不高，但占存储空间少，格式较老，无法满足高标准的视觉体验需求。</p><p><strong>像素格式：</strong></p><ul><li>存储的是每一个像素点的RGB值</li><li>RGB565 <ul><li>每个像素用16bit表示，2字节，RGB分别用5 6 5个bit表示。</li><li><img src="'+C+'" alt="Alt text"></li></ul></li><li>RGB555: <ul><li>每个像素用16bit表示，2字节，RGB 分别用5 5 5个bit表示，最高位不用。</li><li><img src="'+F+'" alt="Alt text"></li></ul></li><li>RGB24: <ul><li>每个像素用24bit表示，3字节，RGB分别用8 8 8个bit表示。</li><li><strong>注意RGB24格式按BGR的方式存储</strong></li><li><img src="'+R+'" alt="Alt text"></li></ul></li><li>RGB32： <ul><li>每个像素用32bit表示，4个字节，R，G，B分量分别用8 8 8个bit表示，存储顺序为B，G，R，最后8个字节保留。</li></ul></li><li>ARGB32 <ul><li>每个像素用32bit表示，4个字节，R，G，B分量分别用8 8 8个bit表示，存储顺序为B，G，R，最后8个字节是A(alpha)通道，表示透明度。</li><li><img src="'+U+'" alt="Alt text"></li></ul></li></ul><p><strong>ffmpeg命令将图片转rgb数据:</strong></p><blockquote><p>ffmpeg -i 200x200.png -s 200x200 -pix_fmt rgb24 rgb24.rgb</p></blockquote><p><strong>ffplay播放:</strong></p><blockquote><p>ffplay -s 200*200 -pix_fmt rgb24 rgb24.rgb</p></blockquote><p><strong>大小计算:</strong><br> 以RGB24为例: 200<em>200</em>3=120000 byte</p><h3 id="yuv" tabindex="-1"><a class="header-anchor" href="#yuv"><span>YUV</span></a></h3><p><strong>YUV概念</strong></p><ul><li>YUV（也称YCbCr）是电视系统所采用的一种颜色编码方法。</li><li>其中&quot;Y”表示明亮度(Luminance)，也称灰阶值，它是基础信号;</li><li>而U和V表示的则是色度(Chrominance),它们的作用是描述影像的色彩及饱和度，用于指定像素的颜色；</li><li>亮度和色度都是被正交调制的。</li><li><strong>亮度Y</strong>是通过RGB输入信号来建立的，方法是将 RGB信号的特定部分叠加到一起。</li><li><strong>色度UV</strong>则定义了颜色的色调与饱和度，分别用Cr和Cb来表示。 <ul><li>其中，Cr反映了RGB输入信号红色部分与RGB信号亮度值之间的差异，</li><li>而Cb反映的则是RGB输入信号蓝色部分与RGB信号亮度值之间的差异。</li></ul></li><li>与RGB类型，一幅图像的每个像素点由YUV三个分量构成。</li><li><strong>UV平面（Y=0.5）：</strong></li><li><img src="'+q+'" alt="Alt text"></li><li><strong>采样格式</strong><ul><li>4:4:4表示完全取样。</li><li>4:2:2表示2:1的水平取样，垂直完全采样。</li><li>4:2:0表示2:1的水平取样，垂直2:1采样。</li></ul></li><li><strong>存储格式</strong><ul><li>planner(平面)格式:先连续存储所有像素点的Y分量，紧接着存储所有像素点的U分量，最后是所有像素点的V分量。</li><li>packed(打包)格式:每个像素点的Y、U、V是连续交替存储的。</li><li>YUV420P中的Y、U、V分量都是平面格式</li><li><img src="'+V+'" alt="Alt text"></li><li>YUV420SP中的Y分量为平面格式，UV分量为打包格式，即U和V分量交错排列。</li><li><img src="'+E+'" alt="Alt text"></li></ul></li></ul><p>把亮度和色度分离，没有色度信息仍能显示完整的图像，只不过是黑白的，解决了彩色电视跟黑白电视的兼容问题。<br> 与RGB视频信号传输相比，它最大的优点在于只需要占用极少的频宽(RGB要求3个独立的颜色分量同时传输)。</p><p><strong>RGB到YCbCr的转换过程：</strong></p><ul><li>摄像机从图像传感器接收光线生成RGB图像。</li><li>RGB图像被编码成YCbCr信号，这是记录和传输到观看设备的信号。</li><li>显示设备（电脑、电视机或显示器）对YCbCr信号进行解码，并将其转换为RGB信号以进行显示。<br> 由于原始图像数据和显示的图像都使用RGB格式，通常我们不需要过多关注YCbCr信号。</li></ul><p><strong>编码RGB“4:2:2”和“4:2:0”：</strong></p><ul><li>色度的子采样和数据压缩对于人类来说，亮度的变化比颜色的差异更为显而易见。</li><li>色度（颜色）子采样是一种方法，通过将RGB文件转换为YCbCr信号，可以减少颜色信息，从而缩小数据文件。</li><li>4:2:2和4:2:0指的是色度子采样的不同方法。</li></ul><p><strong>其如何运作？</strong></p><ul><li>色彩采样在4×2个阵列中每8个像素发生一次。</li><li>4列像素的亮度（Y）通道被记录下来，因此第一个数字是4。</li><li>第二个数字表示从第一行像素记录的色差信号（CbCr）数量。</li><li>第三个数字表示从第二行像素记录的色差信号（CbCr）数量。</li></ul><p><strong>未压缩的YCbCr 4:4:4</strong></p><ul><li><img src="'+N+'" alt="Alt text"></li><li>当所有像素的CbCr信息都被记录下来时（无未采样的像素），色度子采样即可被标示为4:4:4（无子采样）。这可提供最高品质 - RAW文件等同4:4:4。然而，其也可能导致文件大小增加。</li><li>文件尺寸较小时，我们可能会损耗一些颜色信息，才能压缩文件。一种方法是利用子采样，即不记录某些像素的信息。</li></ul><p><strong>压缩的YUV</strong></p><ul><li><img src="'+O+'" alt="Alt text"></li><li><code>YCbCr 4:2:2</code> 子采样:在每个像素行中，只有两个像素的CbCr信号被记录下来。</li><li><code>YCbCr 4:2:0</code> 子采样:针对最上面一行，只记录两个像素的CbCr信号。第二行像素并未记录CbCr信号。</li><li><strong>解码</strong> 当信号被解码成RGB以便显示在显示器上时，没有CbCr记录的像素左边、左上方和/或上方的CbCr信息被复制到该像素。</li><li>由于人类对颜色差异的视觉感知能力相对较差，因此大多数人通常不会注意到未记录的像素信息所导致的图像质量下降问题。缩减所要记录的信息，有助于缩减数据量。</li></ul><p><strong>4:2:0和4:2:2之间有何区别？</strong></p><p>正如上方插图所示，4:2:2比4:2:0记录更多色彩信息。</p><p>目前，电视机、DVD/蓝光格式，以及其他大多数视听和图像显示装置都使用YCbCr 4:2:0信号。正常观看画面时，我们可能不会觉得4:2:0信号的图像质量较差。</p><p>然而，在影片的制作过程中，我们仍须确保影片尽可能达到高品质。当然，由于记录包含各个像素的YCbCr数据，因此4:4:4提供了最高的品质 - 这就是RAW数据的特点。但这样做的缺点却是文件体积增大，这在某些制作情况下是不可行的。</p><p>这正是子采样可以发挥作用之处。4:2:0的子采样提供了最轻巧的文件，但色彩信息减少却给后期编辑提供了较少的余地。同时，4:2:2缩减了文件大小，同时储存了更多的色彩信息。这不仅让编辑有更多的弹性，更能在调色后保持图像极高的品质。</p><p><strong>YUV4:4:4</strong></p><ul><li>YUV三个信道的抽样率相同，在生成的图像中，每个像素占用3字节，每一个Y分量都对应一组UV分量。</li><li>这种格式，色度信号的分辨率和亮度信号的分辨率是相同的。这种格式主要应用在视频处理设备内部，避免画面质量在处理过程中降低。</li><li>空心圆表示所采样颜色的UV分量，黑点表示所采样颜色的Y分量。</li><li><img src="'+B+'" alt="Alt text"></li><li>YUV444是色度信号分辨率最高的格式，444意思是每1点 Y 采样相对应的1个 U 采样和1个 V 采样。</li><li><img src="'+D+'" alt="Alt text"></li><li>公式(NTSC标准): <ul><li><img src="'+G+'" alt="Alt text"></li><li><img src="'+P+'" alt="Alt text"></li></ul></li></ul><p><strong>YUV4:2:2</strong></p><ul><li>每个UV信道的抽样率是Y的一半，在生成的图像中，每个由两个水平方向相邻的像素组成的宏像素占用4字节。每两个Y分量共用一组UV分量。</li><li><img src="'+I+'" alt="Alt text"></li></ul><p><strong>YUV4:2:0</strong></p><ul><li>每个色度分量，<strong>水平方向和竖直方向的抽样率都是2:1，色度的抽样率为4:1</strong>，即每隔一个像素采样一次。同时，水平方向上色度分量的抽样率为1/4，即每隔四个像素采样一次。每个由2x2个2行2列相邻的像素组成的宏像素需要占用6字节内存，每四个Y分量共用一组UV分量。</li><li><img src="'+S+'" alt="Alt text"></li><li>420表示每4点 Y 采样相对应的1个 U 采样和1个 V 采样，具体情况如下图所示：</li><li><img src="'+T+'" alt="Alt text"></li></ul><p><strong>大小计算</strong></p><ul><li>RGB24:一张4x4像素的RGB图像大小为4x4x3=48字节。</li><li>YUV444:一张4x4像素的YUV444图像大小为4x4x3=48字节，跟RGB一样大。Y、UV三个分量的大小都是4x4=16字节。</li><li>YUV422:一张4x4像素的YUV422图像大小为4x4x2=32字节，Y分量为全采样，即4x4=16字节，U分量和V分量只有Y分量的一半，即U分量为4x4/2=8字节，V分量也是4x4/2=8字节。</li><li>YUV420:一张4x4像素的YUV420图像大小为4x4x(3/2)=24字节，Y分量为全采样即4x4=16字节，U分量和V分量只有Y分量的四分之一，即U分量和V分量的大小均为4x4/4=4字节。</li></ul><p><strong>ffmpeg命令将图片转yuv数据:</strong></p><p>ffmpeg -i 200x200.png -s 200x200 -pix_fmt yuv420p yuv420p.yuv</p><p><strong>YUV Player 播放器播放:</strong></p><p>大小计算:</p><p>以YUV420P为例:200<em>200</em>3/2=60000byte</p><h2 id="视频解码" tabindex="-1"><a class="header-anchor" href="#视频解码"><span>视频解码</span></a></h2><p><img src="'+M+`" alt="Alt text"></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavformat\\avformat.h&gt;</span> <span class="token comment">// 解封装</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil\\avutil.h&gt;</span>     <span class="token comment">// 日志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavcodec\\avcodec.h&gt;</span>   <span class="token comment">// 编解码</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">AVFormatContext <span class="token operator">*</span>inputFmtCtx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">FILE <span class="token operator">*</span>destFile <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">AVCodecContext <span class="token operator">*</span>decoderCtx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputFmtCtx<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">avformat_close_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inputFmtCtx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>destFile<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">fclose</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>decoderCtx<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">avcodec_free_context</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>decoderCtx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> avc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 设置日志级别</span></span>
<span class="line">    <span class="token function">av_log_set_level</span><span class="token punctuation">(</span>AV_LOG_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 打印用法</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>avc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;usage:%s &lt;inFileName.mp4&gt; &lt;outFileName.yuv&gt;&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>inFileName <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>outFileName <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 打开输入</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">avformat_open_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inputFmtCtx<span class="token punctuation">,</span> inFileName<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avformat_open_input failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 创建输出文件</span></span>
<span class="line">    destFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>outFileName<span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>destFile <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;fopene failed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 探测流信息</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">avformat_find_stream_info</span><span class="token punctuation">(</span>inputFmtCtx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avformat_find_stream_info failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 得到视频流</span></span>
<span class="line">    <span class="token keyword">int</span> videoIdx <span class="token operator">=</span> <span class="token function">av_find_best_stream</span><span class="token punctuation">(</span>inputFmtCtx<span class="token punctuation">,</span> AVMEDIA_TYPE_VIDEO<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>videoIdx <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;av_find_best_stream failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 得到编解码上下文</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>decoderCtx <span class="token operator">=</span> <span class="token function">avcodec_alloc_context3</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_alloc_context3 failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将视频流编解码器信息拷贝到编解码上下文</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">avcodec_parameters_to_context</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> inputFmtCtx<span class="token operator">-&gt;</span>streams<span class="token punctuation">[</span>videoIdx<span class="token punctuation">]</span><span class="token operator">-&gt;</span>codecpar<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_parameters_to_context failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 根据编解码器id获取解码器</span></span>
<span class="line">    <span class="token keyword">const</span> AVCodec <span class="token operator">*</span>videoDecoder <span class="token operator">=</span> <span class="token function">avcodec_find_decoder</span><span class="token punctuation">(</span>decoderCtx<span class="token operator">-&gt;</span>codec_id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>videoDecoder <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_find_decoder failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 使用 编解码器 初始化 编解码器的上下文</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">avcodec_open2</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> videoDecoder<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_open2 failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 读取流</span></span>
<span class="line">    AVPacket <span class="token operator">*</span>packet <span class="token operator">=</span> <span class="token function">av_packet_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    AVFrame <span class="token operator">*</span>frame <span class="token operator">=</span> <span class="token function">av_frame_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> <span class="token function">render_process</span><span class="token punctuation">(</span>AVCodecContext <span class="token operator">*</span> decoderCtx<span class="token punctuation">,</span> AVPacket <span class="token operator">*</span> packet<span class="token punctuation">,</span> AVFrame <span class="token operator">*</span> frame<span class="token punctuation">,</span> FILE <span class="token operator">*</span> destFile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">av_read_frame</span><span class="token punctuation">(</span>inputFmtCtx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 如果是视频流</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>stream_index <span class="token operator">==</span> videoIdx<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 把packet发送给解码器得到YUV帧</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">render_process</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> packet<span class="token punctuation">,</span> frame<span class="token punctuation">,</span> destFile<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;render_process failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">av_packet_unref</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 再次把packet发送给解码器得到YUV帧</span></span>
<span class="line">    <span class="token comment">// （这里是为了防止pts和dts的原因导致解码器中还有YUV帧没有取出，所以发送packet=NULL,然后再读Frame）</span></span>
<span class="line">    <span class="token comment">// 如果不这么做，可能导致最后少几帧</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">render_process</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> frame<span class="token punctuation">,</span> destFile<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;render_process failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">av_packet_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">av_frame_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">render_process</span><span class="token punctuation">(</span>AVCodecContext <span class="token operator">*</span>decoderCtx<span class="token punctuation">,</span> AVPacket <span class="token operator">*</span>packet<span class="token punctuation">,</span> AVFrame <span class="token operator">*</span>frame<span class="token punctuation">,</span> FILE <span class="token operator">*</span>destFile<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/**</span>
<span class="line">     * avcodec_send_packet:</span>
<span class="line">     *</span>
<span class="line">     * packet can be NULL (or an AVPacket with data set to NULL and</span>
<span class="line">     * size set to 0); in this case, it is considered a flush</span>
<span class="line">     * packet, which signals the end of the stream.</span>
<span class="line">     */</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将数据发送给解码器</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">avcodec_send_packet</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_send_packet failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 接收解码器解码后的数据frame</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">avcodec_receive_frame</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> frame<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// YUV420</span></span>
<span class="line">        <span class="token comment">// Y</span></span>
<span class="line">        <span class="token comment">// 【Y Y Y Y】</span></span>
<span class="line">        <span class="token comment">// 【Y Y Y Y】</span></span>
<span class="line">        <span class="token comment">// U</span></span>
<span class="line">        <span class="token comment">// 【U 0 U 0】</span></span>
<span class="line">        <span class="token comment">// 【0 0 0 0】</span></span>
<span class="line">        <span class="token comment">// V</span></span>
<span class="line">        <span class="token comment">// 【V 0 V 0】</span></span>
<span class="line">        <span class="token comment">// 【0 0 0 0】</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 写法1：</span></span>
<span class="line">        <span class="token comment">// data[0]表示Y数据，通过 decoderCtx-&gt;width * decoderCtx-&gt;height 计算数据的长度</span></span>
<span class="line">        <span class="token comment">// 这里的问题在于解码器和CPU可能会优化，导致frame-&gt;data[0]数据的宽度和decoderCtx-&gt;width不一致，有多余的无用数据，使得无法正常播放</span></span>
<span class="line">        <span class="token comment">// fwrite(frame-&gt;data[0], 1, decoderCtx-&gt;width * decoderCtx-&gt;height, destFile);</span></span>
<span class="line">        <span class="token comment">// fwrite(frame-&gt;data[1], 1, decoderCtx-&gt;width * decoderCtx-&gt;height / 4, destFile);</span></span>
<span class="line">        <span class="token comment">// fwrite(frame-&gt;data[2], 1, decoderCtx-&gt;width * decoderCtx-&gt;height / 4, destFile);</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 写法2:</span></span>
<span class="line">        <span class="token comment">// data[0]表示Y数据，通过 frame-&gt;linesize[0] * decoderCtx-&gt;height 计算数据的长度</span></span>
<span class="line">        <span class="token comment">// 这里的问题在于解码器和CPU可能会优化，frame-&gt;linesize[0]比实际宽度大、data中也有多余的无用数据，如果不能正确指定宽高，视频将无法正常播放</span></span>
<span class="line">        <span class="token function">fwrite</span><span class="token punctuation">(</span>frame<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> frame<span class="token operator">-&gt;</span>linesize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> decoderCtx<span class="token operator">-&gt;</span>height<span class="token punctuation">,</span> destFile<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Y</span></span>
<span class="line">        <span class="token function">fwrite</span><span class="token punctuation">(</span>frame<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> frame<span class="token operator">-&gt;</span>linesize<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> decoderCtx<span class="token operator">-&gt;</span>height<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> destFile<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// U</span></span>
<span class="line">        <span class="token function">fwrite</span><span class="token punctuation">(</span>frame<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> frame<span class="token operator">-&gt;</span>linesize<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> decoderCtx<span class="token operator">-&gt;</span>height<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> destFile<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// V</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 输出实际宽高</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;w:%d,h:%d.\\n&quot;</span><span class="token punctuation">,</span> frame<span class="token operator">-&gt;</span>width<span class="token punctuation">,</span> frame<span class="token operator">-&gt;</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 480x270</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;w:%d,h:%d.\\n&quot;</span><span class="token punctuation">,</span> frame<span class="token operator">-&gt;</span>linesize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> frame<span class="token operator">-&gt;</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 512x270</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 播放时要指定宽度为：512x270 而不是实际宽度480x270,否则不能正常播放</span></span>
<span class="line">        <span class="token comment">// $ ffplay -f rawvideo -video_size 512x270 -pixel_format yuv420p file.yuv</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">av_frame_unref</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>存在问题</strong></p><ul><li>解码器和CPU可能会优化</li><li>导致frame-&gt;data[0]数据的宽度和decoderCtx-&gt;width不一致，有多余的无用数据，使得无法正常播放</li><li>实际宽度480x270的视频被优化成了512x270</li><li><img src="`+Y+'" alt="Alt text"></li></ul><h2 id="修改分辨率" tabindex="-1"><a class="header-anchor" href="#修改分辨率"><span>修改分辨率</span></a></h2><p><img src="'+z+'" alt="Alt text"><br><img src="'+H+'" alt="Alt text"><br><img src="'+W+`" alt="Alt text"></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavformat\\avformat.h&gt;</span> <span class="token comment">// 解封装</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil\\avutil.h&gt;</span>     <span class="token comment">// 日志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil\\parseutils.h&gt;</span> <span class="token comment">// 解析字符串</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil\\imgutils.h&gt;</span>   <span class="token comment">// 计算视频大小</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavcodec\\avcodec.h&gt;</span>   <span class="token comment">// 编解码</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libswscale\\swscale.h&gt;</span>   <span class="token comment">// 视频缩放</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">AVFormatContext <span class="token operator">*</span>inputFmtCtx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">FILE <span class="token operator">*</span>destFile <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">AVCodecContext <span class="token operator">*</span>decoderCtx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputFmtCtx<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">avformat_close_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inputFmtCtx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>destFile<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">fclose</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>decoderCtx<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">avcodec_free_context</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>decoderCtx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> avc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 设置日志级别</span></span>
<span class="line">    <span class="token function">av_log_set_level</span><span class="token punctuation">(</span>AV_LOG_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 打印用法</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>avc <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;usage:%s &lt;inFileName.mp4&gt; &lt;outFileName.yuv&gt; &lt;widthxheight&gt;&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>inFileName <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>outFileName <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>resolution <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> destWidth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> destHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 解析宽高</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">av_parse_video_size</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>destWidth<span class="token punctuation">,</span> <span class="token operator">&amp;</span>destHeight<span class="token punctuation">,</span> resolution<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;av_parse_video_size failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 打开输入</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">avformat_open_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inputFmtCtx<span class="token punctuation">,</span> inFileName<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avformat_open_input failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 创建输出文件</span></span>
<span class="line">    destFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>outFileName<span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>destFile <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;fopene failed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 探测流信息</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">avformat_find_stream_info</span><span class="token punctuation">(</span>inputFmtCtx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avformat_find_stream_info failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 得到视频流</span></span>
<span class="line">    <span class="token keyword">int</span> videoIdx <span class="token operator">=</span> <span class="token function">av_find_best_stream</span><span class="token punctuation">(</span>inputFmtCtx<span class="token punctuation">,</span> AVMEDIA_TYPE_VIDEO<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>videoIdx <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;av_find_best_stream failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 得到编解码上下文</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>decoderCtx <span class="token operator">=</span> <span class="token function">avcodec_alloc_context3</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_alloc_context3 failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将视频流编解码器信息拷贝到编解码上下文</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">avcodec_parameters_to_context</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> inputFmtCtx<span class="token operator">-&gt;</span>streams<span class="token punctuation">[</span>videoIdx<span class="token punctuation">]</span><span class="token operator">-&gt;</span>codecpar<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_parameters_to_context failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 根据编解码器id获取解码器</span></span>
<span class="line">    <span class="token keyword">const</span> AVCodec <span class="token operator">*</span>videoDecoder <span class="token operator">=</span> <span class="token function">avcodec_find_decoder</span><span class="token punctuation">(</span>decoderCtx<span class="token operator">-&gt;</span>codec_id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>videoDecoder <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_find_decoder failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 使用 编解码器 初始化 编解码器的上下文</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">avcodec_open2</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> videoDecoder<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_open2 failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取源颜色空间</span></span>
<span class="line">    <span class="token keyword">enum</span> <span class="token class-name">AVPixelFormat</span> srcPixFmt <span class="token operator">=</span> decoderCtx<span class="token operator">-&gt;</span>pix_fmt<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">enum</span> <span class="token class-name">AVPixelFormat</span> destPixFmt <span class="token operator">=</span> srcPixFmt<span class="token punctuation">;</span> <span class="token comment">// AV_PIX_FMT_YUV420P</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取swscale上下文</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">SwsContext</span> <span class="token operator">*</span>swsCtx <span class="token operator">=</span> <span class="token function">sws_getContext</span><span class="token punctuation">(</span></span>
<span class="line">        decoderCtx<span class="token operator">-&gt;</span>width<span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>height<span class="token punctuation">,</span> srcPixFmt<span class="token punctuation">,</span> <span class="token comment">// 源分辨率 源图像空间</span></span>
<span class="line">        destWidth<span class="token punctuation">,</span> destHeight<span class="token punctuation">,</span> destPixFmt<span class="token punctuation">,</span>                <span class="token comment">// 目标分辨率 目标图像空间</span></span>
<span class="line">        SWS_FAST_BILINEAR<span class="token punctuation">,</span>                                <span class="token comment">// 缩放算法</span></span>
<span class="line">        <span class="token constant">NULL</span><span class="token punctuation">,</span>                                             <span class="token comment">// 源图像过滤器（前后图像滤波处理）</span></span>
<span class="line">        <span class="token constant">NULL</span><span class="token punctuation">,</span>                                             <span class="token comment">// 目标图像滤波器</span></span>
<span class="line">        <span class="token constant">NULL</span>                                              <span class="token comment">// 参数</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>swsCtx <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;sws_getContext failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 创建destFrame</span></span>
<span class="line">    AVFrame <span class="token operator">*</span>destFrame <span class="token operator">=</span> <span class="token function">av_frame_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 为destFrame的data分配内存</span></span>
<span class="line">    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>destBuffer <span class="token operator">=</span> <span class="token function">av_malloc</span><span class="token punctuation">(</span><span class="token function">av_image_get_buffer_size</span><span class="token punctuation">(</span>destPixFmt<span class="token punctuation">,</span> destWidth<span class="token punctuation">,</span> destHeight<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 把所分配内存的地址，通过计算，分别设置到Y:data[0] U:data[1] V:data[2] 中</span></span>
<span class="line">    <span class="token function">av_image_fill_arrays</span><span class="token punctuation">(</span>destFrame<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> destFrame<span class="token operator">-&gt;</span>linesize<span class="token punctuation">,</span> destBuffer<span class="token punctuation">,</span> destPixFmt<span class="token punctuation">,</span> destWidth<span class="token punctuation">,</span> destHeight<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 读取流</span></span>
<span class="line">    AVPacket <span class="token operator">*</span>packet <span class="token operator">=</span> <span class="token function">av_packet_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    AVFrame <span class="token operator">*</span>srcFrame <span class="token operator">=</span> <span class="token function">av_frame_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> <span class="token function">render_process</span><span class="token punctuation">(</span>AVCodecContext <span class="token operator">*</span> decoderCtx<span class="token punctuation">,</span> AVPacket <span class="token operator">*</span> packet<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">SwsContext</span> <span class="token operator">*</span> swsCtx<span class="token punctuation">,</span> AVFrame <span class="token operator">*</span> srcFrame<span class="token punctuation">,</span> AVFrame <span class="token operator">*</span> destFrame<span class="token punctuation">,</span> <span class="token keyword">int</span> destWidht<span class="token punctuation">,</span> <span class="token keyword">int</span> destHeight<span class="token punctuation">,</span> FILE <span class="token operator">*</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">av_read_frame</span><span class="token punctuation">(</span>inputFmtCtx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 如果是视频流</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>stream_index <span class="token operator">==</span> videoIdx<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 把packet发送给解码器得到YUV帧</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">render_process</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> packet<span class="token punctuation">,</span> swsCtx<span class="token punctuation">,</span> srcFrame<span class="token punctuation">,</span> destFrame<span class="token punctuation">,</span> destWidth<span class="token punctuation">,</span> destHeight<span class="token punctuation">,</span> destFile<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;render_process failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">av_packet_unref</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 再次把packet发送给解码器得到YUV帧</span></span>
<span class="line">    <span class="token comment">// （这里是为了防止pts和dts的原因导致解码器中还有YUV帧没有取出，所以发送packet=NULL,然后再读Frame）</span></span>
<span class="line">    <span class="token comment">// 如果不这么做，可能导致最后少几帧</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">render_process</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> swsCtx<span class="token punctuation">,</span> srcFrame<span class="token punctuation">,</span> destFrame<span class="token punctuation">,</span> destWidth<span class="token punctuation">,</span> destHeight<span class="token punctuation">,</span> destFile<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;render_process failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">av_packet_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">av_frame_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>srcFrame<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">render_process</span><span class="token punctuation">(</span>AVCodecContext <span class="token operator">*</span>decoderCtx<span class="token punctuation">,</span> AVPacket <span class="token operator">*</span>packet<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">SwsContext</span> <span class="token operator">*</span>swsCtx<span class="token punctuation">,</span> AVFrame <span class="token operator">*</span>srcFrame<span class="token punctuation">,</span> AVFrame <span class="token operator">*</span>destFrame<span class="token punctuation">,</span> <span class="token keyword">int</span> destWidht<span class="token punctuation">,</span> <span class="token keyword">int</span> destHeight<span class="token punctuation">,</span> FILE <span class="token operator">*</span>destFile<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/**</span>
<span class="line">     * avcodec_send_packet:</span>
<span class="line">     *</span>
<span class="line">     * packet can be NULL (or an AVPacket with data set to NULL and</span>
<span class="line">     * size set to 0); in this case, it is considered a flush</span>
<span class="line">     * packet, which signals the end of the stream.</span>
<span class="line">     */</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将数据发送给解码器</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">avcodec_send_packet</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_send_packet failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 接收解码器解码后的数据frame</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">avcodec_receive_frame</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> srcFrame<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// YUV420</span></span>
<span class="line">        <span class="token comment">// Y</span></span>
<span class="line">        <span class="token comment">// 【Y Y Y Y】</span></span>
<span class="line">        <span class="token comment">// 【Y Y Y Y】</span></span>
<span class="line">        <span class="token comment">// U</span></span>
<span class="line">        <span class="token comment">// 【U 0 U 0】</span></span>
<span class="line">        <span class="token comment">// 【0 0 0 0】</span></span>
<span class="line">        <span class="token comment">// V</span></span>
<span class="line">        <span class="token comment">// 【V 0 V 0】</span></span>
<span class="line">        <span class="token comment">// 【0 0 0 0】</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 写法1：</span></span>
<span class="line">        <span class="token comment">// data[0]表示Y数据，通过 decoderCtx-&gt;width * decoderCtx-&gt;height 计算数据的长度</span></span>
<span class="line">        <span class="token comment">// 这里的问题在于解码器和CPU可能会优化，导致frame-&gt;data[0]数据的宽度和decoderCtx-&gt;width不一致，有多余的无用数据，使得无法正常播放</span></span>
<span class="line">        <span class="token comment">// fwrite(frame-&gt;data[0], 1, decoderCtx-&gt;width * decoderCtx-&gt;height, destFile);</span></span>
<span class="line">        <span class="token comment">// fwrite(frame-&gt;data[1], 1, decoderCtx-&gt;width * decoderCtx-&gt;height / 4, destFile);</span></span>
<span class="line">        <span class="token comment">// fwrite(frame-&gt;data[2], 1, decoderCtx-&gt;width * decoderCtx-&gt;height / 4, destFile);</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 写法2:</span></span>
<span class="line">        <span class="token comment">// data[0]表示Y数据，通过 frame-&gt;linesize[0] * decoderCtx-&gt;height 计算数据的长度</span></span>
<span class="line">        <span class="token comment">// 这里的问题在于解码器和CPU可能会优化，frame-&gt;linesize[0]比实际宽度大、data中也有多余的无用数据，如果不能正确指定宽高，视频将无法正常播放</span></span>
<span class="line">        <span class="token comment">// fwrite(srcFrame-&gt;data[0], 1, srcFrame-&gt;linesize[0] * decoderCtx-&gt;height, destFile); // Y</span></span>
<span class="line">        <span class="token comment">// fwrite(srcFrame-&gt;data[1], 1, srcFrame-&gt;linesize[1] * decoderCtx-&gt;height, destFile); // U</span></span>
<span class="line">        <span class="token comment">// fwrite(srcFrame-&gt;data[2], 1, srcFrame-&gt;linesize[2] * decoderCtx-&gt;height, destFile); // V</span></span>
<span class="line">        <span class="token comment">// // 输出实际宽高</span></span>
<span class="line">        <span class="token comment">// av_log(NULL, AV_LOG_INFO, &quot;w:%d,h:%d.\\n&quot;, srcFrame-&gt;width, srcFrame-&gt;height);       // 480x270</span></span>
<span class="line">        <span class="token comment">// av_log(NULL, AV_LOG_INFO, &quot;w:%d,h:%d.\\n&quot;, srcFrame-&gt;linesize[0], srcFrame-&gt;height); // 512x270</span></span>
<span class="line">        <span class="token comment">// av_log(NULL, AV_LOG_INFO, &quot;w:%d,h:%d.\\n&quot;, srcFrame-&gt;linesize[1], srcFrame-&gt;height); // 512x270</span></span>
<span class="line">        <span class="token comment">// av_log(NULL, AV_LOG_INFO, &quot;w:%d,h:%d.\\n&quot;, srcFrame-&gt;linesize[2], srcFrame-&gt;height); // 512x270</span></span>
<span class="line">        <span class="token comment">// 播放时要指定宽度为：512x270 而不是实际宽度480x270,否则不能正常播放</span></span>
<span class="line">        <span class="token comment">// $ ffplay -f rawvideo -video_size 512x270 -pixel_format yuv420p file.yuv</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 写法3：</span></span>
<span class="line">        <span class="token comment">// 利用swscale裁剪</span></span>
<span class="line">        <span class="token comment">// 此时destFrame中没有多余的数据，但是destFrame-&gt;height为0,destFrame-&gt;width有正确值</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span></span>
<span class="line">            <span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">sws_scale</span><span class="token punctuation">(</span>swsCtx<span class="token punctuation">,</span>                                                                            <span class="token comment">// swscale上下文</span></span>
<span class="line">                             <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token operator">*</span><span class="token punctuation">)</span>srcFrame<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> srcFrame<span class="token operator">-&gt;</span>linesize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>height<span class="token punctuation">,</span> <span class="token comment">// 源Frame数据 源Frame宽度 起始位置 原始图片高度</span></span>
<span class="line">                             destFrame<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> destFrame<span class="token operator">-&gt;</span>linesize                                               <span class="token comment">// 目标Frame数据 目标Frame宽度</span></span>
<span class="line">                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;sws_scale failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">fwrite</span><span class="token punctuation">(</span>destFrame<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> destWidht <span class="token operator">*</span> destHeight<span class="token punctuation">,</span> destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Y</span></span>
<span class="line">        <span class="token function">fwrite</span><span class="token punctuation">(</span>destFrame<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> destWidht <span class="token operator">*</span> destHeight <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> destFile<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// U</span></span>
<span class="line">        <span class="token function">fwrite</span><span class="token punctuation">(</span>destFrame<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> destWidht <span class="token operator">*</span> destHeight <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> destFile<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// V</span></span>
<span class="line">        <span class="token function">av_frame_unref</span><span class="token punctuation">(</span>srcFrame<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修改格式为rgb24" tabindex="-1"><a class="header-anchor" href="#修改格式为rgb24"><span>修改格式为RGB24</span></a></h2><p>只需要在之前代码的基础上修改，只需要修改传递给swscale的参数即可</p><p><strong>修改目标格式</strong></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// enum AVPixelFormat destPixFmt = AV_PIX_FMT_YUV420P; // AV_PIX_FMT_YUV420P</span></span>
<span class="line"><span class="token keyword">enum</span> <span class="token class-name">AVPixelFormat</span> destPixFmt <span class="token operator">=</span> AV_PIX_FMT_RGB24<span class="token punctuation">;</span> <span class="token comment">// AV_PIX_FMT_RGB24</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>修改输出方式</strong></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// YUV420 是planer数据 三个分量分开存放</span></span>
<span class="line"><span class="token comment">// fwrite(destFrame-&gt;data[0], 1, destWidht * destHeight, destFile);     // Y</span></span>
<span class="line"><span class="token comment">// fwrite(destFrame-&gt;data[1], 1, destWidht * destHeight / 4, destFile); // U</span></span>
<span class="line"><span class="token comment">// fwrite(destFrame-&gt;data[2], 1, destWidht * destHeight / 4, destFile); // V</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// RGB24是packed数据，三个分量打包存放</span></span>
<span class="line"><span class="token function">fwrite</span><span class="token punctuation">(</span>destFrame<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> destWidht <span class="token operator">*</span> destHeight <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> destFile<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// RGB23</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>播放</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 转换</span></span>
<span class="line">./output/main ./bigbuckbunny_h264_aac.mp4 resize.rgb24 720x576</span>
<span class="line"><span class="token comment"># 播放</span></span>
<span class="line">ffplay <span class="token parameter variable">-f</span> rawvideo <span class="token parameter variable">-video_size</span> 720x576 <span class="token parameter variable">-pixel_format</span> rgb24 resize.rgb24</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="保存raw格式图像" tabindex="-1"><a class="header-anchor" href="#保存raw格式图像"><span>保存raw格式图像</span></a></h2><p><strong>BMP</strong></p><ul><li>BMP文件格式，又称为Bitmap (位图)或是DIB(Device-lndependent Device，设备无关位图)，</li><li>是Windows系统中广泛使用的图像文件格式。</li><li>由于它可以不作任何变换地保存图像像素域的数据，因此成为我们取得RAW数据的重要来源。</li><li>**扫描方式:**从左到右、从下到上</li><li>文件组成: <ul><li>位图文件头(bmp file header): 提供文件的格式、大小等信息。</li><li>位图信息头(bitmap information): 提供图像数据的尺寸、位平面数、压缩方式、颜色索引等信息.</li><li>调色板(color palette): 可选，如使用索引来表示图像，调色板就是索引与其对应的颜色的映射表。</li><li>位图数据(bitmap data): 图像数据区。</li></ul></li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavformat\\avformat.h&gt;</span> <span class="token comment">// 解封装</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil\\avutil.h&gt;</span>     <span class="token comment">// 日志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil\\parseutils.h&gt;</span> <span class="token comment">// 解析字符串</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil\\imgutils.h&gt;</span>   <span class="token comment">// 计算视频大小</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavcodec\\avcodec.h&gt;</span>   <span class="token comment">// 编解码</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libswscale\\swscale.h&gt;</span>   <span class="token comment">// 视频缩放</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/**</span>
<span class="line"> * win32 类型</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token class-name">uint16_t</span> WORD<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token class-name">uint32_t</span> DWORD<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token class-name">int32_t</span> LONG<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 设置按1字节对齐，防止编译器对结构体做字节对齐</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 位图文件文件头</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    WORD bfType<span class="token punctuation">;</span>      <span class="token comment">// 文件类型 固定为0x4d42 表示BM(BitMap)</span></span>
<span class="line">    DWORD bfSize<span class="token punctuation">;</span>     <span class="token comment">// 整个文件大小</span></span>
<span class="line">    WORD bfReserved1<span class="token punctuation">;</span> <span class="token comment">// 保留字</span></span>
<span class="line">    WORD bfReserved2<span class="token punctuation">;</span> <span class="token comment">// 保留字</span></span>
<span class="line">    DWORD bfOffBits<span class="token punctuation">;</span>  <span class="token comment">// 实际位图数据的偏移字节数（相对于整个文件）</span></span>
<span class="line"><span class="token punctuation">}</span> BitMapFileHeader<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 位图文件信息头</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    DWORD biSize<span class="token punctuation">;</span>         <span class="token comment">// 表示当前结构体的长度，设置为40 不要用sizeof因为不准确，除非关闭字节对齐</span></span>
<span class="line">    LONG biWidth<span class="token punctuation">;</span>         <span class="token comment">// 图片宽度</span></span>
<span class="line">    LONG biHeight<span class="token punctuation">;</span>        <span class="token comment">// 图片高度，高度字段的正负值表示位图的上下方向。当高度为正时，图像是从上到下绘制的；当高度为负时，图像是从下到上绘制的。</span></span>
<span class="line">    WORD biPlanes<span class="token punctuation">;</span>        <span class="token comment">// 图片平面数 设置为1</span></span>
<span class="line">    WORD biBitCount<span class="token punctuation">;</span>      <span class="token comment">// 颜色位数 1(黑白)、8、16、24、32位图</span></span>
<span class="line">    DWORD biCompression<span class="token punctuation">;</span>  <span class="token comment">// 压缩属性，位图是不压缩的，所以设置0</span></span>
<span class="line">    DWORD biSizeImage<span class="token punctuation">;</span>    <span class="token comment">// 位图数据实际占用的字节数（不压缩就不用填）</span></span>
<span class="line">    LONG biXPelsPerMeter<span class="token punctuation">;</span> <span class="token comment">// X方向分辨率,可省略</span></span>
<span class="line">    LONG biYPelsPerMeter<span class="token punctuation">;</span> <span class="token comment">// Y方向分辨率,可省略</span></span>
<span class="line">    DWORD biClrUsed<span class="token punctuation">;</span>      <span class="token comment">// 使用了多少个颜色索引表，0表示使用默认值：2^(biBitCount颜色位数)</span></span>
<span class="line">    DWORD biClrImportant<span class="token punctuation">;</span> <span class="token comment">// 重要颜色数，0表示所有颜色都是重要的</span></span>
<span class="line"><span class="token punctuation">}</span> BitMapFileInfoHeader<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">endregion</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 写入bitmap文件</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">writeBitMap</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bmpFileName<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>rgb24Data<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    BitMapFileHeader fileHeader <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    BitMapFileInfoHeader infoHeader <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    fileHeader<span class="token punctuation">.</span>bfType <span class="token operator">=</span> <span class="token number">0x4d42</span><span class="token punctuation">;</span></span>
<span class="line">    fileHeader<span class="token punctuation">.</span>bfSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>BitMapFileHeader<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>BitMapFileInfoHeader<span class="token punctuation">)</span> <span class="token operator">+</span> width <span class="token operator">*</span> height <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">    fileHeader<span class="token punctuation">.</span>bfOffBits <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>BitMapFileHeader<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>BitMapFileInfoHeader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    infoHeader<span class="token punctuation">.</span>biSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>BitMapFileInfoHeader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    infoHeader<span class="token punctuation">.</span>biWidth <span class="token operator">=</span> width<span class="token punctuation">;</span></span>
<span class="line">    infoHeader<span class="token punctuation">.</span>biHeight <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> height<span class="token punctuation">;</span></span>
<span class="line">    infoHeader<span class="token punctuation">.</span>biPlanes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    infoHeader<span class="token punctuation">.</span>biBitCount <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    FILE <span class="token operator">*</span>file <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>bmpFileName<span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;fopen failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fileHeader<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>BitMapFileHeader<span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>infoHeader<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>BitMapFileInfoHeader<span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">fwrite</span><span class="token punctuation">(</span>rgb24Data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> width <span class="token operator">*</span> height <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">fclose</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">AVFormatContext <span class="token operator">*</span>inputFmtCtx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">AVCodecContext <span class="token operator">*</span>decoderCtx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputFmtCtx<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">avformat_close_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inputFmtCtx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>decoderCtx<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">avcodec_free_context</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>decoderCtx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> avc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 设置日志级别</span></span>
<span class="line">    <span class="token function">av_log_set_level</span><span class="token punctuation">(</span>AV_LOG_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 打印用法</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>avc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;usage:%s &lt;inFileName.mp4&gt;&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>inFileName <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 打开输入</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">avformat_open_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inputFmtCtx<span class="token punctuation">,</span> inFileName<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avformat_open_input failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 探测流信息</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">avformat_find_stream_info</span><span class="token punctuation">(</span>inputFmtCtx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avformat_find_stream_info failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 得到视频流</span></span>
<span class="line">    <span class="token keyword">int</span> videoIdx <span class="token operator">=</span> <span class="token function">av_find_best_stream</span><span class="token punctuation">(</span>inputFmtCtx<span class="token punctuation">,</span> AVMEDIA_TYPE_VIDEO<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>videoIdx <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;av_find_best_stream failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 得到编解码上下文</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>decoderCtx <span class="token operator">=</span> <span class="token function">avcodec_alloc_context3</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_alloc_context3 failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将视频流编解码器信息拷贝到编解码上下文</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">avcodec_parameters_to_context</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> inputFmtCtx<span class="token operator">-&gt;</span>streams<span class="token punctuation">[</span>videoIdx<span class="token punctuation">]</span><span class="token operator">-&gt;</span>codecpar<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_parameters_to_context failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 根据编解码器id获取解码器</span></span>
<span class="line">    <span class="token keyword">const</span> AVCodec <span class="token operator">*</span>videoDecoder <span class="token operator">=</span> <span class="token function">avcodec_find_decoder</span><span class="token punctuation">(</span>decoderCtx<span class="token operator">-&gt;</span>codec_id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>videoDecoder <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_find_decoder failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 使用 编解码器 初始化 编解码器的上下文</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">avcodec_open2</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> videoDecoder<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_open2 failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取源颜色空间</span></span>
<span class="line">    <span class="token keyword">enum</span> <span class="token class-name">AVPixelFormat</span> srcPixFmt <span class="token operator">=</span> decoderCtx<span class="token operator">-&gt;</span>pix_fmt<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 据说：BitMap期望的存储格式为RGB 但是ffmpeg中RGB的存储格式为BGR,所以这里得写BGR,得到的存储格式才能是RGB</span></span>
<span class="line">    <span class="token keyword">enum</span> <span class="token class-name">AVPixelFormat</span> destPixFmt <span class="token operator">=</span> AV_PIX_FMT_BGR24<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取swscale上下文</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">SwsContext</span> <span class="token operator">*</span>swsCtx <span class="token operator">=</span> <span class="token function">sws_getContext</span><span class="token punctuation">(</span></span>
<span class="line">        decoderCtx<span class="token operator">-&gt;</span>width<span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>height<span class="token punctuation">,</span> srcPixFmt<span class="token punctuation">,</span>  <span class="token comment">// 源分辨率 源图像空间</span></span>
<span class="line">        decoderCtx<span class="token operator">-&gt;</span>width<span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>height<span class="token punctuation">,</span> destPixFmt<span class="token punctuation">,</span> <span class="token comment">// 目标分辨率 目标图像空间</span></span>
<span class="line">        SWS_FAST_BILINEAR<span class="token punctuation">,</span>                                 <span class="token comment">// 缩放算法</span></span>
<span class="line">        <span class="token constant">NULL</span><span class="token punctuation">,</span>                                              <span class="token comment">// 源图像过滤器（前后图像滤波处理）</span></span>
<span class="line">        <span class="token constant">NULL</span><span class="token punctuation">,</span>                                              <span class="token comment">// 目标图像滤波器</span></span>
<span class="line">        <span class="token constant">NULL</span>                                               <span class="token comment">// 参数</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>swsCtx <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;sws_getContext failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 创建destFrame</span></span>
<span class="line">    AVFrame <span class="token operator">*</span>destFrame <span class="token operator">=</span> <span class="token function">av_frame_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 为destFrame的data分配内存</span></span>
<span class="line">    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>destBuffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">av_malloc</span><span class="token punctuation">(</span><span class="token function">av_image_get_buffer_size</span><span class="token punctuation">(</span>destPixFmt<span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>width<span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>height<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 把所分配内存的地址，通过计算，分别设置到Y:data[0] U:data[1] V:data[2] 中</span></span>
<span class="line">    <span class="token function">av_image_fill_arrays</span><span class="token punctuation">(</span>destFrame<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> destFrame<span class="token operator">-&gt;</span>linesize<span class="token punctuation">,</span> destBuffer<span class="token punctuation">,</span> destPixFmt<span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>width<span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>height<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 读取流</span></span>
<span class="line">    AVPacket <span class="token operator">*</span>packet <span class="token operator">=</span> <span class="token function">av_packet_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    AVFrame <span class="token operator">*</span>srcFrame <span class="token operator">=</span> <span class="token function">av_frame_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> <span class="token function">render_process</span><span class="token punctuation">(</span>AVCodecContext <span class="token operator">*</span> decoderCtx<span class="token punctuation">,</span> AVPacket <span class="token operator">*</span> packet<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">SwsContext</span> <span class="token operator">*</span> swsCtx<span class="token punctuation">,</span> AVFrame <span class="token operator">*</span> srcFrame<span class="token punctuation">,</span> AVFrame <span class="token operator">*</span> destFrame<span class="token punctuation">,</span> <span class="token keyword">int</span> destWidht<span class="token punctuation">,</span> <span class="token keyword">int</span> destHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">av_read_frame</span><span class="token punctuation">(</span>inputFmtCtx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 如果是视频流</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>stream_index <span class="token operator">==</span> videoIdx<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 把packet发送给解码器得到YUV帧</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">render_process</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> packet<span class="token punctuation">,</span> swsCtx<span class="token punctuation">,</span> srcFrame<span class="token punctuation">,</span> destFrame<span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>width<span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>height<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;render_process failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">av_packet_unref</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 再次把packet发送给解码器得到YUV帧</span></span>
<span class="line">    <span class="token comment">// （这里是为了防止pts和dts的原因导致解码器中还有YUV帧没有取出，所以发送packet=NULL,然后再读Frame）</span></span>
<span class="line">    <span class="token comment">// 如果不这么做，可能导致最后少几帧</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">render_process</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> swsCtx<span class="token punctuation">,</span> srcFrame<span class="token punctuation">,</span> destFrame<span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>width<span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>height<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;render_process failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">av_packet_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">av_frame_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>srcFrame<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">render_process</span><span class="token punctuation">(</span>AVCodecContext <span class="token operator">*</span>decoderCtx<span class="token punctuation">,</span> AVPacket <span class="token operator">*</span>packet<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">SwsContext</span> <span class="token operator">*</span>swsCtx<span class="token punctuation">,</span> AVFrame <span class="token operator">*</span>srcFrame<span class="token punctuation">,</span> AVFrame <span class="token operator">*</span>destFrame<span class="token punctuation">,</span> <span class="token keyword">int</span> destWidht<span class="token punctuation">,</span> <span class="token keyword">int</span> destHeight<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/**</span>
<span class="line">     * avcodec_send_packet:</span>
<span class="line">     *</span>
<span class="line">     * packet can be NULL (or an AVPacket with data set to NULL and</span>
<span class="line">     * size set to 0); in this case, it is considered a flush</span>
<span class="line">     * packet, which signals the end of the stream.</span>
<span class="line">     */</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将数据发送给解码器</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">avcodec_send_packet</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_send_packet failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">int</span> frameCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 接收解码器解码后的数据frame</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">avcodec_receive_frame</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> srcFrame<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 利用swscale裁剪</span></span>
<span class="line">        <span class="token comment">// 此时destFrame中没有多余的数据，但是destFrame-&gt;height为0,destFrame-&gt;width有正确值</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span></span>
<span class="line">            <span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">sws_scale</span><span class="token punctuation">(</span>swsCtx<span class="token punctuation">,</span>                                                                            <span class="token comment">// swscale上下文</span></span>
<span class="line">                             <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token operator">*</span><span class="token punctuation">)</span>srcFrame<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> srcFrame<span class="token operator">-&gt;</span>linesize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>height<span class="token punctuation">,</span> <span class="token comment">// 源Frame数据 源Frame宽度 起始位置 原始图片高度</span></span>
<span class="line">                             destFrame<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> destFrame<span class="token operator">-&gt;</span>linesize                                               <span class="token comment">// 目标Frame数据 目标Frame宽度</span></span>
<span class="line">                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;sws_scale failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// RGB24是packed数据，三个分量打包存放</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">char</span> fileName<span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">sprintf</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">&quot;./pic/%lld-%d.bmp&quot;</span><span class="token punctuation">,</span> packet<span class="token operator">-&gt;</span>pos<span class="token punctuation">,</span> frameCnt<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">writeBitMap</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> destFrame<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> destWidht<span class="token punctuation">,</span> destHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">av_frame_unref</span><span class="token punctuation">(</span>srcFrame<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="yuv-to-h264视频编码" tabindex="-1"><a class="header-anchor" href="#yuv-to-h264视频编码"><span>YUV_to_H264视频编码</span></a></h2><p><img src="`+$+'" alt="Alt text"></p><p><img src="'+j+`" alt="Alt text"></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavformat\\avformat.h&gt;</span> <span class="token comment">// 解封装</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil\\avutil.h&gt;</span>     <span class="token comment">// 日志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil\\parseutils.h&gt;</span> <span class="token comment">// 解析字符串</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil\\imgutils.h&gt;</span>   <span class="token comment">// 计算视频大小</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavcodec\\avcodec.h&gt;</span>   <span class="token comment">// 编解码</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libswscale\\swscale.h&gt;</span>   <span class="token comment">// 视频缩放</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> avc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 设置日志级别</span></span>
<span class="line">    <span class="token function">av_log_set_level</span><span class="token punctuation">(</span>AV_LOG_DEBUG<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 打印用法</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>avc <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;usage:%s &lt;inFileName.yuv&gt; &lt;outFileName.h264&gt; &lt;encoderName&gt; &lt;yuvW x yuvH&gt;&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取参数</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>yuvFileName <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>h264FileName <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>encoderName <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>yuvSize <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> yuvFmt <span class="token operator">=</span> AV_PIX_FMT_YUV420P<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> yuvW <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> yuvH <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">av_parse_video_size</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>yuvW<span class="token punctuation">,</span> <span class="token operator">&amp;</span>yuvH<span class="token punctuation">,</span> yuvSize<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 初始化编码器</span></span>
<span class="line">    <span class="token keyword">const</span> AVCodec <span class="token operator">*</span>encoder <span class="token operator">=</span> <span class="token function">avcodec_find_encoder_by_name</span><span class="token punctuation">(</span>encoderName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取编码器</span></span>
<span class="line">    AVCodecContext <span class="token operator">*</span>encoderCtx <span class="token operator">=</span> <span class="token function">avcodec_alloc_context3</span><span class="token punctuation">(</span>encoder<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 获取编码器上下文</span></span>
<span class="line">    encoderCtx<span class="token operator">-&gt;</span>codec_type <span class="token operator">=</span> AVMEDIA_TYPE_VIDEO<span class="token punctuation">;</span>                        <span class="token comment">// 编码视频</span></span>
<span class="line">    encoderCtx<span class="token operator">-&gt;</span>pix_fmt <span class="token operator">=</span> yuvFmt<span class="token punctuation">;</span>                                       <span class="token comment">// 编码视频格式</span></span>
<span class="line">    encoderCtx<span class="token operator">-&gt;</span>width <span class="token operator">=</span> yuvW<span class="token punctuation">;</span>                                           <span class="token comment">// 编码视频宽度</span></span>
<span class="line">    encoderCtx<span class="token operator">-&gt;</span>height <span class="token operator">=</span> yuvH<span class="token punctuation">;</span>                                          <span class="token comment">// 编码视频高度</span></span>
<span class="line">    encoderCtx<span class="token operator">-&gt;</span>time_base <span class="token operator">=</span> <span class="token punctuation">(</span>AVRational<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                        <span class="token comment">// 编码时间基</span></span>
<span class="line">    encoderCtx<span class="token operator">-&gt;</span>bit_rate <span class="token operator">=</span> <span class="token number">4096000</span><span class="token punctuation">;</span>                                     <span class="token comment">// 比特率</span></span>
<span class="line">    encoderCtx<span class="token operator">-&gt;</span>max_b_frames <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                       <span class="token comment">// 没有B帧（B帧需要前后两帧来推测，这会降低解码效率，提高存储效率）</span></span>
<span class="line">    encoderCtx<span class="token operator">-&gt;</span>gop_size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                                          <span class="token comment">// 同时决定了I帧（关键帧）的间隔 （可以用ESEyE工具来查看）</span></span>
<span class="line">    <span class="token function">avcodec_open2</span><span class="token punctuation">(</span>encoderCtx<span class="token punctuation">,</span> encoder<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">// 打开编码器</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 初始化yuvFrame</span></span>
<span class="line">    AVFrame <span class="token operator">*</span>yuvFrame <span class="token operator">=</span> <span class="token function">av_frame_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                       <span class="token comment">// 创建Frame</span></span>
<span class="line">    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>yuvBuffer <span class="token operator">=</span> <span class="token function">av_malloc</span><span class="token punctuation">(</span><span class="token function">av_image_get_buffer_size</span><span class="token punctuation">(</span>yuvFmt<span class="token punctuation">,</span> yuvW<span class="token punctuation">,</span> yuvH<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 为data分配内存</span></span>
<span class="line">    <span class="token function">av_image_fill_arrays</span><span class="token punctuation">(</span>yuvFrame<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> yuvFrame<span class="token operator">-&gt;</span>linesize<span class="token punctuation">,</span> yuvBuffer<span class="token punctuation">,</span> yuvFmt<span class="token punctuation">,</span> yuvW<span class="token punctuation">,</span> yuvH<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将分配的内存赋值到data</span></span>
<span class="line">    yuvFrame<span class="token operator">-&gt;</span>format <span class="token operator">=</span> yuvFmt<span class="token punctuation">;</span>                                                                  <span class="token comment">// 必须设置</span></span>
<span class="line">    yuvFrame<span class="token operator">-&gt;</span>width <span class="token operator">=</span> yuvW<span class="token punctuation">;</span>                                                                     <span class="token comment">// 必须设置</span></span>
<span class="line">    yuvFrame<span class="token operator">-&gt;</span>height <span class="token operator">=</span> yuvH<span class="token punctuation">;</span>                                                                    <span class="token comment">// 必须设置</span></span>
<span class="line">    yuvFrame<span class="token operator">-&gt;</span>pts <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                                          <span class="token comment">// 初始化</span></span>
<span class="line">    <span class="token keyword">int</span> frameSize <span class="token operator">=</span> yuvW <span class="token operator">*</span> yuvH<span class="token punctuation">;</span>                                                                <span class="token comment">// frameSize</span></span>
<span class="line">    <span class="token keyword">int</span> dataSize <span class="token operator">=</span> frameSize <span class="token operator">+</span>                                                                  <span class="token comment">// Y:4</span></span>
<span class="line">                   frameSize <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">+</span>                                                              <span class="token comment">// U:2</span></span>
<span class="line">                   frameSize <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>                                                               <span class="token comment">// V:0</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 初始化h264Packet</span></span>
<span class="line">    AVPacket <span class="token operator">*</span>h264Packet <span class="token operator">=</span> <span class="token function">av_packet_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 编码、读写文件</span></span>
<span class="line">    FILE <span class="token operator">*</span>yuvFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>yuvFileName<span class="token punctuation">,</span> <span class="token string">&quot;rb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    FILE <span class="token operator">*</span>h264File <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>h264FileName<span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fread</span><span class="token punctuation">(</span>yuvBuffer<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> dataSize<span class="token punctuation">,</span> yuvFile<span class="token punctuation">)</span> <span class="token operator">==</span> dataSize<span class="token punctuation">)</span> <span class="token comment">// 读取yuv数据</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 下面三行等效于：av_image_fill_arrays()</span></span>
<span class="line">        <span class="token comment">// yuvFrame-&gt;data[0] = yuvBuffer;                 // Y</span></span>
<span class="line">        <span class="token comment">// yuvFrame-&gt;data[1] = yuvBuffer + frameSize;     // U</span></span>
<span class="line">        <span class="token comment">// yuvFrame-&gt;data[2] = yuvBuffer + frameSize / 4; // V</span></span>
<span class="line"></span>
<span class="line">        yuvFrame<span class="token operator">-&gt;</span>pts<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 必须设置</span></span>
<span class="line"></span>
<span class="line">        ret <span class="token operator">=</span> <span class="token function">avcodec_send_frame</span><span class="token punctuation">(</span>encoderCtx<span class="token punctuation">,</span> yuvFrame<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发送给编码器 (可能编码器中还有剩余的帧，需要flush)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_send_frame failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">avcodec_receive_packet</span><span class="token punctuation">(</span>encoderCtx<span class="token punctuation">,</span> h264Packet<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 读取编码后的数据</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">fwrite</span><span class="token punctuation">(</span>h264Packet<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> h264Packet<span class="token operator">-&gt;</span>size<span class="token punctuation">,</span> h264File<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写入文件</span></span>
<span class="line">            <span class="token function">av_packet_unref</span><span class="token punctuation">(</span>h264Packet<span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">// 释放h264Packet-&gt;data</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="音频解码aac-pcm" tabindex="-1"><a class="header-anchor" href="#音频解码aac-pcm"><span>音频解码AAC_PCM</span></a></h2><p><img src="`+Q+`" alt="Alt text"></p><p><strong>PCM</strong></p><ul><li><p>PCM(Pulse Code Modulation),脉冲编码调制，是一种用数字表示采样模拟信号的方法。</p></li><li><p>核心过程:采样--&gt;量化--&gt;编码</p><ul><li>**采样：**将连续量离散化的过程，具体来说就是每隔一段时间去采集数据，采集的频率就是采样率，采样率越高，数据越保真。</li><li>**量化：**指将采样后得到的离散信号映射到一组有限的离散量上的过程，如把0v~3.3v的模拟电压信号重新映射到0~255的范围。</li><li>**编码：**将采集和量化后的数据保存</li></ul></li><li><p><strong>采样率(sampleRate) :</strong> 每秒中采集样本的个数，如8KHz，表示每秒采样8000次。</p><ul><li>奈奎斯特定理: 按比声音最高频率高2倍以上的频率对声音进行采样；</li><li>人耳能接受的频率范围为20Hz~20kHz，故采样率一般为44.1KHz较好，</li><li>采样率越高，质量越高，但存储空间增大。</li></ul></li><li><p><strong>量化格式 (sampleFormat):</strong></p><ul><li>ffmpeg支持的量化格式: <code>ffmpeg -formats|grep PCM</code></li></ul></li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ ffmpeg <span class="token parameter variable">-formats</span> <span class="token operator">|</span> <span class="token function">grep</span> PCM</span>
<span class="line"> DE alaw            PCM A-law</span>
<span class="line"> DE f32be           PCM <span class="token number">32</span>-bit floating-point big-endian</span>
<span class="line"> DE f32le           PCM <span class="token number">32</span>-bit floating-point little-endian</span>
<span class="line"> DE f64be           PCM <span class="token number">64</span>-bit floating-point big-endian</span>
<span class="line"> DE f64le           PCM <span class="token number">64</span>-bit floating-point little-endian</span>
<span class="line"> DE mulaw           PCM mu-law</span>
<span class="line"> DE s16be           PCM signed <span class="token number">16</span>-bit big-endian</span>
<span class="line"> DE s16le           PCM signed <span class="token number">16</span>-bit little-endian</span>
<span class="line"> DE s24be           PCM signed <span class="token number">24</span>-bit big-endian</span>
<span class="line"> DE s24le           PCM signed <span class="token number">24</span>-bit little-endian</span>
<span class="line"> DE s32be           PCM signed <span class="token number">32</span>-bit big-endian</span>
<span class="line"> DE s32le           PCM signed <span class="token number">32</span>-bit little-endian</span>
<span class="line"> DE s8              PCM signed <span class="token number">8</span>-bit</span>
<span class="line"> DE u16be           PCM unsigned <span class="token number">16</span>-bit big-endian</span>
<span class="line"> DE u16le           PCM unsigned <span class="token number">16</span>-bit little-endian</span>
<span class="line"> DE u24be           PCM unsigned <span class="token number">24</span>-bit big-endian</span>
<span class="line"> DE u24le           PCM unsigned <span class="token number">24</span>-bit little-endian</span>
<span class="line"> DE u32be           PCM unsigned <span class="token number">32</span>-bit big-endian</span>
<span class="line"> DE u32le           PCM unsigned <span class="token number">32</span>-bit little-endian</span>
<span class="line"> DE u8              PCM unsigned <span class="token number">8</span>-bit</span>
<span class="line"> DE vidc            PCM Archimedes VIDC</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>声道数（channel）:</strong><ul><li>单声道（mono）</li><li>双声道（stereo）</li></ul></li></ul><p><strong>存储格式:</strong></p><ul><li>双声道音频文件 <ul><li>采样数据按LRLR方式存储，存储的时候与字节序有关。</li></ul></li><li>单声道音频文件， <ul><li>采样数据按时间先后依次存入</li><li>(有时也会用LRLR方式存储，但另一个声道数据为0)</li></ul></li></ul><p><strong>存储格式</strong></p><ul><li>Packed和Planner两种，</li><li>对于双通道音频，Packed为两个声道的数据交错存储;Planner为两个声道数据分开存储: <ul><li>Packed: LRLRLR</li><li>Planner: LLLRRR</li></ul></li></ul><p><strong>在ffmpeg中的存储格式</strong></p><ul><li>PCM数据存储在AVFrame中</li><li>对于Packed格式的PCM数据，frame.data[0] 或 frame.extened_data[0]包含所有音频数据</li><li>对于Planar格式的PCM数据，frame.data[i] 或 frame.extened_data[i]表示i声道的数据</li><li>实际音频文件采用Packed格式，ffmpeg内部处理音频采用Planar格式。</li></ul><p><strong>大小计算:</strong></p><ul><li>以CD的音质为例:量化格式为16比特(2字节)，采样率为44100，声道数为2。</li><li>比特率为:44100<em>16</em>2=1378.125kbps</li><li>1分钟音频大小:1378.125*60/8/1024=10.09MB</li></ul><p><strong>ffmpeg提取pcm数据命令:</strong></p><ul><li>ffmpeg -i break.aac -ar 48000 -ac 2 -f s16le out.pcm</li></ul><p><strong>ffplay播放pcm数据:</strong></p><ul><li>ffplay -ar 48000 -ac 2 -fs16le outpcm</li></ul><p><img src="`+X+`" alt="Alt text"></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil/avutil.h&gt;</span>     <span class="token comment">// 工具函数</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil/frame.h&gt;</span>      <span class="token comment">// 工具函数</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavformat/avformat.h&gt;</span> <span class="token comment">// 解封装</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavcodec/avcodec.h&gt;</span>   <span class="token comment">// 解码</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">AVFormatContext <span class="token operator">*</span>inFmtCtx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inFmtCtx<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">avformat_close_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inFmtCtx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 设置日志级别</span></span>
<span class="line">    <span class="token function">av_log_set_level</span><span class="token punctuation">(</span>AV_LOG_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;useage: %s &lt;input.mp4&gt; &lt;output.pcm&gt;&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>input <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>output <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 打开输入</span></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">avformat_open_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inFmtCtx<span class="token punctuation">,</span> input<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avformat_open_input failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 打开输出</span></span>
<span class="line">    FILE <span class="token operator">*</span>outFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token string">&quot;wb+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 找到流信息</span></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">avformat_find_stream_info</span><span class="token punctuation">(</span>inFmtCtx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avformat_find_stream_info failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 找到音频流</span></span>
<span class="line">    <span class="token keyword">int</span> audioIdx <span class="token operator">=</span> <span class="token function">av_find_best_stream</span><span class="token punctuation">(</span>inFmtCtx<span class="token punctuation">,</span> AVMEDIA_TYPE_AUDIO<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>audioIdx <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;av_find_best_stream failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 创建解码器上下文</span></span>
<span class="line">    AVCodecContext <span class="token operator">*</span>audioDecoderCtx <span class="token operator">=</span> <span class="token function">avcodec_alloc_context3</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 拷贝解码器参数到解码器上下文</span></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">avcodec_parameters_to_context</span><span class="token punctuation">(</span>audioDecoderCtx<span class="token punctuation">,</span> inFmtCtx<span class="token operator">-&gt;</span>streams<span class="token punctuation">[</span>audioIdx<span class="token punctuation">]</span><span class="token operator">-&gt;</span>codecpar<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_parameters_to_context failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 找到解码器</span></span>
<span class="line">    <span class="token keyword">const</span> AVCodec <span class="token operator">*</span>audioDecoder <span class="token operator">=</span> <span class="token function">avcodec_find_decoder</span><span class="token punctuation">(</span>audioDecoderCtx<span class="token operator">-&gt;</span>codec_id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 打开解码器</span></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">avcodec_open2</span><span class="token punctuation">(</span>audioDecoderCtx<span class="token punctuation">,</span> audioDecoder<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_open2 failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 创建frame</span></span>
<span class="line">    AVFrame <span class="token operator">*</span>audioFrame <span class="token operator">=</span> <span class="token function">av_frame_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 创建buffer</span></span>
<span class="line">    <span class="token keyword">int</span> bufSize <span class="token operator">=</span> <span class="token function">av_samples_get_buffer_size</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> audioDecoderCtx<span class="token operator">-&gt;</span>ch_layout<span class="token punctuation">.</span>nb_channels<span class="token punctuation">,</span> audioDecoderCtx<span class="token operator">-&gt;</span>sample_rate<span class="token punctuation">,</span> audioDecoderCtx<span class="token operator">-&gt;</span>sample_fmt<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token function">av_malloc</span><span class="token punctuation">(</span>bufSize<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 分配buffer到frame-&gt;data中</span></span>
<span class="line">    audioFrame<span class="token operator">-&gt;</span>nb_samples <span class="token operator">=</span> audioDecoderCtx<span class="token operator">-&gt;</span>sample_rate<span class="token punctuation">;</span> <span class="token comment">// 必须预先设置</span></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">avcodec_fill_audio_frame</span><span class="token punctuation">(</span>audioFrame<span class="token punctuation">,</span> audioDecoderCtx<span class="token operator">-&gt;</span>ch_layout<span class="token punctuation">.</span>nb_channels<span class="token punctuation">,</span> audioDecoderCtx<span class="token operator">-&gt;</span>sample_fmt<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> bufSize<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_fill_audio_frame failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 单个采样所占字节数</span></span>
<span class="line">    <span class="token keyword">int</span> bytesPerSample <span class="token operator">=</span> <span class="token function">av_get_bytes_per_sample</span><span class="token punctuation">(</span>audioDecoderCtx<span class="token operator">-&gt;</span>sample_fmt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 读取packet</span></span>
<span class="line">    AVPacket <span class="token operator">*</span>packet <span class="token operator">=</span> <span class="token function">av_packet_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">av_read_frame</span><span class="token punctuation">(</span>inFmtCtx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>stream_index <span class="token operator">==</span> audioIdx<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 发送个解码器</span></span>
<span class="line">            <span class="token function">avcodec_send_packet</span><span class="token punctuation">(</span>audioDecoderCtx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 从解码器接收数据</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">avcodec_receive_frame</span><span class="token punctuation">(</span>audioDecoderCtx<span class="token punctuation">,</span> audioFrame<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">/**</span>
<span class="line">                 * 需要把解码后的非交错格式（Planer），写入文件使用交错格式（Packed）</span>
<span class="line">                 *</span>
<span class="line">                 * audioFrame  格式：fltp(float32-le)</span>
<span class="line">                 *</span>
<span class="line">                 * frame-&gt;data[ch=0] L L L L</span>
<span class="line">                 * frame-&gt;data[ch=1] R R R R</span>
<span class="line">                 *</span>
<span class="line">                 * 写入文件：</span>
<span class="line">                 * L R L R L R L R L R L R</span>
<span class="line">                 */</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> sampleIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> sampleIdx <span class="token operator">&lt;</span> audioFrame<span class="token operator">-&gt;</span>nb_samples<span class="token punctuation">;</span> sampleIdx<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ch <span class="token operator">&lt;</span> audioFrame<span class="token operator">-&gt;</span>ch_layout<span class="token punctuation">.</span>nb_channels<span class="token punctuation">;</span> ch<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token function">fwrite</span><span class="token punctuation">(</span>audioFrame<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">+</span> sampleIdx <span class="token operator">*</span> bytesPerSample<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> bytesPerSample<span class="token punctuation">,</span> outFile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">av_packet_unref</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">/**</span>
<span class="line">    $ ffprobe.exe out.aac</span>
<span class="line">        Input #0, aac, from &#39;out.aac&#39;:</span>
<span class="line">        Duration: 00:00:34.95, bitrate: 122 kb/s</span>
<span class="line">        Stream #0:0: Audio: aac (LC), 44100 Hz, stereo, fltp, 122 kb/s</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">    $ ./output/main.exe out.aac aac_to_pcm.pcm</span>
<span class="line">    $ ffplay.exe -i aac_to_pcm.pcm -ac 2 -ar 44100 -f f32le</span>
<span class="line">    */</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="音频编码pcm-to-aac" tabindex="-1"><a class="header-anchor" href="#音频编码pcm-to-aac"><span>音频编码PCM_to_AAC</span></a></h2><blockquote><p>ffmpeg -ac 2 -ar 48000 -fs16le -i s16le_48000_2_break.pcm -acodec libfdk_aac out1.aac</p><ul><li>ac 音频通道数</li><li>ar 音频采样率</li><li>f 格式</li><li>i 输入</li><li>acodec音频编码器</li></ul></blockquote><p><img src="`+Z+`" alt="Alt text"></p><blockquote><p>这里是需要把PCM数据写入Frame，<br> 需要把音频的一些参数写入Frame</p></blockquote><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil/avutil.h&gt;</span>     <span class="token comment">// 工具函数</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil/frame.h&gt;</span>      <span class="token comment">// 工具函数</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavformat/avformat.h&gt;</span> <span class="token comment">// 解封装</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavcodec/avcodec.h&gt;</span>   <span class="token comment">// 解码</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;./lib/adts.h&quot;</span>           <span class="token comment">// for adts 音频头</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">AVFrame <span class="token operator">*</span>frame <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>frame<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_frame_unref</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">av_frame_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 设置日志级别</span></span>
<span class="line">    <span class="token function">av_log_set_level</span><span class="token punctuation">(</span>AV_LOG_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;useage: %s &lt;input.pcm&gt; &lt;output.aac&gt;&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>input <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>output <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 打开输入</span></span>
<span class="line">    FILE <span class="token operator">*</span>srcFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token string">&quot;rb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>srcFile <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;fopen srcFile failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 打开输出</span></span>
<span class="line">    FILE <span class="token operator">*</span>destFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>destFile <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;fopen destFile failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 获取单声道pcm</span></span>
<span class="line">    <span class="token comment">// ffmpeg -i bigbuckbunny_h264_aac.mp4 -ar 44100 -ac 1 -f f32le r_44100_c_1_f_f32le.pcm</span></span>
<span class="line">    <span class="token comment">// 获取双声道pcm</span></span>
<span class="line">    <span class="token comment">// ffmpeg -i bigbuckbunny_h264_aac.mp4 -ar 44100 -ac 2 -f f32le r_44100_c_2_f_f32le.pcm</span></span>
<span class="line">    <span class="token comment">// 单声道pcm转换成aac</span></span>
<span class="line">    <span class="token comment">// ./output/main.exe r_44100_c_1_f_f32le.pcm pcm_to_aac.aac</span></span>
<span class="line">    <span class="token comment">// 双声道pcm转换成aac</span></span>
<span class="line">    <span class="token comment">// ./output/main.exe r_44100_c_2_f_f32le.pcm pcm_to_aac.aac</span></span>
<span class="line">    <span class="token comment">// 播放</span></span>
<span class="line">    <span class="token comment">// ffplay.exe pcm_to_aac.aac</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 主要的是前三个参数</span></span>
<span class="line">    AVChannelLayout ch_layout <span class="token operator">=</span> AV_CHANNEL_LAYOUT_MONO<span class="token punctuation">;</span> <span class="token comment">// 单声道或双声道</span></span>
<span class="line">    <span class="token keyword">int</span> sample_rate <span class="token operator">=</span> <span class="token number">44100</span><span class="token punctuation">;</span>                            <span class="token comment">// 采样率</span></span>
<span class="line">    <span class="token keyword">int</span> sample_fmt <span class="token operator">=</span> AV_SAMPLE_FMT_FLTP<span class="token punctuation">;</span>                <span class="token comment">// 采样格式</span></span>
<span class="line">    <span class="token keyword">int</span> nb_samples <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>                              <span class="token comment">// 每个frame的每个通道含有的采样数</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 初始化frame</span></span>
<span class="line">    frame <span class="token operator">=</span> <span class="token function">av_frame_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    frame<span class="token operator">-&gt;</span>ch_layout <span class="token operator">=</span> ch_layout<span class="token punctuation">;</span>     <span class="token comment">// av_frame_alloc</span></span>
<span class="line">    frame<span class="token operator">-&gt;</span>sample_rate <span class="token operator">=</span> sample_rate<span class="token punctuation">;</span> <span class="token comment">// 采样率</span></span>
<span class="line">    frame<span class="token operator">-&gt;</span>format <span class="token operator">=</span> sample_fmt<span class="token punctuation">;</span>       <span class="token comment">/* 对于libfdk_aac编码器，填：AV_SAMPLE_FMT_S16(packet)，因为这是\`ff_libfdk_aac_encoder\`所支持的格式</span>
<span class="line">                                       * 因为我的ffmpeg是开源社区下载的，没有包含libfdk_aac解码器，需要手动编译才有。</span>
<span class="line">                                       * </span>
<span class="line">                                       * 对于aac编码器，填，AV_SAMPLE_FMT_FLTP（fltp）（float, planar）FFmpeg内部AAC格式只支持AV_SAMPLE_FMT_FLTP格式的PCM</span>
<span class="line">                                       * 这里播放时提示，AAC RDB per ADTS frame is not implemented，是因为我这里的aac编码器没有实现adts头文件</span>
<span class="line">                                       * 另外，由于fltp是指planar格式，而ffmpeg提取pcm格式文件为packed格式，</span>
<span class="line">                                       * 所以读取文件的时候要做特殊处理，或者仅处理单声道文件</span>
<span class="line">                                       */</span></span>
<span class="line">    frame<span class="token operator">-&gt;</span>nb_samples <span class="token operator">=</span> nb_samples<span class="token punctuation">;</span>   <span class="token comment">// 每帧（frame）采样数，如果是\`LC profile\`默认为1024,如果是\`HE profile\`则设置为2048</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 为frame分配buffer空间</span></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">av_frame_get_buffer</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;av_frame_get_buffer failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 找到编码器</span></span>
<span class="line">    <span class="token keyword">const</span> AVCodec <span class="token operator">*</span>encoder <span class="token operator">=</span> <span class="token function">avcodec_find_encoder_by_name</span><span class="token punctuation">(</span><span class="token string">&quot;aac&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>encoder <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_find_encoder_by_name failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 创建上下文</span></span>
<span class="line">    AVCodecContext <span class="token operator">*</span>encoderCtx <span class="token operator">=</span> <span class="token function">avcodec_alloc_context3</span><span class="token punctuation">(</span>encoder<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>encoderCtx <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_alloc_context3 failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 填参数</span></span>
<span class="line">    encoderCtx<span class="token operator">-&gt;</span>ch_layout <span class="token operator">=</span> ch_layout<span class="token punctuation">;</span></span>
<span class="line">    encoderCtx<span class="token operator">-&gt;</span>sample_rate <span class="token operator">=</span> sample_rate<span class="token punctuation">;</span></span>
<span class="line">    encoderCtx<span class="token operator">-&gt;</span>sample_fmt <span class="token operator">=</span> sample_fmt<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 打开编码器</span></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">avcodec_open2</span><span class="token punctuation">(</span>encoderCtx<span class="token punctuation">,</span> encoder<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_open2 failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 读取数据</span></span>
<span class="line">    AVPacket <span class="token operator">*</span>packet <span class="token operator">=</span> <span class="token function">av_packet_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fread</span><span class="token punctuation">(</span>frame<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> frame<span class="token operator">-&gt;</span>linesize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> srcFile<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 发送给编码器</span></span>
<span class="line">        ret <span class="token operator">=</span> <span class="token function">avcodec_send_frame</span><span class="token punctuation">(</span>encoderCtx<span class="token punctuation">,</span> frame<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_send_frame failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 从编码器接收数据</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">avcodec_receive_packet</span><span class="token punctuation">(</span>encoderCtx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 写入ADTS_Header</span></span>
<span class="line">            <span class="token class-name">uint8_t</span> adts_header<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">set_ADTS_Header</span><span class="token punctuation">(</span></span>
<span class="line">                adts_header<span class="token punctuation">,</span></span>
<span class="line">                packet<span class="token operator">-&gt;</span>size<span class="token punctuation">,</span></span>
<span class="line">                <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">                sample_rate<span class="token punctuation">,</span></span>
<span class="line">                ch_layout<span class="token punctuation">.</span>nb_channels<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">fwrite</span><span class="token punctuation">(</span>adts_header<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>adts_header<span class="token punctuation">)</span><span class="token punctuation">,</span> destFile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 写入数据</span></span>
<span class="line">            <span class="token function">fwrite</span><span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> packet<span class="token operator">-&gt;</span>size<span class="token punctuation">,</span> destFile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">av_packet_unref</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="音视频采集" tabindex="-1"><a class="header-anchor" href="#音视频采集"><span>音视频采集</span></a></h2><h3 id="视频采集" tabindex="-1"><a class="header-anchor" href="#视频采集"><span>视频采集</span></a></h3><p><img src="`+J+`" alt="Alt text"></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 查看设备列表</span></span>
<span class="line">$ ffmpeg <span class="token parameter variable">-devices</span></span>
<span class="line"></span>
<span class="line">Devices:</span>
<span class="line"> D. <span class="token operator">=</span> Demuxing supported</span>
<span class="line"> .E <span class="token operator">=</span> Muxing supported</span>
<span class="line"> --</span>
<span class="line">  E caca            caca <span class="token punctuation">(</span>color ASCII art<span class="token punctuation">)</span> output device</span>
<span class="line"> D  dshow           DirectShow capture</span>
<span class="line"> D  gdigrab         GDI API Windows frame grabber</span>
<span class="line"> D  lavfi           Libavfilter virtual input device      <span class="token comment">#虚拟输入设备</span></span>
<span class="line"> D  libcdio</span>
<span class="line">  E sdl,sdl2        SDL2 output device                    <span class="token comment">#输出设备</span></span>
<span class="line"> D  vfwcap          VfW video capture</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 查看dshow支持的参数</span></span>
<span class="line">$ ffmpeg <span class="token parameter variable">-h</span> <span class="token assign-left variable">demuxer</span><span class="token operator">=</span>dshow</span>
<span class="line"></span>
<span class="line">Demuxer dshow <span class="token punctuation">[</span>DirectShow capture<span class="token punctuation">]</span>:</span>
<span class="line">dshow indev AVOptions:</span>
<span class="line">  <span class="token parameter variable">-video_size</span>        <span class="token operator">&lt;</span>image_size<span class="token operator">&gt;</span> .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. <span class="token builtin class-name">set</span> video size given a string such as 640x480 or hd720.</span>
<span class="line">  <span class="token parameter variable">-pixel_format</span>      <span class="token operator">&lt;</span>pix_fmt<span class="token operator">&gt;</span>    .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. <span class="token builtin class-name">set</span> video pixel <span class="token function">format</span> <span class="token punctuation">(</span>default none<span class="token punctuation">)</span></span>
<span class="line">  <span class="token parameter variable">-framerate</span>         <span class="token operator">&lt;</span>string<span class="token operator">&gt;</span>     .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. <span class="token builtin class-name">set</span> video frame rate</span>
<span class="line">  <span class="token parameter variable">-sample_rate</span>       <span class="token operator">&lt;</span>int<span class="token operator">&gt;</span>        .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. <span class="token builtin class-name">set</span> audio sample rate <span class="token punctuation">(</span>from <span class="token number">0</span> to INT_MAX<span class="token punctuation">)</span> <span class="token punctuation">(</span>default <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token parameter variable">-sample_size</span>       <span class="token operator">&lt;</span>int<span class="token operator">&gt;</span>        .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. <span class="token builtin class-name">set</span> audio sample size <span class="token punctuation">(</span>from <span class="token number">0</span> to <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>default <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token parameter variable">-channels</span>          <span class="token operator">&lt;</span>int<span class="token operator">&gt;</span>        .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. <span class="token builtin class-name">set</span> number of audio channels, such as <span class="token number">1</span> or <span class="token number">2</span> <span class="token punctuation">(</span>from <span class="token number">0</span> to INT_MAX<span class="token punctuation">)</span> <span class="token punctuation">(</span>default <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token parameter variable">-audio_buffer_size</span> <span class="token operator">&lt;</span>int<span class="token operator">&gt;</span>        .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. <span class="token builtin class-name">set</span> audio device buffer latency size <span class="token keyword">in</span> milliseconds <span class="token punctuation">(</span>default is the device&#39;s default<span class="token punctuation">)</span> <span class="token punctuation">(</span>from <span class="token number">0</span> to INT_MAX<span class="token punctuation">)</span> <span class="token punctuation">(</span>default <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token parameter variable">-list_devices</span>      <span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span>    .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. list available devices <span class="token punctuation">(</span>default <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token parameter variable">-list_options</span>      <span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span>    .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. list available options <span class="token keyword">for</span> specified device <span class="token punctuation">(</span>default <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token parameter variable">-video_device_number</span> <span class="token operator">&lt;</span>int<span class="token operator">&gt;</span>        .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. <span class="token builtin class-name">set</span> video device number <span class="token keyword">for</span> devices with same name <span class="token punctuation">(</span>starts at <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>from <span class="token number">0</span> to INT_MAX<span class="token punctuation">)</span> <span class="token punctuation">(</span>default <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token parameter variable">-audio_device_number</span> <span class="token operator">&lt;</span>int<span class="token operator">&gt;</span>        .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. <span class="token builtin class-name">set</span> audio device number <span class="token keyword">for</span> devices with same name <span class="token punctuation">(</span>starts at <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>from <span class="token number">0</span> to INT_MAX<span class="token punctuation">)</span> <span class="token punctuation">(</span>default <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token parameter variable">-crossbar_video_input_pin_number</span> <span class="token operator">&lt;</span>int<span class="token operator">&gt;</span>        .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. <span class="token builtin class-name">set</span> video input pin number <span class="token keyword">for</span> crossbar device <span class="token punctuation">(</span>from <span class="token parameter variable">-1</span> to INT_MAX<span class="token punctuation">)</span> <span class="token punctuation">(</span>default -1<span class="token punctuation">)</span></span>
<span class="line">  <span class="token parameter variable">-crossbar_audio_input_pin_number</span> <span class="token operator">&lt;</span>int<span class="token operator">&gt;</span>        .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. <span class="token builtin class-name">set</span> audio input pin number <span class="token keyword">for</span> crossbar device <span class="token punctuation">(</span>from <span class="token parameter variable">-1</span> to INT_MAX<span class="token punctuation">)</span> <span class="token punctuation">(</span>default -1<span class="token punctuation">)</span></span>
<span class="line">  <span class="token parameter variable">-show_video_device_dialog</span> <span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span>    .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. display property dialog <span class="token keyword">for</span> video capture device <span class="token punctuation">(</span>default <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token parameter variable">-show_audio_device_dialog</span> <span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span>    .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. display property dialog <span class="token keyword">for</span> audio capture device <span class="token punctuation">(</span>default <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token parameter variable">-show_video_crossbar_connection_dialog</span> <span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span>    .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. display property dialog <span class="token keyword">for</span> crossbar connecting pins filter on video device <span class="token punctuation">(</span>default <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token parameter variable">-show_audio_crossbar_connection_dialog</span> <span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span>    .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. display property dialog <span class="token keyword">for</span> crossbar connecting pins filter on audio device <span class="token punctuation">(</span>default <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token parameter variable">-show_analog_tv_tuner_dialog</span> <span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span>    .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. display property dialog <span class="token keyword">for</span> analog tuner filter <span class="token punctuation">(</span>default <span class="token boolean">false</span><span class="token punctuation">)</span>        </span>
<span class="line">  <span class="token parameter variable">-show_analog_tv_tuner_audio_dialog</span> <span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span>    .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. display property dialog <span class="token keyword">for</span> analog tuner audio filter <span class="token punctuation">(</span>default <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token parameter variable">-audio_device_load</span> <span class="token operator">&lt;</span>string<span class="token operator">&gt;</span>     .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. load audio capture filter device <span class="token punctuation">(</span>and properties<span class="token punctuation">)</span> from <span class="token function">file</span></span>
<span class="line">  <span class="token parameter variable">-audio_device_save</span> <span class="token operator">&lt;</span>string<span class="token operator">&gt;</span>     .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. save audio capture filter device <span class="token punctuation">(</span>and properties<span class="token punctuation">)</span> to <span class="token function">file</span></span>
<span class="line">  <span class="token parameter variable">-video_device_load</span> <span class="token operator">&lt;</span>string<span class="token operator">&gt;</span>     .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. load video capture filter device <span class="token punctuation">(</span>and properties<span class="token punctuation">)</span> from <span class="token function">file</span></span>
<span class="line">  <span class="token parameter variable">-video_device_save</span> <span class="token operator">&lt;</span>string<span class="token operator">&gt;</span>     .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. save video capture filter device <span class="token punctuation">(</span>and properties<span class="token punctuation">)</span> to <span class="token function">file</span></span>
<span class="line">  <span class="token parameter variable">-use_video_device_timestamps</span> <span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span>    .D<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. use device instead of wallclock timestamps <span class="token keyword">for</span> video frames <span class="token punctuation">(</span>default <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 查看支持的采集设备列表</span></span>
<span class="line">ffmpeg <span class="token parameter variable">-f</span> dshow <span class="token parameter variable">-list_devices</span> <span class="token boolean">true</span> <span class="token parameter variable">-i</span> dummy</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span>dshow @ 00000242b296d600<span class="token punctuation">]</span> <span class="token string">&quot;USB2.0 UVC HD Webcam&quot;</span> <span class="token punctuation">(</span>video<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span>dshow @ 00000242b296d600<span class="token punctuation">]</span>   Alternative name <span class="token string">&quot;@device_pnp_<span class="token entity" title="\\\\">\\\\</span>?\\usb#vid_13d3&amp;pid_5654&amp;mi_00#6&amp;3907f7b1&amp;0&amp;0000#{65e8773d-8f56-11d0-a3b9-00a0c9223196}\\global&quot;</span></span>
<span class="line"><span class="token punctuation">[</span>dshow @ 00000242b296d600<span class="token punctuation">]</span> <span class="token string">&quot;麦克风 (Realtek High Definition Audio)&quot;</span> <span class="token punctuation">(</span>audio<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span>dshow @ 00000242b296d600<span class="token punctuation">]</span>   Alternative name <span class="token string">&quot;@device_cm_{33D9A762-90C8-11D0-BD43-00A0C911CE86}\\wave_{4030643A-CF6B-43BC-99F6-7AB127C53A99}&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 采集画面</span></span>
<span class="line">ffmpeg <span class="token parameter variable">-f</span> dshow <span class="token parameter variable">-i</span> <span class="token assign-left variable">video</span><span class="token operator">=</span><span class="token string">&#39;USB2.0 UVC HD Webcam&#39;</span> <span class="token parameter variable">-framerate</span> <span class="token number">30</span> <span class="token parameter variable">-video_size</span> 640x480 <span class="token parameter variable">-pixel_format</span> yuyv422  out.yuv</span>
<span class="line"><span class="token comment"># （指定的参数好像没有用</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 播放画面</span></span>
<span class="line">ffplay <span class="token parameter variable">-framerate</span> <span class="token number">30</span> <span class="token parameter variable">-video_size</span> 640x480 <span class="token parameter variable">-pixel_format</span> yuyv422 out.yuv</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+K+`" alt="Alt text"></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil/avutil.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil/imgutils.h&gt;</span> <span class="token comment">// 计算视频大小</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil/log.h&gt;</span>      <span class="token comment">// ffmpeg的日志系统</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavformat/avformat.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavcodec/avcodec.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavdevice/avdevice.h&gt;</span> <span class="token comment">// 设备</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libswscale/swscale.h&gt;</span>   <span class="token comment">// 视频缩放</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> err<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">/**</span>
<span class="line"> * 列出当前所连设备</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">list_devices</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ffmpeg -f dshow -list_devices true -i dummy</span></span>
<span class="line">    <span class="token keyword">const</span> AVInputFormat <span class="token operator">*</span>inputFmt <span class="token operator">=</span> <span class="token function">av_find_input_format</span><span class="token punctuation">(</span><span class="token string">&quot;dshow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputFmt <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;av_find_input_format failed!!!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    AVDictionary <span class="token operator">*</span>options <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">av_dict_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>options<span class="token punctuation">,</span> <span class="token string">&quot;list_devices&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    AVFormatContext <span class="token operator">*</span>fmtCtx <span class="token operator">=</span> <span class="token function">avformat_alloc_context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    err <span class="token operator">=</span> <span class="token function">avformat_open_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fmtCtx<span class="token punctuation">,</span> <span class="token string">&quot;dummy&quot;</span><span class="token punctuation">,</span> inputFmt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avformat_open_input failed!!!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">/**</span>
<span class="line">        输出：</span>
<span class="line">            [dshow @ 000002572fc93000] &quot;USB2.0 UVC HD Webcam&quot; (video)</span>
<span class="line">            [dshow @ 000002572fc93000]   Alternative name &quot;@device_pnp_\\\\?\\usb#vid_13d3&amp;pid_5654&amp;mi_00#6&amp;3907f7b1&amp;0&amp;0000#{65e8773d-8f56-11d0-a3b9-00a0c9223196}\\global&quot;</span>
<span class="line">            [dshow @ 000002572fc93000] &quot;麦克风 (Realtek High Definition Audio)&quot; (audio)</span>
<span class="line">            [dshow @ 000002572fc93000]   Alternative name &quot;@device_cm_{33D9A762-90C8-11D0-BD43-00A0C911CE86}\\wave_{4030643A-CF6B-43BC-99F6-7AB127C53A99}&quot;</span>
<span class="line">    */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>fmtCtx<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">avformat_close_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fmtCtx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭输入</span></span>
<span class="line">        <span class="token function">avformat_free_context</span><span class="token punctuation">(</span>fmtCtx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放输入</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">decodeVideoYUV420p</span><span class="token punctuation">(</span>AVCodecContext <span class="token operator">*</span>decoderCtx<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">SwsContext</span> <span class="token operator">*</span>swsCtx<span class="token punctuation">,</span> AVPacket <span class="token operator">*</span>packet<span class="token punctuation">,</span> AVFrame <span class="token operator">*</span>destFrame<span class="token punctuation">,</span> FILE <span class="token operator">*</span>dest<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">avcodec_send_packet</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        AVFrame <span class="token operator">*</span>srcframe <span class="token operator">=</span> <span class="token function">av_frame_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">avcodec_receive_frame</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> srcframe<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">sws_scale</span><span class="token punctuation">(</span>swsCtx<span class="token punctuation">,</span>                                                    <span class="token comment">// swscale上下文</span></span>
<span class="line">                      srcframe<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> srcframe<span class="token operator">-&gt;</span>linesize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>height<span class="token punctuation">,</span> <span class="token comment">// 源Frame数据 源Frame宽度 起始位置 原始图片高度</span></span>
<span class="line">                      destFrame<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> destFrame<span class="token operator">-&gt;</span>linesize                       <span class="token comment">// 目标Frame数据 目标Frame宽度</span></span>
<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// yuv420p (packed format)</span></span>
<span class="line">            <span class="token function">fwrite</span><span class="token punctuation">(</span>destFrame<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>width <span class="token operator">*</span> decoderCtx<span class="token operator">-&gt;</span>height<span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">fwrite</span><span class="token punctuation">(</span>destFrame<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>width <span class="token operator">*</span> decoderCtx<span class="token operator">-&gt;</span>height <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">fwrite</span><span class="token punctuation">(</span>destFrame<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>width <span class="token operator">*</span> decoderCtx<span class="token operator">-&gt;</span>height <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">av_frame_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>srcframe<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">decodeVideo</span><span class="token punctuation">(</span>AVCodecContext <span class="token operator">*</span>decoderCtx<span class="token punctuation">,</span> AVPacket <span class="token operator">*</span>packet<span class="token punctuation">,</span> FILE <span class="token operator">*</span>dest<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">avcodec_send_packet</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        AVFrame <span class="token operator">*</span>frame <span class="token operator">=</span> <span class="token function">av_frame_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">avcodec_receive_frame</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> frame<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// uyvu422 yuv422 (packed format)</span></span>
<span class="line">            <span class="token function">fwrite</span><span class="token punctuation">(</span>frame<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>width <span class="token operator">*</span> decoderCtx<span class="token operator">-&gt;</span>height <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">av_frame_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 设置日志级别</span></span>
<span class="line">    <span class="token function">av_log_set_level</span><span class="token punctuation">(</span>AV_LOG_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 注册所有device</span></span>
<span class="line">    <span class="token function">avdevice_register_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 显示所有输入设备</span></span>
<span class="line">        <span class="token function">list_devices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 显示用法</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;useage: %s &lt;deviceName&gt; &lt;output.yuv&gt; &lt;yuv420p.yuv&gt;\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 打开设备</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>deviceName <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>outputName1 <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>outputNmae2 <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// open file</span></span>
<span class="line">    FILE <span class="token operator">*</span>dest1 <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>outputName1<span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>dest1 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;fopen failed!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> end<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    FILE <span class="token operator">*</span>dest2 <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>outputNmae2<span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>dest2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;fopen failed!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> end<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ffmpeg -f dshow -i video=&#39;USB2.0 UVC HD Webcam&#39; -framerate 30 -video_size 640x480 -pixel_format yuyv422  out.yuv</span></span>
<span class="line">    <span class="token comment">// ffplay out.yuv -framerate 30 -video_size 640x480 -pixel_format yuyv422</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> AVInputFormat <span class="token operator">*</span>inputFmt <span class="token operator">=</span> <span class="token function">av_find_input_format</span><span class="token punctuation">(</span><span class="token string">&quot;dshow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputFmt <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;av_find_input_format failed!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> end<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    AVFormatContext <span class="token operator">*</span>fmtCtx <span class="token operator">=</span> <span class="token function">avformat_alloc_context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> inputName<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">strcat</span><span class="token punctuation">(</span>inputName<span class="token punctuation">,</span> <span class="token string">&quot;video=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">strcat</span><span class="token punctuation">(</span>inputName<span class="token punctuation">,</span> deviceName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;input: %s\\n&quot;</span><span class="token punctuation">,</span> inputName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    AVDictionary <span class="token operator">*</span>options <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// av_dict_set(&amp;options, &quot;framerate&quot;, &quot;30&quot;, 0);</span></span>
<span class="line">    <span class="token comment">// av_dict_set(&amp;options, &quot;pixel_format&quot;, &quot;yuyv422&quot;, 0);</span></span>
<span class="line">    <span class="token comment">// av_dict_set(&amp;options, &quot;video_size&quot;, &quot;640x480&quot;, 0);</span></span>
<span class="line">    err <span class="token operator">=</span> <span class="token function">avformat_open_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fmtCtx<span class="token punctuation">,</span> inputName<span class="token punctuation">,</span> inputFmt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avformat_open_input failed!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> end<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 输出流信息</span></span>
<span class="line">    <span class="token function">av_dump_format</span><span class="token punctuation">(</span>fmtCtx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> deviceName<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 探测流</span></span>
<span class="line">    <span class="token comment">// get stream information</span></span>
<span class="line">    err <span class="token operator">=</span> <span class="token function">avformat_find_stream_info</span><span class="token punctuation">(</span>fmtCtx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;av_find_best_stream failed!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> end<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 找到视频流</span></span>
<span class="line">    <span class="token comment">// av_find_best_stream</span></span>
<span class="line">    <span class="token keyword">int</span> videoIndex <span class="token operator">=</span> <span class="token function">av_find_best_stream</span><span class="token punctuation">(</span>fmtCtx<span class="token punctuation">,</span> AVMEDIA_TYPE_VIDEO<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>videoIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;av_find_best_stream failed!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> end<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 分配编码器上下文</span></span>
<span class="line">    AVCodecContext <span class="token operator">*</span>decoderCtx <span class="token operator">=</span> <span class="token function">avcodec_alloc_context3</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    err <span class="token operator">=</span> <span class="token function">avcodec_parameters_to_context</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> fmtCtx<span class="token operator">-&gt;</span>streams<span class="token punctuation">[</span>videoIndex<span class="token punctuation">]</span><span class="token operator">-&gt;</span>codecpar<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_parameters_to_context failed!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> end<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> AVCodec <span class="token operator">*</span>decoder <span class="token operator">=</span> <span class="token function">avcodec_find_decoder</span><span class="token punctuation">(</span>decoderCtx<span class="token operator">-&gt;</span>codec_id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>decoder <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_find_decoder failed!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> end<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;decoder name: %s\\n&quot;</span><span class="token punctuation">,</span> decoder<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    err <span class="token operator">=</span> <span class="token function">avcodec_open2</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> decoder<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_open2 failed!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> end<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取源颜色空间</span></span>
<span class="line">    <span class="token keyword">enum</span> <span class="token class-name">AVPixelFormat</span> srcPixFmt <span class="token operator">=</span> decoderCtx<span class="token operator">-&gt;</span>pix_fmt<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">enum</span> <span class="token class-name">AVPixelFormat</span> destPixFmt <span class="token operator">=</span> AV_PIX_FMT_YUV420P<span class="token punctuation">;</span> <span class="token comment">// AV_PIX_FMT_YUV420P</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取swscale上下文</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">SwsContext</span> <span class="token operator">*</span>swsCtx <span class="token operator">=</span> <span class="token function">sws_getContext</span><span class="token punctuation">(</span></span>
<span class="line">        decoderCtx<span class="token operator">-&gt;</span>width<span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>height<span class="token punctuation">,</span> srcPixFmt<span class="token punctuation">,</span>  <span class="token comment">// 源分辨率 源图像空间</span></span>
<span class="line">        decoderCtx<span class="token operator">-&gt;</span>width<span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>height<span class="token punctuation">,</span> destPixFmt<span class="token punctuation">,</span> <span class="token comment">// 目标分辨率 目标图像空间</span></span>
<span class="line">        SWS_FAST_BILINEAR<span class="token punctuation">,</span>                                 <span class="token comment">// 缩放算法</span></span>
<span class="line">        <span class="token constant">NULL</span><span class="token punctuation">,</span>                                              <span class="token comment">// 源图像过滤器（前后图像滤波处理）</span></span>
<span class="line">        <span class="token constant">NULL</span><span class="token punctuation">,</span>                                              <span class="token comment">// 目标图像滤波器</span></span>
<span class="line">        <span class="token constant">NULL</span>                                               <span class="token comment">// 参数</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>swsCtx <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;sws_getContext failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> end<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 创建destFrame</span></span>
<span class="line">    AVFrame <span class="token operator">*</span>destFrame <span class="token operator">=</span> <span class="token function">av_frame_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 为destFrame的data分配内存</span></span>
<span class="line">    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>destBuffer <span class="token operator">=</span> <span class="token function">av_malloc</span><span class="token punctuation">(</span><span class="token function">av_image_get_buffer_size</span><span class="token punctuation">(</span>destPixFmt<span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>width<span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>height<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 把所分配内存的地址，通过计算，分别设置到Y:data[0] U:data[1] V:data[2] 中</span></span>
<span class="line">    <span class="token function">av_image_fill_arrays</span><span class="token punctuation">(</span>destFrame<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> destFrame<span class="token operator">-&gt;</span>linesize<span class="token punctuation">,</span> destBuffer<span class="token punctuation">,</span> destPixFmt<span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>width<span class="token punctuation">,</span> decoderCtx<span class="token operator">-&gt;</span>height<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    AVPacket <span class="token operator">*</span>packet <span class="token operator">=</span> <span class="token function">av_packet_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">av_read_frame</span><span class="token punctuation">(</span>fmtCtx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>stream_index <span class="token operator">==</span> videoIndex<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">decodeVideo</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> packet<span class="token punctuation">,</span> dest1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token function">decodeVideoYUV420p</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> swsCtx<span class="token punctuation">,</span> packet<span class="token punctuation">,</span> destFrame<span class="token punctuation">,</span> dest2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">av_packet_unref</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">av_packet_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">decodeVideo</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> dest1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">decodeVideoYUV420p</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> swsCtx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> destFrame<span class="token punctuation">,</span> dest2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">end<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>dest1<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">fclose</span><span class="token punctuation">(</span>dest1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>fmtCtx<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">avformat_close_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fmtCtx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭输入</span></span>
<span class="line">        <span class="token function">avformat_free_context</span><span class="token punctuation">(</span>fmtCtx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放输入</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="音频采集" tabindex="-1"><a class="header-anchor" href="#音频采集"><span>音频采集</span></a></h3><p><img src="`+nn+`" alt="Alt text"></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">ffmpeg <span class="token parameter variable">-f</span> dshow <span class="token parameter variable">-list_devices</span> <span class="token boolean">true</span> <span class="token parameter variable">-i</span> dummy</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token punctuation">[</span>dshow @ 000001fe0d72d340<span class="token punctuation">]</span> <span class="token string">&quot;USB2.0 UVC HD Webcam&quot;</span> <span class="token punctuation">(</span>video<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span>dshow @ 000001fe0d72d340<span class="token punctuation">]</span>   Alternative name <span class="token string">&quot;@device_pnp_<span class="token entity" title="\\\\">\\\\</span>?\\usb#vid_13d3&amp;pid_5654&amp;mi_00#6&amp;3907f7b1&amp;0&amp;0000#{65e8773d-8f56-11d0-a3b9-00a0c9223196}\\global&quot;</span>    </span>
<span class="line"><span class="token punctuation">[</span>dshow @ 000001fe0d72d340<span class="token punctuation">]</span> <span class="token string">&quot;麦克风 (Realtek High Definition Audio)&quot;</span> <span class="token punctuation">(</span>audio<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span>dshow @ 000001fe0d72d340<span class="token punctuation">]</span>   Alternative name <span class="token string">&quot;@device_cm_{33D9A762-90C8-11D0-BD43-00A0C911CE86}\\wave_{4030643A-CF6B-43BC-99F6-7AB127C53A99}&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 采集</span></span>
<span class="line">ffmpeg <span class="token parameter variable">-f</span> dshow <span class="token parameter variable">-i</span> <span class="token assign-left variable">audio</span><span class="token operator">=</span><span class="token string">&quot;麦克风 (Realtek High Definition Audio)&quot;</span> <span class="token parameter variable">-ar</span> <span class="token number">44100</span> <span class="token parameter variable">-ac</span> <span class="token number">1</span> <span class="token parameter variable">-f</span> f32le output.pcm</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 播放</span></span>
<span class="line">ffplay <span class="token parameter variable">-ar</span> <span class="token number">44100</span> <span class="token parameter variable">-ac</span> <span class="token number">1</span> <span class="token parameter variable">-f</span> f32le output.pcm</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil/log.h&gt;</span> <span class="token comment">// ffmpeg的日志系统</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavformat/avformat.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavcodec/avcodec.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavdevice/avdevice.h&gt;</span> <span class="token comment">// 设备</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libswscale/swscale.h&gt;</span>   <span class="token comment">// 视频缩放</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> err<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">/**</span>
<span class="line"> * 列出当前所连设备</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">list_devices</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ffmpeg -f dshow -list_devices true -i dummy</span></span>
<span class="line">    <span class="token keyword">const</span> AVInputFormat <span class="token operator">*</span>inputFmt <span class="token operator">=</span> <span class="token function">av_find_input_format</span><span class="token punctuation">(</span><span class="token string">&quot;dshow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputFmt <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;av_find_input_format failed!!!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    AVDictionary <span class="token operator">*</span>options <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">av_dict_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>options<span class="token punctuation">,</span> <span class="token string">&quot;list_devices&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    AVFormatContext <span class="token operator">*</span>fmtCtx <span class="token operator">=</span> <span class="token function">avformat_alloc_context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    err <span class="token operator">=</span> <span class="token function">avformat_open_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fmtCtx<span class="token punctuation">,</span> <span class="token string">&quot;dummy&quot;</span><span class="token punctuation">,</span> inputFmt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avformat_open_input failed!!!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">/**</span>
<span class="line">        输出：</span>
<span class="line">            [dshow @ 000002572fc93000] &quot;USB2.0 UVC HD Webcam&quot; (video)</span>
<span class="line">            [dshow @ 000002572fc93000]   Alternative name &quot;@device_pnp_\\\\?\\usb#vid_13d3&amp;pid_5654&amp;mi_00#6&amp;3907f7b1&amp;0&amp;0000#{65e8773d-8f56-11d0-a3b9-00a0c9223196}\\global&quot;</span>
<span class="line">            [dshow @ 000002572fc93000] &quot;麦克风 (Realtek High Definition Audio)&quot; (audio)</span>
<span class="line">            [dshow @ 000002572fc93000]   Alternative name &quot;@device_cm_{33D9A762-90C8-11D0-BD43-00A0C911CE86}\\wave_{4030643A-CF6B-43BC-99F6-7AB127C53A99}&quot;</span>
<span class="line">    */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>fmtCtx<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">avformat_close_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fmtCtx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭输入</span></span>
<span class="line">        <span class="token function">avformat_free_context</span><span class="token punctuation">(</span>fmtCtx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放输入</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">decodeAudio</span><span class="token punctuation">(</span>AVCodecContext <span class="token operator">*</span>decoderCtx<span class="token punctuation">,</span> AVPacket <span class="token operator">*</span>packet<span class="token punctuation">,</span> FILE <span class="token operator">*</span>dest<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">avcodec_send_packet</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        AVFrame <span class="token operator">*</span>frame <span class="token operator">=</span> <span class="token function">av_frame_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">avcodec_receive_frame</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> frame<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// f32le packed</span></span>
<span class="line">            <span class="token function">fwrite</span><span class="token punctuation">(</span>frame<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> frame<span class="token operator">-&gt;</span>linesize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">av_frame_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 设置日志级别</span></span>
<span class="line">    <span class="token function">av_log_set_level</span><span class="token punctuation">(</span>AV_LOG_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 注册所有device</span></span>
<span class="line">    <span class="token function">avdevice_register_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 显示所有输入设备</span></span>
<span class="line">        <span class="token function">list_devices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 显示用法</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;useage: %s &lt;deviceName&gt; &lt;output_f32le.pcm&gt;\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 打开设备</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>deviceName <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>outputName <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// open file</span></span>
<span class="line">    FILE <span class="token operator">*</span>dest <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>outputName<span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>dest <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;fopen failed!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> end<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ffmpeg -f dshow -i audio=&quot;麦克风 (Realtek High Definition Audio)&quot; -ar 44100 -ac 1 -f s16le output.pcm</span></span>
<span class="line">    <span class="token comment">// ffplay -ar 44100 -ac 2 -f s16le output.pcm</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> AVInputFormat <span class="token operator">*</span>inputFmt <span class="token operator">=</span> <span class="token function">av_find_input_format</span><span class="token punctuation">(</span><span class="token string">&quot;dshow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputFmt <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;av_find_input_format failed!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> end<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    AVFormatContext <span class="token operator">*</span>fmtCtx <span class="token operator">=</span> <span class="token function">avformat_alloc_context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> inputName<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">strcat</span><span class="token punctuation">(</span>inputName<span class="token punctuation">,</span> <span class="token string">&quot;audio=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">strcat</span><span class="token punctuation">(</span>inputName<span class="token punctuation">,</span> deviceName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;input: %s\\n&quot;</span><span class="token punctuation">,</span> inputName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    AVDictionary <span class="token operator">*</span>options <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">av_dict_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>options<span class="token punctuation">,</span> <span class="token string">&quot;ar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;44100&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">av_dict_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>options<span class="token punctuation">,</span> <span class="token string">&quot;ac&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">av_dict_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>options<span class="token punctuation">,</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;s16le&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    err <span class="token operator">=</span> <span class="token function">avformat_open_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fmtCtx<span class="token punctuation">,</span> inputName<span class="token punctuation">,</span> inputFmt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avformat_open_input failed!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> end<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 输出流信息</span></span>
<span class="line">    <span class="token function">av_dump_format</span><span class="token punctuation">(</span>fmtCtx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> deviceName<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 探测流</span></span>
<span class="line">    <span class="token comment">// get stream information</span></span>
<span class="line">    err <span class="token operator">=</span> <span class="token function">avformat_find_stream_info</span><span class="token punctuation">(</span>fmtCtx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;av_find_best_stream failed!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> end<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 找到音频流</span></span>
<span class="line">    <span class="token comment">// av_find_best_stream</span></span>
<span class="line">    <span class="token keyword">int</span> audioIndex <span class="token operator">=</span> <span class="token function">av_find_best_stream</span><span class="token punctuation">(</span>fmtCtx<span class="token punctuation">,</span> AVMEDIA_TYPE_AUDIO<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>audioIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;av_find_best_stream failed!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> end<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 分配编码器上下文</span></span>
<span class="line">    AVCodecContext <span class="token operator">*</span>decoderCtx <span class="token operator">=</span> <span class="token function">avcodec_alloc_context3</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    err <span class="token operator">=</span> <span class="token function">avcodec_parameters_to_context</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> fmtCtx<span class="token operator">-&gt;</span>streams<span class="token punctuation">[</span>audioIndex<span class="token punctuation">]</span><span class="token operator">-&gt;</span>codecpar<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_parameters_to_context failed!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> end<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> AVCodec <span class="token operator">*</span>decoder <span class="token operator">=</span> <span class="token function">avcodec_find_decoder</span><span class="token punctuation">(</span>decoderCtx<span class="token operator">-&gt;</span>codec_id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>decoder <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_find_decoder failed!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> end<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;decoder name: %s\\n&quot;</span><span class="token punctuation">,</span> decoder<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    err <span class="token operator">=</span> <span class="token function">avcodec_open2</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> decoder<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;avcodec_open2 failed!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> end<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    AVPacket <span class="token operator">*</span>packet <span class="token operator">=</span> <span class="token function">av_packet_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">av_read_frame</span><span class="token punctuation">(</span>fmtCtx<span class="token punctuation">,</span> packet<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>stream_index <span class="token operator">==</span> audioIndex<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">decodeAudio</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> packet<span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">av_packet_unref</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">av_packet_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">decodeAudio</span><span class="token punctuation">(</span>decoderCtx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">end<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>dest<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">fclose</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>fmtCtx<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">avformat_close_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fmtCtx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭输入</span></span>
<span class="line">        <span class="token function">avformat_free_context</span><span class="token punctuation">(</span>fmtCtx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放输入</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="同时采集视频和音频" tabindex="-1"><a class="header-anchor" href="#同时采集视频和音频"><span>同时采集视频和音频</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">ffmpeg <span class="token parameter variable">-f</span> dshow <span class="token parameter variable">-i</span> <span class="token assign-left variable">video</span><span class="token operator">=</span><span class="token string">&#39;USB2.0 UVC HD Webcam&#39;</span>:audio<span class="token operator">=</span><span class="token string">&quot;麦克风 (Realtek High Definition Audio)&quot;</span> out.mp4</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="音视频播放与显示" tabindex="-1"><a class="header-anchor" href="#音视频播放与显示"><span>音视频播放与显示</span></a></h2><h3 id="sdl" tabindex="-1"><a class="header-anchor" href="#sdl"><span>SDL</span></a></h3><p><img src="`+sn+'" alt="Alt text"></p>',200),tn=[pn];function en(cn,ln){return a(),s("div",null,tn)}const un=n(an,[["render",en],["__file","index.html.vue"]]),rn=JSON.parse('{"path":"/%E7%90%86%E8%AE%BA/ffmpeg%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","title":"ffmpeg音视频开发学习笔记","lang":"zh-CN","frontmatter":{"title":"ffmpeg音视频开发学习笔记","date":"2024-04-01T16:01:00.000Z","description":"ffmpeg音视频开发学习笔记 目录 ffmpeg音视频开发学习笔记 目录 ffmpeg简介 开发环境搭建 日志系统 编译命令 打开输入 解封装提取AAC音频 解封装提取H264视频 转封装——mp4-to-flv 时间基、时间戳、时长 截取封装 RGB、YUV RGB YUV 视频解码 修改分辨率 修改格式为RGB24 保存raw格式图像 YUV_t...","head":[["meta",{"property":"og:url","content":"https://dingdingdang.online/%E7%90%86%E8%AE%BA/ffmpeg%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],["meta",{"property":"og:site_name","content":"YiguiDing的Blog小站"}],["meta",{"property":"og:title","content":"ffmpeg音视频开发学习笔记"}],["meta",{"property":"og:description","content":"ffmpeg音视频开发学习笔记 目录 ffmpeg音视频开发学习笔记 目录 ffmpeg简介 开发环境搭建 日志系统 编译命令 打开输入 解封装提取AAC音频 解封装提取H264视频 转封装——mp4-to-flv 时间基、时间戳、时长 截取封装 RGB、YUV RGB YUV 视频解码 修改分辨率 修改格式为RGB24 保存raw格式图像 YUV_t..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T17:57:29.000Z"}],["meta",{"property":"article:author","content":"丁毅桂"}],["meta",{"property":"article:published_time","content":"2024-04-01T16:01:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T17:57:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ffmpeg音视频开发学习笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-01T16:01:00.000Z\\",\\"dateModified\\":\\"2024-06-27T17:57:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"丁毅桂\\",\\"email\\":\\"2449695354@qq.com\\"}]}"],["meta",{"name":"baidu-site-verification","content":"codeva-PwE9Ts6nMl"}]]},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"ffmpeg简介","slug":"ffmpeg简介","link":"#ffmpeg简介","children":[]},{"level":2,"title":"开发环境搭建","slug":"开发环境搭建","link":"#开发环境搭建","children":[]},{"level":2,"title":"日志系统","slug":"日志系统","link":"#日志系统","children":[]},{"level":2,"title":"编译命令","slug":"编译命令","link":"#编译命令","children":[]},{"level":2,"title":"打开输入","slug":"打开输入","link":"#打开输入","children":[]},{"level":2,"title":"解封装提取AAC音频","slug":"解封装提取aac音频","link":"#解封装提取aac音频","children":[]},{"level":2,"title":"解封装提取H264视频","slug":"解封装提取h264视频","link":"#解封装提取h264视频","children":[]},{"level":2,"title":"转封装——mp4-to-flv","slug":"转封装——mp4-to-flv","link":"#转封装——mp4-to-flv","children":[]},{"level":2,"title":"时间基、时间戳、时长","slug":"时间基、时间戳、时长","link":"#时间基、时间戳、时长","children":[]},{"level":2,"title":"截取封装","slug":"截取封装","link":"#截取封装","children":[]},{"level":2,"title":"RGB、YUV","slug":"rgb、yuv","link":"#rgb、yuv","children":[{"level":3,"title":"RGB","slug":"rgb","link":"#rgb","children":[]},{"level":3,"title":"YUV","slug":"yuv","link":"#yuv","children":[]}]},{"level":2,"title":"视频解码","slug":"视频解码","link":"#视频解码","children":[]},{"level":2,"title":"修改分辨率","slug":"修改分辨率","link":"#修改分辨率","children":[]},{"level":2,"title":"修改格式为RGB24","slug":"修改格式为rgb24","link":"#修改格式为rgb24","children":[]},{"level":2,"title":"保存raw格式图像","slug":"保存raw格式图像","link":"#保存raw格式图像","children":[]},{"level":2,"title":"YUV_to_H264视频编码","slug":"yuv-to-h264视频编码","link":"#yuv-to-h264视频编码","children":[]},{"level":2,"title":"音频解码AAC_PCM","slug":"音频解码aac-pcm","link":"#音频解码aac-pcm","children":[]},{"level":2,"title":"音频编码PCM_to_AAC","slug":"音频编码pcm-to-aac","link":"#音频编码pcm-to-aac","children":[]},{"level":2,"title":"音视频采集","slug":"音视频采集","link":"#音视频采集","children":[{"level":3,"title":"视频采集","slug":"视频采集","link":"#视频采集","children":[]},{"level":3,"title":"音频采集","slug":"音频采集","link":"#音频采集","children":[]},{"level":3,"title":"同时采集视频和音频","slug":"同时采集视频和音频","link":"#同时采集视频和音频","children":[]}]},{"level":2,"title":"音视频播放与显示","slug":"音视频播放与显示","link":"#音视频播放与显示","children":[{"level":3,"title":"SDL","slug":"sdl","link":"#sdl","children":[]}]}],"git":{"createdTime":1712513435000,"updatedTime":1719511049000,"contributors":[{"name":"YiguiDing","email":"2449695354@qq.com","commits":3}]},"readingTime":{"minutes":58.17,"words":17451},"filePathRelative":"理论/ffmpeg学习笔记/index.md","localizedDate":"2024年4月1日","excerpt":"","autoDesc":true}');export{un as comp,rn as data};
