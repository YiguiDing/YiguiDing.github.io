import{_ as e,c as l,e as o,o as t}from"./app-MQttUhkv.js";const d="/assets/git%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98%E7%AC%94%E8%AE%B0-CdpJEzWl.jpg",c={};function a(s,i){return t(),l("div",null,i[0]||(i[0]=[o('<h1 id="git命令备忘笔记" tabindex="-1"><a class="header-anchor" href="#git命令备忘笔记"><span>git命令备忘笔记</span></a></h1><p><img src="'+d+`" alt=""></p><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ul><li><a href="#git%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98%E7%AC%94%E8%AE%B0">git命令备忘笔记</a><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#git%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE">git用户配置</a></li><li><a href="#%E7%BC%96%E8%BE%91git%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">编辑git配置文件</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF">查看配置信息</a></li><li><a href="#git%E9%BB%98%E8%AE%A4%E7%BC%96%E8%BE%91%E5%99%A8%E9%85%8D%E7%BD%AE">git默认编辑器配置</a></li><li><a href="#git%E9%BB%98%E8%AE%A4%E5%B7%AE%E5%BC%82%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE">git默认差异分析工具配置</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C">基本操作</a></li><li><a href="#%E6%9C%89%E5%85%B3%E5%88%9B%E5%BB%BA%E4%B8%8E%E6%8F%90%E4%BA%A4%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%BF%AB%E7%85%A7%E7%9A%84%E5%91%BD%E4%BB%A4">有关创建与提交你的项目的快照的命令</a></li><li><a href="#git-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2">git-查看提交历史</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9C">远程操作</a></li><li><a href="#git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86">git分支管理</a></li><li><a href="#git-%E6%A0%87%E7%AD%BE">git 标签</a></li><li><a href="#ssh%E5%8A%A0%E5%AF%86%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE">ssh加密通信配置</a></li><li><a href="#windows-git%E5%B7%A5%E5%85%B7%E6%89%93%E5%BC%80%E5%90%8E%E8%87%AA%E5%8A%A8%E6%B5%8B%E8%AF%95">windows-git工具打开后自动测试</a></li><li><a href="#%E5%B0%86%E5%B7%B2%E7%BB%8F%E6%8F%90%E4%BA%A4%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E7%89%88%E6%9C%AC%E6%92%A4%E9%94%80">将已经提交到远程仓库的版本撤销</a></li><li><a href="#%E5%AD%90%E4%BB%93%E5%BA%93">子仓库</a><ul><li><a href="#%E5%8C%85%E5%90%AB%E5%AD%90%E4%BB%93%E5%BA%93">包含子仓库</a></li><li><a href="#%E4%BB%8E%E8%BF%9C%E7%AB%AF%E5%85%8B%E9%9A%86%E7%88%B6%E4%BB%93%E5%BA%93%E5%90%8E%E5%AD%90%E4%BB%93%E5%BA%93%E4%B8%BA%E9%BB%98%E8%AE%A4%E4%B8%BA%E7%A9%BA%E9%9C%80%E6%89%A7%E8%A1%8C%E4%BB%A5%E4%B8%8B%E6%93%8D%E4%BD%9C%E6%9D%A5%E4%B8%8B%E8%BD%BD%E5%AD%90%E4%BB%93%E5%BA%93">从远端克隆父仓库后子仓库为默认为空，需执行以下操作来下载子仓库</a></li><li><a href="#%E5%88%A0%E9%99%A4%E8%AF%AF%E6%B7%BB%E5%8A%A0%E5%88%B0%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E5%AD%90%E4%BB%93%E5%BA%93">删除误添加到暂存区的子仓库</a></li></ul></li><li><a href="#%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E4%B8%BA%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F">提交信息为当前日期</a></li></ul></li></ul><h2 id="git用户配置" tabindex="-1"><a class="header-anchor" href="#git用户配置"><span>git用户配置</span></a></h2><ul><li><p><code>git config --global user.name &quot;YiguiDing&quot;</code></p></li><li><p><code>git config --global user.email 2449695354@qq.com</code></p></li><li><p><code>--global</code> 意味着配置文件写入进当前用户的家目录的全局配置文件</p></li><li><p>去掉该选项意味着配置文件写入当前项目的<code>.git/config</code>文件文件</p></li></ul><h2 id="编辑git配置文件" tabindex="-1"><a class="header-anchor" href="#编辑git配置文件"><span>编辑git配置文件</span></a></h2><ul><li><p><code>git config -e</code> # 针对当前仓库</p></li><li><p><code>git config -e --global</code> # 针对系统上所有仓库</p></li></ul><h2 id="查看配置信息" tabindex="-1"><a class="header-anchor" href="#查看配置信息"><span>查看配置信息</span></a></h2><ul><li><p><code>git config --list</code></p></li><li><p>输出信息中重复的变量名代表来自不同的文件如</p><ul><li>系统配置文件 <code>/etc/gitconfig</code></li><li>全局配置文件 <code>~/.config</code></li><li>项目配置文件 <code>./.git/config</code></li></ul></li><li><p>查询单个配置变量 <code>git config user.name</code></p></li></ul><h2 id="git默认编辑器配置" tabindex="-1"><a class="header-anchor" href="#git默认编辑器配置"><span>git默认编辑器配置</span></a></h2><ul><li><p><code>git config --global core.editor vim</code></p></li><li><p>一般为vi vim 或特殊配置为Emacs</p></li></ul><h2 id="git默认差异分析工具配置" tabindex="-1"><a class="header-anchor" href="#git默认差异分析工具配置"><span>git默认差异分析工具配置</span></a></h2><ul><li><p><code>git config --global merge.tool vimdiff</code></p></li><li><p>Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。</p></li></ul><h2 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作"><span>基本操作</span></a></h2><ul><li><p>将当前所在目录初始化为git仓库: <code>git init</code></p></li><li><p>将XXX目录初始化为git仓库: <code>git init XXX</code></p></li><li><p>告诉Git开始对这些文件进行跟踪: <code>git add 文件名</code></p></li><li><p>提交：<code>git commit -m &quot;提交消息&quot;</code></p><ul><li>linux系统中提交用单引号，win用双引号</li></ul></li><li><p>推送到远程仓库：<code>git push origin master</code></p></li><li><p>克隆远程仓库 <code>git clone 仓库地址 [指定目录]</code></p></li></ul><h2 id="有关创建与提交你的项目的快照的命令" tabindex="-1"><a class="header-anchor" href="#有关创建与提交你的项目的快照的命令"><span>有关创建与提交你的项目的快照的命令</span></a></h2><ul><li><p><code>git add</code> 添加文件到暂存区</p><ul><li><code>git add 文件名1 文件名2 文件名3</code></li><li><code>git add 文件夹名</code></li><li><code>git add .</code>当前所在文件夹</li></ul></li><li><p><code>git status</code> 查看仓库当前的状态，显示有变更的文件。</p><ul><li><code>-s</code>参数来获得简短的输出结果</li><li><code>红色??</code> 表示该文夹没有被追踪（添加到缓存区）</li><li><code>绿色A</code> 表示该文件已被追踪（添加到缓存区）</li><li><code>绿A红M</code> 表示该文件添加到缓存之后又有改动。</li></ul></li><li><p><code>git diff</code> 比较文件的不同，即暂存区和工作区的差异。</p><ul><li>尚未缓存的改动：<code>git diff</code></li><li>查看已缓存的改动： <code>git diff --cached</code></li><li>查看已缓存的与未缓存的所有改动：<code>git diff HEAD</code></li><li>显示摘要而非整个diff：<code>git diff --stat</code></li><li>显示暂存区和工作区的差异: <code>git diff [file]</code></li><li>显示暂存区和上一次提交(commit)的差异: <ul><li><code>git diff --cached [file]</code></li><li><code>git diff --staged [file]</code></li></ul></li><li>显示两次提交之间的差异: <ul><li><code>git diff [first-branch]...[second-branch]</code></li></ul></li></ul></li><li><p><code>git commit</code> 提交暂存区到本地仓库。</p><ul><li>提交暂存区所有内容：<code>git commit -m [message]</code></li><li>提交暂存区指定内容：<code>git commit [file1] [file2] ... -m [message]</code></li><li><code>git -am &quot;修改了123.txt文件&quot;</code><ul><li><code>-a</code>意味着可以跳过<code>git add 123.txt</code>步骤，直接提交<br> *<code>git reset</code> 回退版本。</li></ul></li><li><code>git reset [--soft | --mixed | --hard] [HEAD]</code></li><li><code>--soft</code> 工作区和暂存区内容保持不变，本地仓库回退一个版本</li><li><code>--mixed</code>为默认，工作区保持不变,暂存区内容回退到上一次提交版本</li><li><code>--hard</code> 工作区和暂存区内容都回退到上一次提交版本</li></ul></li><li><p><code>git rm</code> 删除工作区文件。</p><ul><li>将文件从暂存区和工作区中删除(该文件提交到暂存区后未被修改)：<code>git rm fileName.txt</code></li><li>强行从暂存区和工作区中删除一个文件(该文件提交到暂存区后又被修改)：<code>git rm -f fileName.txt</code></li><li>将文件从暂存区删除，但在工作区中保留：<code>git rm --cached fileName.txt</code></li><li>进入某个目录中，递归删除该目录下的所有文件和子目录： <code>git rm –r *</code></li></ul></li><li><p><code>git mv</code> 移动或重命名工作区文件。</p><ul><li>移动或重命名：<code>git mv [file] [newfile]</code></li><li>强制移动并覆盖：<code>git mv -f [file] [newfile]</code></li></ul></li></ul><h2 id="git-查看提交历史" tabindex="-1"><a class="header-anchor" href="#git-查看提交历史"><span>git-查看提交历史</span></a></h2><ul><li><p><code>git log</code> - 查看历史提交记录。</p><ul><li><code>-6</code> 指定列出条数</li><li><code>--oneline</code> 选项来查看历史记录的简洁的版本</li><li><code>--all</code> 查看所有分支的提交历史</li><li><code>--graph</code> 选项，查看历史中什么时候出现了分支、合并。</li><li><code>--no-merges</code> 选项以隐藏合并提交记录</li><li><code>--reverse</code> 参数来逆向显示所有日志</li><li><code>--author=YiguiDing</code> 查找指定用户的提交日志</li><li><code>--after</code> <code>--since</code>指定日期之后，使用格式：<code>--after={2010-04-18}</code></li><li><code>--before</code> <code>--until</code>指定日期之前，使用格式：<code>--before={3.weeks.ago}</code></li></ul></li><li><p><code>git blame file</code> - 以列表形式查看指定文件的历史修改记录。</p></li></ul><h2 id="远程操作" tabindex="-1"><a class="header-anchor" href="#远程操作"><span>远程操作</span></a></h2><ul><li><p><code>git remote</code> 远程仓库操作</p><ul><li><code>git remote show [remote]</code> 显示某个远程仓库详细信息</li><li><code>git remote add [shortName] [url]</code> 为一个远程库取一个<strong>简短名</strong></li><li><code>git remote rm shortName</code> # 删除远程仓库<strong>简短名</strong></li><li><code>git remote reName old_shortName new_shortName</code> # 修改仓库<strong>简短名</strong></li><li><code>-v</code> 列举当前仓库remote远程仓库<strong>简短名</strong>和<strong>实际地址</strong>之间的对应关系</li></ul></li><li><p><code>git fetch</code> 从远程获取代码库</p><ul><li><code>git fetch origin</code> 从远程获取代码库但不合并到当前分支</li><li><code>git merge origin/master</code> 将远程代码的主分支合并到当前分支</li></ul></li><li><p><code>git pull</code> 下载远程代码并合并</p><ul><li>其实就是 <code>git fetch</code> 和 <code>git merge local_master</code> 的简写</li><li><code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></li><li><code>git pull origin master:brantest</code>将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并。</li><li><code>git pull origin master</code>与当前分支合并,冒号后面的部分可以省略。</li></ul></li><li><p><code>git push</code> 上传远程代码并合并</p><ul><li><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code></li><li><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;</code> 如果远程分支名与本地分支名相同，则可以省略冒号<code>:</code>及其之后内容</li></ul></li></ul><h2 id="git分支管理" tabindex="-1"><a class="header-anchor" href="#git分支管理"><span>git分支管理</span></a></h2><ul><li><p><code>git branch</code>列出分支</p></li><li><p><code>git branch newBranchName</code>创建一个分支</p><ul><li><code>-b</code> 创建分支后立马切换</li><li><code>-d</code> 删除分支</li></ul></li><li><p><code>git checkout newBranchName</code>切换到新创建的分支</p></li><li><p>分支切换时，如果工作区内容的全部提交，工作区的全部内容会变成新分支的内容，否则未提交的内容会带新分支去</p></li><li><p><code>git merge branchA</code> 将分支branchA合并到当前分支中去</p><ul><li>合并完成后可以删除branchA分支</li><li>当两个分支内容存在冲突时，合并的操作步骤： <ol><li>执行合并操作</li><li>提示有文件存在冲突</li><li>手动编辑那些已经合并但存在冲突的文件，删除冲突代码</li><li>执行<code>git add 文件名</code> 用用于告诉Git 文件冲突已经解决</li><li>不带参数的执行<code>git commit</code></li><li>成功合并后git将会做出提示</li></ol></li></ul></li></ul><h2 id="git-标签" tabindex="-1"><a class="header-anchor" href="#git-标签"><span>git 标签</span></a></h2><ul><li><p><code>git tag</code> 默认为给最新一次提交（HEAD）打上标签</p></li><li><p><code>git tag 3e92c19</code> 给3e92c19(commit id)打上标签</p></li><li><p><code>-m</code> 指定标签信息注解内容,示例<code>git tag -a &lt;tagname&gt; -m &quot;runoob.com标签&quot;</code></p></li><li><p><code>-a</code> (annotated)选项意为&quot;创建一个带注解的标签&quot; 会记录这标签是啥时候打的，谁打的，</p></li><li><p><code>-s</code> (signed)如果有私钥,可用GPG签署标签,示例：<code>git tag -s 标签名 -m &#39;标签说明&#39;</code></p></li><li><p><code>-d</code> 删除标签 <code>git tag -d 标签名</code></p></li><li><p><code>git show 标签名</code> 查看标签信息</p></li><li><p><code>git tag</code> 查看所有标签</p></li><li><p><code>git log --decorate</code> ，也可以看到打的标签</p></li></ul><h2 id="ssh加密通信配置" tabindex="-1"><a class="header-anchor" href="#ssh加密通信配置"><span>ssh加密通信配置</span></a></h2><ul><li>配置成功后可以免密码向远程仓库推送 <ul><li>使用格式大致为<code>git push git@github.com:username/pathToProgectName.git localBranchName:remoteBranchName</code></li></ul></li></ul><ol><li>生成 SSH密钥 <code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code><ul><li>将生成两个文件 公钥 <code>~/.ssh/id_rsa.pub</code> 和 私钥<code>~/.ssh/id_rsa</code><ul><li>其中.ssh目录的权限最高允许为755，最低允许为700，也就是说属主用户的权限为rwx,其他用户不能拥有w权限</li><li>私钥的权限必须为600</li><li>公钥的权限一般为644,最低应该是600</li><li><code>authoried_keys</code>权限一般为644，最低应该是600</li></ul></li></ul></li><li>将生成的SSH公钥附加到服务端的authoried_keys记录文件中 <ul><li>先在客户端将文件拷贝到服务端<code>scp ~/.ssh/id_rsa.pub root@域名或IP:~/.ssh/authorized_keys</code></li><li>scp使用SSH方式登录，会要求输入密码</li></ul></li><li>再在服务端执行附加命令<code>cat id_rsa.pub &gt;&gt; authorized_keys</code></li><li>确保服务端的SSH配置<code>/etc/ssh/sshd_config</code>文件中有： <ul><li><code>RSAAuthentication yes</code></li><li><code>PubkeyAuthentication yes</code></li><li>其他无关紧要的配置 <ul><li><code>PermitRootLogin yes</code></li><li><code>PasswordAuthentication no</code></li></ul></li><li>如有不同需要修改,然后重启服务<code>service sshd restart</code></li></ul></li><li>客户端SSH配置示例<code>/etc/ssh/ssh_config</code></li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#4c4f69;--shiki-dark:#E6E6E6;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes catppuccin-latte slack-dark vp-code"><code class="language-"><span class="line"><span>Host *</span></span>
<span class="line"><span>  IdentityFile ~/.ssh/id_rsa</span></span>
<span class="line"><span>Host github.com</span></span>
<span class="line"><span>  IdentityFile ~/.ssh/id_rsa</span></span>
<span class="line"><span>Host gitee.com</span></span>
<span class="line"><span>  IdentityFile ~/.ssh/id_rsa</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="windows-git工具打开后自动测试" tabindex="-1"><a class="header-anchor" href="#windows-git工具打开后自动测试"><span>windows-git工具打开后自动测试</span></a></h2><p>附加两行内容到<code>/etc/profile</code>或<code>~/.profile</code>文件中</p><ul><li><code>ssh git@github.com</code></li><li><code>ssh git@gitee.com </code></li></ul><h2 id="将已经提交到远程仓库的版本撤销" tabindex="-1"><a class="header-anchor" href="#将已经提交到远程仓库的版本撤销"><span>将已经提交到远程仓库的版本撤销</span></a></h2><ul><li><p><code>git log --oneline</code> 找出上一次提交版本的commitID</p></li><li><p><code>git reset --mixed xxxx</code> 将缓存区恢复成该commitID</p></li><li><p><code>git add .</code> 重新将工作区文件添加到缓存区</p></li><li><p><code>git commit -m &quot;xxxxxxx&quot;</code> 提交到本地仓库</p></li><li><p><code>git push origin master --force</code> 强制推送到远程仓库</p></li></ul><h2 id="子仓库" tabindex="-1"><a class="header-anchor" href="#子仓库"><span>子仓库</span></a></h2><h3 id="包含子仓库" tabindex="-1"><a class="header-anchor" href="#包含子仓库"><span>包含子仓库</span></a></h3><ul><li>格式：<code>git submodule add &quot;url&quot; &quot;add_To_path&quot;</code><ul><li><code>git submodule add git@github.com:YiguiDing/js_russuaGame.git</code></li><li><code>git submodule add git@github.com:YiguiDing/js_russuaGame.git ./js_russuaGame</code></li></ul></li></ul><h3 id="从远端克隆父仓库后子仓库为默认为空-需执行以下操作来下载子仓库" tabindex="-1"><a class="header-anchor" href="#从远端克隆父仓库后子仓库为默认为空-需执行以下操作来下载子仓库"><span>从远端克隆父仓库后子仓库为默认为空，需执行以下操作来下载子仓库</span></a></h3><ul><li><p><code>git submodule init</code></p></li><li><p><code>git submodule update</code></p></li></ul><h3 id="删除误添加到暂存区的子仓库" tabindex="-1"><a class="header-anchor" href="#删除误添加到暂存区的子仓库"><span>删除误添加到暂存区的子仓库</span></a></h3><ul><li><code>git rm --cached html-js_russiaGame</code></li></ul><h2 id="提交信息为当前日期" tabindex="-1"><a class="header-anchor" href="#提交信息为当前日期"><span>提交信息为当前日期</span></a></h2><ul><li><p><code>git commit -m &quot;$(date)&quot;</code></p></li><li><p><strong>$(command)</strong> 与 <strong>\`command\`</strong></p><ul><li>linux中<strong>echo $(date)</strong> 和 <strong>echo \`date\`</strong> 的作用是将date命令的结果用echo输出</li><li>在Windows的git工具中两种都能使用（类似Linux环境）</li><li>但是在powerShell中只有第一种能使用</li></ul></li></ul>`,44)]))}const n=e(c,[["render",a]]),r=JSON.parse('{"path":"/%E5%B7%A5%E5%85%B7/git%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98%E7%AC%94%E8%AE%B0/git%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98%E7%AC%94%E8%AE%B0.html","title":"git命令备忘笔记","lang":"zh-CN","frontmatter":{"title":"git命令备忘笔记","date":"2022-01-09T12:28:00.000Z","cover":"./cover/git命令备忘笔记.jpg","coverWidth":1915,"coverHeight":895,"tag":["笔记","git"],"category":"工具","star":true,"description":"git命令备忘笔记 目录 git命令备忘笔记 目录 git用户配置 编辑git配置文件 查看配置信息 git默认编辑器配置 git默认差异分析工具配置 基本操作 有关创建与提交你的项目的快照的命令 git-查看提交历史 远程操作 git分支管理 git 标签 ssh加密通信配置 windows-git工具打开后自动测试 将已经提交到远程仓库的版本撤销 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"git命令备忘笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-09T12:28:00.000Z\\",\\"dateModified\\":\\"2023-11-28T11:27:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"丁毅桂\\",\\"email\\":\\"2449695354@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://dingdingdang.online/%E5%B7%A5%E5%85%B7/git%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98%E7%AC%94%E8%AE%B0/git%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"YiguiDing的Blog小站"}],["meta",{"property":"og:title","content":"git命令备忘笔记"}],["meta",{"property":"og:description","content":"git命令备忘笔记 目录 git命令备忘笔记 目录 git用户配置 编辑git配置文件 查看配置信息 git默认编辑器配置 git默认差异分析工具配置 基本操作 有关创建与提交你的项目的快照的命令 git-查看提交历史 远程操作 git分支管理 git 标签 ssh加密通信配置 windows-git工具打开后自动测试 将已经提交到远程仓库的版本撤销 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-28T11:27:55.000Z"}],["meta",{"property":"article:tag","content":"git"}],["meta",{"property":"article:tag","content":"笔记"}],["meta",{"property":"article:published_time","content":"2022-01-09T12:28:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-28T11:27:55.000Z"}],["meta",{"name":"baidu-site-verification","content":"codeva-PwE9Ts6nMl"}]]},"git":{"createdTime":1700226391000,"updatedTime":1701170875000,"contributors":[{"name":"YiguiDing","username":"YiguiDing","email":"2449695354@qq.com","commits":2,"url":"https://github.com/YiguiDing"}]},"readingTime":{"minutes":9.08,"words":2724},"filePathRelative":"工具/git命令备忘笔记/git命令备忘笔记.md","excerpt":"","autoDesc":true}');export{n as comp,r as data};
