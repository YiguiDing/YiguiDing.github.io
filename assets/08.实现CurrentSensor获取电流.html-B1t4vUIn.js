import{_ as c,c as o,d as l,w as a,a as n,b as i,r as u,o as r,e as s}from"./app-DjDtDPYL.js";const k="/assets/image-9-CTU6OuEY.png",d="/assets/image-13-B29s-2_Z.png",m="/assets/image-11-DybR-nDX.png",v="/assets/image-12-CCV_i-Aa.png",b={},f=n("h2",{id:"_08-实现currentsensor获取电流",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_08-实现currentsensor获取电流"},[n("span",null,"08.实现CurrentSensor获取电流")])],-1),h=n("h3",{id:"具体实现",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#具体实现"},[n("span",null,"具体实现")])],-1),y=n("code",null,"CurrentSensor.cpp",-1),_=n("code",null,"CurrentSensor.hpp",-1),C=n("div",{class:"language-cpp line-numbers-mode","data-highlighter":"prismjs","data-ext":"cpp","data-title":"cpp"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"Arduino.h"')])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"CurrentSensor.hpp"')])]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"define"),s(),n("span",{class:"token macro-name"},"M_SQRT3"),s(),n("span",{class:"token expression"},[n("span",{class:"token number"},"1.7320508F")])])]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"CurrentSensor"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"CurrentSensor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("initHardWare"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"CurrentABC"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("readHardWare"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("initHardWare "),n("span",{class:"token operator"},"="),s(" initHardWare"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("readHardWare "),n("span",{class:"token operator"},"="),s(" readHardWare"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token class-name"},"CurrentSensor"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"initSensor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),n("span",{class:"token function"},"initHardWare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("CurrentABC "),n("span",{class:"token class-name"},"CurrentSensor"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"readSensor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),n("span",{class:"token function"},"readHardWare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token class-name"},"CurrentSensor"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"alignSensor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"uint16_t"),s(" times "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1000"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    CurrentABC average "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"uint16_t"),s(" n "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(" n "),n("span",{class:"token operator"},"<="),s(" times"),n("span",{class:"token punctuation"},";"),s(" n"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        CurrentABC current "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),n("span",{class:"token function"},"readHardWare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        average"),n("span",{class:"token punctuation"},"."),s("a "),n("span",{class:"token operator"},"+="),s(" current"),n("span",{class:"token punctuation"},"."),s("a"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        average"),n("span",{class:"token punctuation"},"."),s("b "),n("span",{class:"token operator"},"+="),s(" current"),n("span",{class:"token punctuation"},"."),s("b"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token function"},"delay"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    average"),n("span",{class:"token punctuation"},"."),s("a "),n("span",{class:"token operator"},"/="),s(" times"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    average"),n("span",{class:"token punctuation"},"."),s("b "),n("span",{class:"token operator"},"/="),s(" times"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("offset "),n("span",{class:"token operator"},"="),s(" average"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("CurrentABC "),n("span",{class:"token class-name"},"CurrentSensor"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"getCurrentABC"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    CurrentABC i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),n("span",{class:"token function"},"readHardWare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    i"),n("span",{class:"token punctuation"},"."),s("a "),n("span",{class:"token operator"},"-="),s(" offset"),n("span",{class:"token punctuation"},"."),s("a"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    i"),n("span",{class:"token punctuation"},"."),s("b "),n("span",{class:"token operator"},"-="),s(" offset"),n("span",{class:"token punctuation"},"."),s("b"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(" i"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"define"),s(),n("span",{class:"token macro-name"},"M_1_SQRT3"),s(),n("span",{class:"token expression"},[n("span",{class:"token number"},"0.57735026919f"),s()]),n("span",{class:"token comment"},"// (1 / sqrtf(3))")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"define"),s(),n("span",{class:"token macro-name"},"M_2_SQRT3"),s(),n("span",{class:"token expression"},[n("span",{class:"token number"},"1.15470053838f"),s()]),n("span",{class:"token comment"},"// (2 / sqrtf(3))")])]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("CurrentAB "),n("span",{class:"token class-name"},"CurrentSensor"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"getCurrentAB"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    CurrentABC i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),n("span",{class:"token function"},"getCurrentABC"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// 克拉克变换，等赋值形式")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"."),s("alpha "),n("span",{class:"token operator"},"="),s(" i"),n("span",{class:"token punctuation"},"."),s("a"),n("span",{class:"token punctuation"},","),s("                              "),n("span",{class:"token comment"},"// i_alpha = 1 * i_a + 0 * i_b")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"."),s("beta "),n("span",{class:"token operator"},"="),s(" M_1_SQRT3 "),n("span",{class:"token operator"},"*"),s(" i"),n("span",{class:"token punctuation"},"."),s("a "),n("span",{class:"token operator"},"+"),s(" M_2_SQRT3 "),n("span",{class:"token operator"},"*"),s(" i"),n("span",{class:"token punctuation"},"."),s("b"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token comment"},"// i_beta = 1/sqrt(3) * i_a + 2 / sqrt(3) * i_b")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("CurrentDC "),n("span",{class:"token class-name"},"CurrentSensor"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"getCurrentDC"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    CurrentAB i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),n("span",{class:"token function"},"getCurrentAB"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"sqrtf"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},"."),s("alpha "),n("span",{class:"token operator"},"*"),s(" i"),n("span",{class:"token punctuation"},"."),s("alpha "),n("span",{class:"token operator"},"+"),s(" i"),n("span",{class:"token punctuation"},"."),s("beta "),n("span",{class:"token operator"},"*"),s(" i"),n("span",{class:"token punctuation"},"."),s("beta"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("CurrentDQ "),n("span",{class:"token class-name"},"CurrentSensor"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"getCurrentDQ"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"uint16_t"),s(" e_theta"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"int16_t"),s(" sin"),n("span",{class:"token punctuation"},","),s(" cos"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"_sincos"),n("span",{class:"token punctuation"},"("),s("e_theta"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("sin"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("cos"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    CurrentAB i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),n("span",{class:"token function"},"getCurrentAB"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"."),s("d "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("cos "),n("span",{class:"token operator"},"*"),s(" i"),n("span",{class:"token punctuation"},"."),s("alpha "),n("span",{class:"token operator"},"+"),s(" sin "),n("span",{class:"token operator"},"*"),s(" i"),n("span",{class:"token punctuation"},"."),s("beta"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"/"),s(),n("span",{class:"token punctuation"},"("),s("INT16_MAX"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"."),s("q "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("sin "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token operator"},"-"),s("i"),n("span",{class:"token punctuation"},"."),s("alpha "),n("span",{class:"token operator"},"+"),s(" cos "),n("span",{class:"token operator"},"*"),s(" i"),n("span",{class:"token punctuation"},"."),s("beta"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"/"),s(),n("span",{class:"token punctuation"},"("),s("INT16_MAX"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-cpp line-numbers-mode","data-highlighter":"prismjs","data-ext":"cpp","data-title":"cpp"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"ifndef"),s(),n("span",{class:"token expression"},"__CurrentSensor_H__")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"define"),s(),n("span",{class:"token macro-name"},"__CurrentSensor_H__")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdint.h>")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"foc_utils.h"')])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"BLDCDriver.hpp"')])]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"typedef"),s(),n("span",{class:"token keyword"},"struct")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"float"),s(" a"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"float"),s(" b"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),s(" CurrentABC"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"typedef"),s(),n("span",{class:"token keyword"},"struct")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"float"),s(" alpha"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"float"),s(" beta"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),s(" CurrentAB"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"typedef"),s(),n("span",{class:"token keyword"},"float"),s(" CurrentDC"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"typedef"),s(),n("span",{class:"token keyword"},"struct")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"float"),s(" d"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"float"),s(" q"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),s(" CurrentDQ"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"CurrentSensor")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"private"),n("span",{class:"token operator"},":")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("initHardWare"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"CurrentABC"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("readHardWare"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":")]),s(`
`),n("span",{class:"line"},[s("    CurrentABC offset "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"CurrentSensor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("initHardWare"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"CurrentABC"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("readHardWare"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"initSensor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"alignSensor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    CurrentABC "),n("span",{class:"token function"},"readSensor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    CurrentABC "),n("span",{class:"token function"},"getCurrentABC"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    CurrentAB "),n("span",{class:"token function"},"getCurrentAB"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    CurrentDC "),n("span",{class:"token function"},"getCurrentDC"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    CurrentDQ "),n("span",{class:"token function"},"getCurrentDQ"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"uint16_t"),s(" theta"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"endif")])]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=i('<h3 id="实现效果" tabindex="-1"><a class="header-anchor" href="#实现效果"><span>实现效果</span></a></h3><p><img src="'+k+'" alt="alt text"></p><p><img src="'+d+'" alt="alt text"></p><p><img src="'+m+'" alt="alt text"></p><p><img src="'+v+`" alt="alt text"></p><p><code>08.current_sensor.ino</code></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Arduino.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Wire.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;BLDCMotor.hpp&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;BLDCDriver.hpp&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Sensor.hpp&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;foc_utils.h&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;typedef.h&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;pwm.h&quot;</span></span></span>
<span class="line"></span>
<span class="line">BLDCMotor motor <span class="token operator">=</span> <span class="token function">BLDCMotor</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M1_En</span> <span class="token expression"><span class="token number">8</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M1_Ua</span> <span class="token expression"><span class="token number">5</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M1_Ub</span> <span class="token expression"><span class="token number">9</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M1_Uc</span> <span class="token expression"><span class="token number">6</span></span></span></span>
<span class="line">PwmOut <span class="token function">pwmA</span><span class="token punctuation">(</span>D5<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">PwmOut <span class="token function">pwmB</span><span class="token punctuation">(</span>D9<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">PwmOut <span class="token function">pwmC</span><span class="token punctuation">(</span>D6<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">BLDCDriver driver <span class="token operator">=</span> <span class="token function">BLDCDriver</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token comment">// init driver</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">pinMode</span><span class="token punctuation">(</span>M1_En<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// enable</span></span>
<span class="line">      <span class="token comment">// pinMode(M1_Ua, OUTPUT); // a</span></span>
<span class="line">      <span class="token comment">// pinMode(M1_Ub, OUTPUT); // b</span></span>
<span class="line">      <span class="token comment">// pinMode(M1_Uc, OUTPUT); // c</span></span>
<span class="line">      <span class="token comment">// period 50us = 20,000hz; pulse 0 us = 0%</span></span>
<span class="line">      pwmA<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">20000.0f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      pwmB<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">20000.0f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      pwmC<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">20000.0f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// enable or disable driver</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">bool</span> enable<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>M1_En<span class="token punctuation">,</span> enable <span class="token operator">?</span> HIGH <span class="token operator">:</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// enable</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// set pwm to driver</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int16_t</span> u_a<span class="token punctuation">,</span> <span class="token keyword">int16_t</span> u_b<span class="token punctuation">,</span> <span class="token keyword">int16_t</span> u_c<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 设置占空比</span></span>
<span class="line">      <span class="token comment">// [-32768,32768] =&gt; [-1,1] =&gt; [-50,50] =&gt; [0,100]</span></span>
<span class="line">      pwmA<span class="token punctuation">.</span><span class="token function">pulse_perc</span><span class="token punctuation">(</span>u_a <span class="token operator">/</span> <span class="token number">32768.0f</span> <span class="token operator">*</span> <span class="token number">50</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置百分比</span></span>
<span class="line">      pwmB<span class="token punctuation">.</span><span class="token function">pulse_perc</span><span class="token punctuation">(</span>u_b <span class="token operator">/</span> <span class="token number">32768.0f</span> <span class="token operator">*</span> <span class="token number">50</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      pwmC<span class="token punctuation">.</span><span class="token function">pulse_perc</span><span class="token punctuation">(</span>u_c <span class="token operator">/</span> <span class="token number">32768.0f</span> <span class="token operator">*</span> <span class="token number">50</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AS5600_ADDR</span> <span class="token expression"><span class="token number">0x36</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AS5600_RAW_ANGLE</span> <span class="token expression"><span class="token number">0x0c</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AS5600_ANGLE</span> <span class="token expression"><span class="token number">0x0e</span></span></span></span>
<span class="line">Sensor sensor <span class="token operator">=</span> <span class="token function">Sensor</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      Wire<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      Wire<span class="token punctuation">.</span><span class="token function">beginTransmission</span><span class="token punctuation">(</span>AS5600_ADDR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Wire<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>AS5600_ANGLE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Wire<span class="token punctuation">.</span><span class="token function">endTransmission</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Wire<span class="token punctuation">.</span><span class="token function">requestFrom</span><span class="token punctuation">(</span>AS5600_ADDR<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">uint16_t</span> data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>data <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> Wire<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>data <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> Wire<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Wire<span class="token punctuation">.</span><span class="token function">endTransmission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// as5600 12bit精度，左移4位变成16位</span></span>
<span class="line">      data <span class="token operator">&lt;&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> data<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CurrentSensor.hpp&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M1_Ia</span> <span class="token expression">A0</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M1_Ib</span> <span class="token expression">A2</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M1_Ic</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I_R</span> <span class="token expression"><span class="token number">0.01f</span> </span><span class="token comment">// 10mΩ</span></span></span>
<span class="line"></span>
<span class="line">CurrentSensor currentSensor <span class="token operator">=</span> <span class="token function">CurrentSensor</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">pinMode</span><span class="token punctuation">(</span>M1_Ia<span class="token punctuation">,</span> INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">pinMode</span><span class="token punctuation">(</span>M1_Ib<span class="token punctuation">,</span> INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// Arduino 板上的标准分辨率为 10 位 (0-1023)</span></span>
<span class="line">      <span class="token function">analogReadResolution</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// UNO R4 支持高达 14 位(0-16383)的分辨率</span></span>
<span class="line">      <span class="token function">analogReference</span><span class="token punctuation">(</span>AR_DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认参考电压 5 V</span></span>
<span class="line">      <span class="token comment">// analogReference(AR_INTERNAL); // 内置参考电压 1.5 V</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// [0,16383] =&gt; [0,5]</span></span>
<span class="line">      <span class="token keyword">return</span> CurrentABC<span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// i = u/r</span></span>
<span class="line">          <span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">analogRead</span><span class="token punctuation">(</span>M1_Ia<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">16383.0f</span> <span class="token operator">*</span> <span class="token number">5.0f</span> <span class="token operator">-</span> <span class="token number">2.5f</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">0.01f</span> <span class="token operator">/</span> <span class="token number">50</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token function">analogRead</span><span class="token punctuation">(</span>M1_Ib<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">16383.0f</span> <span class="token operator">*</span> <span class="token number">5.0f</span> <span class="token operator">-</span> <span class="token number">2.5f</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">0.01f</span> <span class="token operator">/</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token comment">// b电路接反了 加符号</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  motor<span class="token punctuation">.</span><span class="token function">connectDriver</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  motor<span class="token punctuation">.</span><span class="token function">connectSensor</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sensor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  motor<span class="token punctuation">.</span><span class="token function">initFOC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  currentSensor<span class="token punctuation">.</span><span class="token function">initSensor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  currentSensor<span class="token punctuation">.</span><span class="token function">alignSensor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;LowPassFilter.hpp&quot;</span></span></span>
<span class="line">LowPassFilter <span class="token function">filterA</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">LowPassFilter <span class="token function">filterB</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">LowPassFilter <span class="token function">filterC</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">LowPassFilter <span class="token function">filterD</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  motor<span class="token punctuation">.</span><span class="token function">loopFOC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  CurrentABC iabc <span class="token operator">=</span> currentSensor<span class="token punctuation">.</span><span class="token function">getCurrentABC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;i.a:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">filterA</span><span class="token punctuation">(</span>iabc<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;i.b:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">filterB</span><span class="token punctuation">(</span>iabc<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  CurrentAB i <span class="token operator">=</span> currentSensor<span class="token punctuation">.</span><span class="token function">getCurrentAB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;i.alpha:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">filterA</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>alpha<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;i.beta:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">filterB</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>beta<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  CurrentDC dc <span class="token operator">=</span> currentSensor<span class="token punctuation">.</span><span class="token function">getCurrentDC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;i.dc:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">filterC</span><span class="token punctuation">(</span>dc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  CurrentDQ dq <span class="token operator">=</span> currentSensor<span class="token punctuation">.</span><span class="token function">getCurrentDQ</span><span class="token punctuation">(</span>motor<span class="token punctuation">.</span><span class="token function">electricalAngle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;i.dq.q:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">filterD</span><span class="token punctuation">(</span>dq<span class="token punctuation">.</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function S(A,B){const e=u("CodeTabs");return r(),o("div",null,[f,h,l(e,{id:"6",data:[{id:"<code v-pre>CurrentSensor.cpp</code>"},{id:"<code v-pre>CurrentSensor.hpp</code>"}]},{title0:a(({value:t,isActive:p})=>[y]),title1:a(({value:t,isActive:p})=>[_]),tab0:a(({value:t,isActive:p})=>[C]),tab1:a(({value:t,isActive:p})=>[w]),_:1}),g])}const D=c(b,[["render",S],["__file","08.实现CurrentSensor获取电流.html.vue"]]),x=JSON.parse('{"path":"/%E7%94%B5%E5%AD%90/FOC%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/08.%E5%AE%9E%E7%8E%B0CurrentSensor%E8%8E%B7%E5%8F%96%E7%94%B5%E6%B5%81.html","title":"08.实现CurrentSensor获取电流","lang":"zh-CN","frontmatter":{"title":"08.实现CurrentSensor获取电流","date":"2024-09-22T22:32:00.000Z","index":true,"article":false,"order":8,"description":"08.实现CurrentSensor获取电流 具体实现 实现效果 alt text alt text alt text alt text 08.current_sensor.ino","head":[["meta",{"property":"og:url","content":"https://dingdingdang.online/%E7%94%B5%E5%AD%90/FOC%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/08.%E5%AE%9E%E7%8E%B0CurrentSensor%E8%8E%B7%E5%8F%96%E7%94%B5%E6%B5%81.html"}],["meta",{"property":"og:site_name","content":"YiguiDing的Blog小站"}],["meta",{"property":"og:title","content":"08.实现CurrentSensor获取电流"}],["meta",{"property":"og:description","content":"08.实现CurrentSensor获取电流 具体实现 实现效果 alt text alt text alt text alt text 08.current_sensor.ino"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-02T13:46:49.000Z"}],["meta",{"property":"article:author","content":"丁毅桂"}],["meta",{"property":"article:published_time","content":"2024-09-22T22:32:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-02T13:46:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"08.实现CurrentSensor获取电流\\",\\"description\\":\\"08.实现CurrentSensor获取电流 具体实现 实现效果 alt text alt text alt text alt text 08.current_sensor.ino\\"}"],["meta",{"name":"baidu-site-verification","content":"codeva-PwE9Ts6nMl"}]]},"headers":[{"level":2,"title":"08.实现CurrentSensor获取电流","slug":"_08-实现currentsensor获取电流","link":"#_08-实现currentsensor获取电流","children":[{"level":3,"title":"具体实现","slug":"具体实现","link":"#具体实现","children":[]},{"level":3,"title":"实现效果","slug":"实现效果","link":"#实现效果","children":[]}]}],"git":{"createdTime":1727085506000,"updatedTime":1733147209000,"contributors":[{"name":"YiguiDing","email":"2449695354@qq.com","commits":5}]},"readingTime":{"minutes":0.24,"words":72},"filePathRelative":"电子/FOC算法实现过程记录/08.实现CurrentSensor获取电流.md","localizedDate":"2024年9月22日","excerpt":"","autoDesc":true}');export{D as comp,x as data};
