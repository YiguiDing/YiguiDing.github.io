import{_ as s,c as e,e as a,o as t}from"./app-Dh8phwbL.js";const l={};function n(r,i){return t(),e("div",null,i[0]||(i[0]=[a(`<h1 id="js高级学习笔记" tabindex="-1"><a class="header-anchor" href="#js高级学习笔记"><span>js高级学习笔记</span></a></h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ul><li><a href="#js%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">js高级学习笔记</a><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">正则表达式</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F">基本语法格式</a></li><li><a href="#%E6%AD%A3%E5%88%99%E5%9C%A8search%E5%92%8Creplace%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8">正则在search()和replace()中的使用</a></li><li><a href="#regexp-%E5%AF%B9%E8%B1%A1">RegExp 对象</a></li></ul></li></ul></li></ul><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h2><h3 id="基本语法格式" tabindex="-1"><a class="header-anchor" href="#基本语法格式"><span>基本语法格式</span></a></h3><p><code>/正则表达式主体/修饰符(可选)</code></p><ul><li>修饰符: <ul><li>i 不区分大小写</li><li>g 全局匹配</li><li>m 多行匹配</li></ul></li><li>范围查找: <ul><li><code>[abc]</code> 查找方括号之间的任何字符。</li><li><code>[0-9]</code> 查找任何从 0 至 9 的数字。</li><li><code>(x|y)</code> 查找任何以 | 分隔的选项。</li></ul></li><li>特殊字符: <ul><li><code>\\d</code> 查找数字。</li><li><code>\\s</code> 查找空白字符。</li><li><code>\\b</code> 匹配单词边界。</li><li><code>\\uxxxx</code> 查找以十六进制数 xxxx 规定的 Unicode 字符。</li></ul></li><li>量词: <ul><li><code>n+</code> 匹配任何包含至少一个 n 的字符串。</li><li><code>n*</code> 匹配任何包含零个或多个 n 的字符串。</li><li><code>n?</code> 匹配任何包含零个或一个 n 的字符串。</li></ul></li></ul><h3 id="正则在search-和replace-中的使用" tabindex="-1"><a class="header-anchor" href="#正则在search-和replace-中的使用"><span>正则在search()和replace()中的使用</span></a></h3><ul><li><code>str.search(字符串或正则表达式)</code> 返回查找到的第一个子字符串的下标</li><li><code>str.replace(字符串A或正则表达式A,字符串B)</code> 替换A为B</li></ul><h3 id="regexp-对象" tabindex="-1"><a class="header-anchor" href="#regexp-对象"><span>RegExp 对象</span></a></h3><p>在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。</p><p><strong>创建对象</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#E6E6E6;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes catppuccin-latte slack-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#569CD6;">var</span><span style="--shiki-light:#4C4F69;--shiki-dark:#9CDCFE;"> patt</span><span style="--shiki-light:#179299;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#8839EF;--shiki-light-font-weight:bold;--shiki-dark:#569CD6;--shiki-dark-font-weight:inherit;">new</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#DCDCAA;--shiki-dark-font-style:inherit;"> RegExp</span><span style="--shiki-light:#4C4F69;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#4C4F69;--shiki-dark:#9CDCFE;">正则表达式主体</span><span style="--shiki-light:#7C7F93;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#9CDCFE;">修饰符</span><span style="--shiki-light:#4C4F69;--shiki-dark:#E6E6E6;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#569CD6;">var</span><span style="--shiki-light:#4C4F69;--shiki-dark:#9CDCFE;"> rpatte</span><span style="--shiki-light:#179299;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#8839EF;--shiki-light-font-weight:bold;--shiki-dark:#569CD6;--shiki-dark-font-weight:inherit;"> new</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#DCDCAA;--shiki-dark-font-style:inherit;"> RegExp</span><span style="--shiki-light:#4C4F69;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#CE9178;">&quot;</span><span style="--shiki-light:#EA76CB;--shiki-dark:#D7BA7D;">\\\\</span><span style="--shiki-light:#40A02B;--shiki-dark:#CE9178;">w+&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#E6E6E6;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#6A9955;--shiki-dark-font-style:inherit;">// 或者更简单的方式:</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#569CD6;">var</span><span style="--shiki-light:#4C4F69;--shiki-dark:#9CDCFE;"> patt</span><span style="--shiki-light:#179299;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#EA76CB;--shiki-dark:#D16969;">/</span><span style="--shiki-light:#40A02B;--shiki-dark:#D16969;">正则表达式主体</span><span style="--shiki-light:#EA76CB;--shiki-dark:#D16969;">/</span><span style="--shiki-light:#4C4F69;--shiki-dark:#9CDCFE;">修饰符</span><span style="--shiki-light:#7C7F93;--shiki-dark:#E6E6E6;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>RegExp方法</strong></p><ul><li><code>reg.exec(string)</code> 检索字符串中的正则表达式的匹配。返回该匹配值，否则返回null。</li><li><code>reg.test()</code> 检测一个字符串是否匹配某个模式。返回 true 或 false。</li><li><code>reg.toString()</code> 返回正则表达式的字符串值</li></ul><p><strong>RegExp属性</strong></p><ul><li><code>reg.constructor</code> 返回一个函数，该函数是一个创建 RegExp 对象的原型。</li><li><code>reg.global</code> 判断是否设置了 &quot;g&quot; 修饰符</li><li><code>reg.ignoreCase</code> 判断是否设置了 &quot;i&quot; 修饰符</li><li><code>reg.multiline</code> 判断是否设置了 &quot;m&quot; 修饰符</li><li><code>reg.lastIndex</code> 用于规定下次匹配的起始位置</li><li><code>reg.source</code> 返回正则表达式的匹配模式</li></ul><p><strong>支持正则表达式的 String 对象的方法</strong></p><ul><li><code>str.search(字符串或正则)</code> 检索与正则表达式相匹配的值</li><li><code>str.match()</code> 找到一个或多个正则表达式的匹配</li><li><code>str.replace()</code> 替换与正则表达式匹配的子串</li><li><code>str.split()</code> 把字符串分割为字符串数组</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#E6E6E6;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes catppuccin-latte slack-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#569CD6;">var</span><span style="--shiki-light:#4C4F69;--shiki-dark:#9CDCFE;"> regOBJ</span><span style="--shiki-light:#179299;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#EA76CB;--shiki-dark:#D16969;"> /</span><span style="--shiki-light:#40A02B;--shiki-dark:#D16969;">正则表达方式</span><span style="--shiki-light:#EA76CB;--shiki-dark:#D16969;">/</span><span style="--shiki-light:#8839EF;--shiki-dark:#569CD6;">i</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,20)]))}const p=s(l,[["render",n]]),d=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/JavaScript%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/js%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html","title":"js高级学习笔记","lang":"zh-CN","frontmatter":{"title":"js高级学习笔记","date":"2022-08-28T21:04:00.000Z","cover":"./cover/default_cover.jpg","tag":["javascript","js","高级"],"category":"笔记","description":"js高级学习笔记 目录 js高级学习笔记 目录 正则表达式 基本语法格式 正则在search()和replace()中的使用 RegExp 对象 正则表达式 基本语法格式 /正则表达式主体/修饰符(可选) 修饰符: i 不区分大小写 g 全局匹配 m 多行匹配 范围查找: [abc] 查找方括号之间的任何字符。 [0-9] 查找任何从 0 至 9 的数...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"js高级学习笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-28T21:04:00.000Z\\",\\"dateModified\\":\\"2024-03-18T08:31:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"丁毅桂\\",\\"email\\":\\"2449695354@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://dingdingdang.online/%E5%89%8D%E7%AB%AF/JavaScript%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/js%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"YiguiDing的Blog小站"}],["meta",{"property":"og:title","content":"js高级学习笔记"}],["meta",{"property":"og:description","content":"js高级学习笔记 目录 js高级学习笔记 目录 正则表达式 基本语法格式 正则在search()和replace()中的使用 RegExp 对象 正则表达式 基本语法格式 /正则表达式主体/修饰符(可选) 修饰符: i 不区分大小写 g 全局匹配 m 多行匹配 范围查找: [abc] 查找方括号之间的任何字符。 [0-9] 查找任何从 0 至 9 的数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-18T08:31:16.000Z"}],["meta",{"property":"article:tag","content":"高级"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2022-08-28T21:04:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-18T08:31:16.000Z"}],["meta",{"name":"baidu-site-verification","content":"codeva-PwE9Ts6nMl"}]]},"git":{"createdTime":1700226391000,"updatedTime":1710750676000,"contributors":[{"name":"YiguiDing","username":"YiguiDing","email":"2449695354@qq.com","commits":2,"url":"https://github.com/YiguiDing"}]},"readingTime":{"minutes":2.44,"words":733},"filePathRelative":"前端/JavaScript高级学习笔记/js高级学习笔记.md","excerpt":"","autoDesc":true}');export{p as comp,d as data};
