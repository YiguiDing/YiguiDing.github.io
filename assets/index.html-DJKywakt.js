import{_ as p,c as t,o as e,b as a,a as s,e as n}from"./app-DjDtDPYL.js";const l="/assets/2023-02-18-15-19-12-Br4MfCA_.png",c="/assets/2023-02-18-15-55-01-DvfBLY3y.png",o="/assets/2023-02-18-15-47-18-C4FNdzfn.png",i="/assets/2023-02-18-16-45-58-DxB666zX.png",u="/assets/2023-02-18-17-43-53-DczqR_9q.png",k="/assets/2023-02-18-17-53-26-UuXfYCFF.png",r="/assets/2023-02-18-17-54-00-CMjjBE-Y.png",d="/assets/2023-02-18-21-59-34-n7XmH6kd.png",m="/assets/2023-02-21-21-16-32-CFKyB_Es.png",v={},b=a('<h1 id="蓝桥杯-2014-年-javab-组真题刷题笔记" tabindex="-1"><a class="header-anchor" href="#蓝桥杯-2014-年-javab-组真题刷题笔记"><span>蓝桥杯 2014 年 javaB 组真题刷题笔记</span></a></h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ul><li><a href="#%E8%93%9D%E6%A1%A5%E6%9D%AF-2014-%E5%B9%B4-javab-%E7%BB%84%E7%9C%9F%E9%A2%98%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0">蓝桥杯 2014 年 javaB 组真题刷题笔记</a><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#01%E6%AD%A6%E5%8A%9F%E7%A7%98%E7%B1%8D">[01]武功秘籍</a></li><li><a href="#02%E5%88%87%E9%9D%A2%E6%9D%A1">[02]切面条</a></li><li><a href="#03%E7%8C%9C%E5%AD%97%E6%AF%8D">[03]猜字母</a></li><li><a href="#04%E5%A4%A7%E8%A1%8D%E6%95%B0%E5%88%97">[04]大衍数列</a></li><li><a href="#05%E5%9C%86%E5%91%A8%E7%8E%87">[05]圆周率</a></li><li><a href="#06%E5%A5%87%E6%80%AA%E7%9A%84%E5%88%86%E5%BC%8F">[06]奇怪的分式</a></li><li><a href="#07%E6%89%91%E5%85%8B%E6%8E%92%E5%BA%8F">[07]扑克排序</a></li><li><a href="#08%E5%88%86%E7%B3%96%E6%9E%9C">[08]分糖果</a></li><li><a href="#09%E5%9C%B0%E5%AE%AB%E5%8F%96%E5%AE%9D">[09]地宫取宝</a></li><li><a href="#10%E7%9F%A9%E9%98%B5%E7%BF%BB%E7%A1%AC%E5%B8%81">[10]矩阵翻硬币</a></li></ul></li></ul><h2 id="_01-武功秘籍" tabindex="-1"><a class="header-anchor" href="#_01-武功秘籍"><span>[01]武功秘籍</span></a></h2><p><img src="'+l+'" alt=""></p><blockquote><p><strong>思路</strong></p><ul><li>书的结构推导: [n,m]表示在一张纸上</li><li>[10-11] [12-13] [14,15] [16,17] [18,19]</li><li>[20-21] [22-23] [24,25] [26,27] [28,29]</li><li>......略</li><li>[80-81] [82-83] [84,85] [86,87] [88,89] 5 张纸</li><li>[90-91] [92-93] [94,95] [96,97] [98,99] 2 张纸</li><li>所以一共 7 张纸</li></ul></blockquote><h2 id="_02-切面条" tabindex="-1"><a class="header-anchor" href="#_02-切面条"><span>[02]切面条</span></a></h2><p><img src="'+c+'" alt=""></p><p><strong>两种思路</strong><br><img src="'+o+'" alt=""></p><h2 id="_03-猜字母" tabindex="-1"><a class="header-anchor" href="#_03-猜字母"><span>[03]猜字母</span></a></h2><p><img src="'+i+`" alt=""></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> 蓝桥杯历年真题刷题笔记<span class="token punctuation">.</span>_2014_java_B_<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> _03_猜字母 <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">2014</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">106</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 拼接106次</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">19</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 构成a-s的字符序列</span></span>
<span class="line">    str<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">19</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">2014</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">int</span> next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 下标是奇数</span></span>
<span class="line">     len<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">// 长度缩减</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// 下标是偶数</span></span>
<span class="line">     str<span class="token punctuation">[</span>next<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 往前挪</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_04-大衍数列" tabindex="-1"><a class="header-anchor" href="#_04-大衍数列"><span>[04]大衍数列</span></a></h2><p><img src="`+u+`" alt=""></p><blockquote><p>坑：对偶数项，意思是对于偶数项，不是“对偶数”项</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> 蓝桥杯历年真题刷题笔记<span class="token punctuation">.</span>_2014_java_B_<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> _04_大衍数列 <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">*</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">else</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_05-圆周率" tabindex="-1"><a class="header-anchor" href="#_05-圆周率"><span>[05]圆周率</span></a></h2><p><img src="`+k+'" alt=""><br><img src="'+r+'" alt=""></p>',18),y=s("blockquote",null,[s("p",null,[s("strong",null,"注意"),s("br"),n(" 图中不是 11 是 π ，眼花了")]),s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mfrac",null,[s("mn",null,"4"),s("mi",null,"π")]),s("mo",null,"="),s("mn",null,"1"),s("mo",null,"+"),s("mfrac",null,[s("mn",null,"1"),s("mrow",null,[s("mn",null,"2"),s("mo",null,"+"),s("mfrac",null,[s("mn",null,"9"),s("mrow",null,[s("mn",null,"2"),s("mo",null,"+"),s("mfrac",null,[s("mn",null,"25"),s("mrow",null,[s("mn",null,"2"),s("mo",null,"+"),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},".")])])])])])])]),s("annotation",{encoding:"application/x-tex"}," \\frac{4}{π}=1+\\frac{1}{2+\\frac{9}{2+\\frac{25}{2+...}}} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0074em","vertical-align":"-0.686em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3214em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"π")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"4")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.74em","vertical-align":"-1.4186em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3214em"}},[s("span",{style:{top:"-2.2649em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8451em"}},[s("span",{style:{top:"-2.599em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},[s("span",{class:"mopen nulldelimiter sizing reset-size3 size6"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8443em"}},[s("span",{style:{top:"-2.656em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"...")])])]),s("span",{style:{top:"-3.2255em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line mtight",style:{"border-bottom-width":"0.049em"}})]),s("span",{style:{top:"-3.384em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"25")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.4035em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter sizing reset-size3 size6"})])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"9")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6835em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.4186em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])])])]),s("p",null,"或者说："),s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mfrac",null,[s("mn",null,"4"),s("mi",null,"π")]),s("mo",null,"="),s("mn",null,"1"),s("mo",null,"+"),s("mfrac",null,[s("msup",null,[s("mn",null,"1"),s("mn",null,"2")]),s("mrow",null,[s("mn",null,"2"),s("mo",null,"+"),s("mfrac",null,[s("msup",null,[s("mn",null,"3"),s("mn",null,"2")]),s("mrow",null,[s("mn",null,"2"),s("mo",null,"+"),s("mfrac",null,[s("msup",null,[s("mn",null,"5"),s("mn",null,"2")]),s("mrow",null,[s("mn",null,"2"),s("mo",null,"+"),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},".")])])])])])])]),s("annotation",{encoding:"application/x-tex"}," \\frac{4}{π}=1+\\frac{1^2}{2+\\frac{3^2}{2+\\frac{5^2}{2+...}}} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0074em","vertical-align":"-0.686em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3214em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"π")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"4")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"3.128em","vertical-align":"-1.6369em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.4911em"}},[s("span",{style:{top:"-2.1936em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.9164em"}},[s("span",{style:{top:"-2.452em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},[s("span",{class:"mopen nulldelimiter sizing reset-size3 size6"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.0543em"}},[s("span",{style:{top:"-2.656em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"...")])])]),s("span",{style:{top:"-3.2255em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line mtight",style:{"border-bottom-width":"0.049em"}})]),s("span",{style:{top:"-3.384em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.9384em"}},[s("span",{style:{top:"-2.9384em","margin-right":"0.1em"}},[s("span",{class:"pstrut",style:{height:"2.6444em"}}),s("span",{class:"mord mtight"},"2")])])])])])])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.4035em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter sizing reset-size3 size6"})])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"3"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7463em"}},[s("span",{style:{top:"-2.786em","margin-right":"0.0714em"}},[s("span",{class:"pstrut",style:{height:"2.5em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8305em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord"},"1"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.6369em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])])])])],-1),w=s("blockquote",null,[s("p",null,[s("strong",null,"坑")]),s("ul",null,[s("li",null,"要注意，n 最后等于 0，i 最后等于 1，"),s("li",null,"所以最后")]),s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"x"),s("mo",null,"="),s("mn",null,"2"),s("mo",null,"+"),s("mfrac",null,[s("mn",null,"1"),s("mrow",null,[s("mn",null,"2"),s("mo",null,"+"),s("mfrac",null,[s("mn",null,"9"),s("mrow",null,[s("mn",null,"2"),s("mo",null,"+"),s("mfrac",null,[s("mn",null,"29"),s("mrow",null,[s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},".")])])])])])])]),s("annotation",{encoding:"application/x-tex"}," x=2+\\frac{1}{2+\\frac{9}{2+\\frac{29}{...}}} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.6984em","vertical-align":"-1.3769em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3214em"}},[s("span",{style:{top:"-2.2649em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8451em"}},[s("span",{style:{top:"-2.599em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},[s("span",{class:"mopen nulldelimiter sizing reset-size3 size6"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8443em"}},[s("span",{style:{top:"-2.656em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"...")])])]),s("span",{style:{top:"-3.2255em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line mtight",style:{"border-bottom-width":"0.049em"}})]),s("span",{style:{top:"-3.384em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"29")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.344em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter sizing reset-size3 size6"})])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"9")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6418em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3769em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])])])]),s("p",null,"所以 x 要减 1"),s("p",{class:"katex-block"},[s("span",{class:"katex-error",title:"ParseError: KaTeX parse error: Can't use function '$' in math mode at position 19: …rac{4}{π}=(x-1)$̲$ > $$\\frac{1}{…",style:{color:"#cc0000"}}," \\frac{4}{π}=(x-1)$$ > $$\\frac{1}{π}=\\frac{x-1}{4}$$ > $$π=\\frac{4}{x-1} ")])],-1),h=a(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> 蓝桥杯历年真题刷题笔记<span class="token punctuation">.</span>_2014_java_B_<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> _05_圆周率 <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span> n <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 保证i是奇数,最后i=1 !!!!!!!!!!!!!!!</span></span>
<span class="line">   x <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> i <span class="token operator">/</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 要注意x是图中的哪一部分</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%.4f&quot;</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">/</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 3.1415</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_06-奇怪的分式" tabindex="-1"><a class="header-anchor" href="#_06-奇怪的分式"><span>[06]奇怪的分式</span></a></h2><p>上小学的时候，小明经常自己发明新算法。一次，老师出的题目是：1/4 乘以 8/5 ，小明居然把分子拼接在一起，分母拼接在一起，答案是：18/45 （参见下图）</p><p><img src="`+d+`" alt=""></p><p>老师刚想批评他，转念一想，这个答案凑巧也对啊，真是见鬼！对于分子、分母都是 1~9 中的一位数的情况，还有哪些算式可以这样计算呢？请写出所有不同算式的个数（包括题中举例的）。显然，交换分子分母后，例如：4/1 乘以 5/8 是满足要求的，这算做不同的算式。但对于分子分母相同的情况，2/2 乘以 3/3 这样的类型太多了，不在计数之列!</p><p>注意：答案是个整数（考虑对称性，肯定是偶数）。请通过浏览器提交</p><blockquote><p><strong>思路，</strong></p><ul><li>枚举,然后判断约分后的分式是否相等</li></ul><p><strong>要注意，</strong></p><ul><li>小数也许可能会在运算的过程中丢失精度，</li><li>从而导致两个分式由于运算顺序的不同或者数的大小不同而结果不同，</li><li>反正使用 double 做浮点数运算很可能会得到错误的结果</li></ul></blockquote><p><strong>正确解法 1:使用有理分数表示</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> 蓝桥杯历年真题刷题笔记<span class="token punctuation">.</span>_2014_java_B_<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> _06_奇怪的分式 <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n1_a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n1_a <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> n1_a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n1_b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n1_b <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> n1_b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1_a <span class="token operator">==</span> n1_b<span class="token punctuation">)</span><span class="token comment">// 分子分母相等的情况不算</span></span>
<span class="line">     <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n2_a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n2_a <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> n2_a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n2_b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n2_b <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> n2_b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>n2_a <span class="token operator">==</span> n2_b<span class="token punctuation">)</span><span class="token comment">// 分子分母相等的情况不算</span></span>
<span class="line">       <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token class-name">Frac</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frac</span><span class="token punctuation">(</span>n1_a<span class="token punctuation">,</span> n1_b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token class-name">Frac</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frac</span><span class="token punctuation">(</span>n2_a<span class="token punctuation">,</span> n2_b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token class-name">Frac</span> f3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frac</span><span class="token punctuation">(</span>n1_a <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> n2_a<span class="token punctuation">,</span> n1_b <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> n2_b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// f1*f2 == f3;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">multiple</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>f3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d/%d*%d/%d==%d/%d\\n&quot;</span><span class="token punctuation">,</span></span>
<span class="line">         n1_a<span class="token punctuation">,</span> n1_b<span class="token punctuation">,</span></span>
<span class="line">         n2_a<span class="token punctuation">,</span> n2_b<span class="token punctuation">,</span></span>
<span class="line">         n1_a <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> n2_a<span class="token punctuation">,</span></span>
<span class="line">         n1_b <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> n2_b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;共有%d种。&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * 输出：</span>
<span class="line">   * 1/2*5/4==15/24</span>
<span class="line">   * 1/4*8/5==18/45</span>
<span class="line">   * 1/6*4/3==14/63</span>
<span class="line">   * 1/6*6/4==16/64</span>
<span class="line">   * 1/9*9/5==19/95</span>
<span class="line">   * 2/1*4/5==24/15</span>
<span class="line">   * 2/6*6/5==26/65</span>
<span class="line">   * 4/1*5/8==45/18</span>
<span class="line">   * 4/9*9/8==49/98</span>
<span class="line">   * 6/1*3/4==63/14</span>
<span class="line">   * 6/1*4/6==64/16</span>
<span class="line">   * 6/2*5/6==65/26</span>
<span class="line">   * 9/1*5/9==95/19</span>
<span class="line">   * 9/4*8/9==98/49</span>
<span class="line">   * 共有14种。</span>
<span class="line">   */</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Frac</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> ra<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> rb<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">Frac</span><span class="token punctuation">(</span><span class="token keyword">int</span> ra<span class="token punctuation">,</span> <span class="token keyword">int</span> rb<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">this</span><span class="token punctuation">.</span>ra <span class="token operator">=</span> ra<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">this</span><span class="token punctuation">.</span>rb <span class="token operator">=</span> rb<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>ra<span class="token punctuation">,</span> rb<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//约分</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>ra <span class="token operator">/=</span> k<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>rb <span class="token operator">/=</span> k<span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">Frac</span> <span class="token function">multiple</span><span class="token punctuation">(</span><span class="token class-name">Frac</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Frac</span><span class="token punctuation">(</span></span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>ra <span class="token operator">*</span> obj<span class="token punctuation">.</span>ra<span class="token punctuation">,</span></span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>rb <span class="token operator">*</span> obj<span class="token punctuation">.</span>rb<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// Greatest Common Divisor(GCD)</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">return</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Frac</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ra <span class="token operator">==</span> obj<span class="token punctuation">.</span>ra <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rb <span class="token operator">==</span> obj<span class="token punctuation">.</span>rb<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>正确解法 2：分数的乘法运算后约分</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> 蓝桥杯历年真题刷题笔记<span class="token punctuation">.</span>_2014_java_B_<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> _06_奇怪的分式 <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n1_a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n1_a <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> n1_a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n1_b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n1_b <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> n1_b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1_a <span class="token operator">==</span> n1_b<span class="token punctuation">)</span><span class="token comment">// 分子分母相等的情况不算</span></span>
<span class="line">     <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n2_a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n2_a <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> n2_a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n2_b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n2_b <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> n2_b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>n2_a <span class="token operator">==</span> n2_b<span class="token punctuation">)</span><span class="token comment">// 分子分母相等的情况不算</span></span>
<span class="line">       <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 第三个分式</span></span>
<span class="line">      <span class="token keyword">int</span> n3_a <span class="token operator">=</span> n1_a <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> n2_a<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">int</span> n3_b <span class="token operator">=</span> n1_b <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> n2_b<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">int</span> d3 <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>n3_a<span class="token punctuation">,</span>n3_b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 约分</span></span>
<span class="line">      n3_a<span class="token operator">/=</span>d3<span class="token punctuation">;</span></span>
<span class="line">      n3_b<span class="token operator">/=</span>d3<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 前两个分数的乘积</span></span>
<span class="line">      <span class="token keyword">int</span> multiple_a <span class="token operator">=</span> n1_a<span class="token operator">*</span>n2_a<span class="token punctuation">;</span><span class="token comment">// 分式的乘法:(分子x分子)/(分母x分母)</span></span>
<span class="line">      <span class="token keyword">int</span> multiple_b <span class="token operator">=</span> n1_b<span class="token operator">*</span>n2_b<span class="token punctuation">;</span><span class="token comment">// 分式的乘法:(分子x分子)/(分母x分母)</span></span>
<span class="line">      <span class="token keyword">int</span> multiple_d <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>multiple_a<span class="token punctuation">,</span>multiple_b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      multiple_a<span class="token operator">/=</span>multiple_d<span class="token punctuation">;</span><span class="token comment">// 约分</span></span>
<span class="line">      multiple_b<span class="token operator">/=</span>multiple_d<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 两个数都经过了约分，都是最简分式，如果分子除分母相等，说明两分子和分母各相等，</span></span>
<span class="line">      <span class="token comment">// 所以也可以直接比较分子分母是否相等,本质上和使用有理分数表示法等效。</span></span>
<span class="line">      <span class="token keyword">double</span> res1 <span class="token operator">=</span> multiple_a<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>multiple_b<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">double</span> res2 <span class="token operator">=</span> n3_a<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>n3_b<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>res1 <span class="token operator">==</span> res2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span></span>
<span class="line">         <span class="token string">&quot;%d/%d*%d/%d==%d/%d\\n&quot;</span><span class="token punctuation">,</span></span>
<span class="line">         n1_a<span class="token punctuation">,</span> n1_b<span class="token punctuation">,</span></span>
<span class="line">         n2_a<span class="token punctuation">,</span> n2_b<span class="token punctuation">,</span></span>
<span class="line">         n1_a <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> n2_a<span class="token punctuation">,</span></span>
<span class="line">         n1_b <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> n2_b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 1/2*5/4==15/24</span></span>
<span class="line">  <span class="token comment">// 1/4*8/5==18/45</span></span>
<span class="line">  <span class="token comment">// 1/6*4/3==14/63</span></span>
<span class="line">  <span class="token comment">// 1/6*6/4==16/64</span></span>
<span class="line">  <span class="token comment">// 1/9*9/5==19/95</span></span>
<span class="line">  <span class="token comment">// 2/1*4/5==24/15</span></span>
<span class="line">  <span class="token comment">// 2/6*6/5==26/65</span></span>
<span class="line">  <span class="token comment">// 4/1*5/8==45/18</span></span>
<span class="line">  <span class="token comment">// 4/9*9/8==49/98</span></span>
<span class="line">  <span class="token comment">// 6/1*3/4==63/14</span></span>
<span class="line">  <span class="token comment">// 6/1*4/6==64/16</span></span>
<span class="line">  <span class="token comment">// 6/2*5/6==65/26</span></span>
<span class="line">  <span class="token comment">// 9/1*5/9==95/19</span></span>
<span class="line">  <span class="token comment">// 9/4*8/9==98/49</span></span>
<span class="line">  <span class="token comment">// 共有14种。</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;共有%d种。&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>错误解法 1：使用浮点数运算计算分数乘法</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> 蓝桥杯历年真题刷题笔记<span class="token punctuation">.</span>_2014_java_B_<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> _06_奇怪的分式 <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n1_a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n1_a <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> n1_a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n1_b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n1_b <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> n1_b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1_a <span class="token operator">==</span> n1_b<span class="token punctuation">)</span><span class="token comment">// 分子分母相等的情况不算</span></span>
<span class="line">     <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n2_a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n2_a <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> n2_a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n2_b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n2_b <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> n2_b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>n2_a <span class="token operator">==</span> n2_b<span class="token punctuation">)</span><span class="token comment">// 分子分母相等的情况不算</span></span>
<span class="line">       <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">int</span> n3_a <span class="token operator">=</span> n1_a <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> n2_a<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">int</span> n3_b <span class="token operator">=</span> n1_b <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> n2_b<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">double</span> k1 <span class="token operator">=</span> n1_a <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> n1_b<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">double</span> k2 <span class="token operator">=</span> n2_a <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> n2_b<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">double</span> k3 <span class="token operator">=</span> n3_a <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> n3_b<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 浮点数运算</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>k1 <span class="token operator">*</span> k2 <span class="token operator">==</span> k3<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span></span>
<span class="line">         <span class="token string">&quot;%d/%d*%d/%d==%d/%d\\n&quot;</span><span class="token punctuation">,</span></span>
<span class="line">         n1_a<span class="token punctuation">,</span> n1_b<span class="token punctuation">,</span></span>
<span class="line">         n2_a<span class="token punctuation">,</span> n2_b<span class="token punctuation">,</span></span>
<span class="line">         n1_a <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> n2_a<span class="token punctuation">,</span></span>
<span class="line">         n1_b <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> n2_b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;共有%d种。&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * 1/2*5/4==15/24</span>
<span class="line">   * 1/4*8/5==18/45</span>
<span class="line">   * 1/6*4/3==14/63</span>
<span class="line">   * 1/6*6/4==16/64</span>
<span class="line">   * 2/1*4/5==24/15</span>
<span class="line">   * 4/1*5/8==45/18</span>
<span class="line">   * 4/9*9/8==49/98</span>
<span class="line">   * 6/1*3/4==63/14</span>
<span class="line">   * 6/1*4/6==64/16</span>
<span class="line">   * 6/2*5/6==65/26</span>
<span class="line">   * 9/1*5/9==95/19</span>
<span class="line">   * 9/4*8/9==98/49</span>
<span class="line">   * 共有12种。</span>
<span class="line">   */</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>错误解法 2：约分后，仍然使用浮点数运算计算分数乘法</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> 蓝桥杯历年真题刷题笔记<span class="token punctuation">.</span>_2014_java_B_<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> _06_奇怪的分式 <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n1_a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n1_a <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> n1_a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n1_b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n1_b <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> n1_b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1_a <span class="token operator">==</span> n1_b<span class="token punctuation">)</span><span class="token comment">// 分子分母相等的情况不算</span></span>
<span class="line">     <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n2_a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n2_a <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> n2_a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n2_b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n2_b <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> n2_b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>n2_a <span class="token operator">==</span> n2_b<span class="token punctuation">)</span><span class="token comment">// 分子分母相等的情况不算</span></span>
<span class="line">       <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">int</span> n3_a <span class="token operator">=</span> n1_a <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> n2_a<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">int</span> n3_b <span class="token operator">=</span> n1_b <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> n2_b<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 分别求最大公约数</span></span>
<span class="line">      <span class="token keyword">int</span> d1 <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>n1_a<span class="token punctuation">,</span> n1_b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">int</span> d2 <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>n2_a<span class="token punctuation">,</span> n2_b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">int</span> d3 <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>n3_a<span class="token punctuation">,</span> n3_b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 分别约分后求商</span></span>
<span class="line">      <span class="token keyword">double</span> k1 <span class="token operator">=</span> <span class="token punctuation">(</span>n1_a <span class="token operator">/</span> d1<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> n1_b <span class="token operator">/</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">double</span> k2 <span class="token operator">=</span> <span class="token punctuation">(</span>n2_a <span class="token operator">/</span> d2<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> n2_b <span class="token operator">/</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">double</span> k3 <span class="token operator">=</span> <span class="token punctuation">(</span>n3_a <span class="token operator">/</span> d3<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> n3_b <span class="token operator">/</span> d3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 使用浮点数运算计算分数乘法</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>k1 <span class="token operator">*</span> k2 <span class="token operator">==</span> k3<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span></span>
<span class="line">         <span class="token string">&quot;%d/%d*%d/%d==%d/%d\\n&quot;</span><span class="token punctuation">,</span></span>
<span class="line">         n1_a<span class="token punctuation">,</span> n1_b<span class="token punctuation">,</span></span>
<span class="line">         n2_a<span class="token punctuation">,</span> n2_b<span class="token punctuation">,</span></span>
<span class="line">         n1_a <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> n2_a<span class="token punctuation">,</span></span>
<span class="line">         n1_b <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> n2_b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * 输出</span>
<span class="line">   * 1/2*5/4==15/24</span>
<span class="line">   * 1/4*8/5==18/45</span>
<span class="line">   * 1/6*4/3==14/63</span>
<span class="line">   * 1/6*6/4==16/64</span>
<span class="line">   * 2/1*4/5==24/15</span>
<span class="line">   * 4/1*5/8==45/18</span>
<span class="line">   * 4/9*9/8==49/98</span>
<span class="line">   * 6/1*3/4==63/14</span>
<span class="line">   * 6/1*4/6==64/16</span>
<span class="line">   * 6/2*5/6==65/26</span>
<span class="line">   * 9/1*5/9==95/19</span>
<span class="line">   * 9/4*8/9==98/49</span>
<span class="line">   * 共有12种。</span>
<span class="line">   */</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;共有%d种。&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_07-扑克排序" tabindex="-1"><a class="header-anchor" href="#_07-扑克排序"><span>[07]扑克排序</span></a></h2><p>AA223344，一共 4 对扑克牌。请你把它们排成一行。</p><p>要求：两个 A 中间有 1 张牌，两个 2 之间有 2 张牌，两个 3 之间有 3 张牌，两个 4 之间有 4 张牌。</p><p>4A3A2432， 2342A3A4</p><p>请填写出所有符合要求的排列中，字典序最小的那个。<br> 例如：</p><p>22AA3344 比 A2A23344 字典序小。当然，它们都不是满足要求的答案。</p><p>请通过浏览器提交答案。“A”一定不要用小写字母 a，也不要用“1”代替。字符间一定不要留空格。</p><blockquote><p><strong>思路</strong></p><ul><li>全排列所有字符构成字符串</li><li>检查字符串是否满足要求然后添加到列表中</li><li>对列表中的字符串排序，对于字符串会默认根据字典序排序</li><li>列表中第 0 个就是字典序最小的字符串。</li></ul></blockquote><p><strong>check_v2：使用 String 类的 API 做检查</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> 蓝桥杯历年真题刷题笔记<span class="token punctuation">.</span>_2014_java_B_<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> _07_扑克排序 <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>result_set<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 排序后，第一个就是字典序最小的</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 输出：</span></span>
<span class="line">  <span class="token comment">// 2342A3A4</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result_set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> step<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>step <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check_v2</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    result_set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> step<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">exchange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> step<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">exchange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> step<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">check_v2</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 应该直接使用API提高做题效率</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">    str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token char">&#39;2&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;2&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">    str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token char">&#39;3&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;3&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">    str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token char">&#39;4&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;4&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>check_v1：变量统计字符数</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> 蓝桥杯历年真题刷题笔记<span class="token punctuation">.</span>_2014_java_B_<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> _07_扑克排序 <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>result_set<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 排序后，第一个就是字典序最小的</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 输出：</span></span>
<span class="line">  <span class="token comment">// 2342A3A4</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result_set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> step<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>step <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check_v1</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    result_set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> step<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">exchange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> step<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">exchange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> step<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">check_v1</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">boolean</span> enA <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">boolean</span> en2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">boolean</span> en3 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">boolean</span> en4 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> countA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> count2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> count3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> count4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;A&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>enA<span class="token punctuation">)</span><span class="token comment">// 碰到第一个A,开始计数</span></span>
<span class="line">    enA <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;A&#39;</span> <span class="token operator">&amp;&amp;</span> enA<span class="token punctuation">)</span><span class="token comment">// 碰到最后一个A,停止计数</span></span>
<span class="line">    enA <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>enA <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token comment">// 当前字符不是A且已开启计数,则统计两A之间的字符数</span></span>
<span class="line">    countA<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;2&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>en2<span class="token punctuation">)</span></span>
<span class="line">    en2 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;2&#39;</span> <span class="token operator">&amp;&amp;</span> en2<span class="token punctuation">)</span></span>
<span class="line">    en2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>en2 <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    count2<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;3&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>en3<span class="token punctuation">)</span></span>
<span class="line">    en3 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;3&#39;</span> <span class="token operator">&amp;&amp;</span> en3<span class="token punctuation">)</span></span>
<span class="line">    en3 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>en3 <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    count3<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;4&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>en4<span class="token punctuation">)</span></span>
<span class="line">    en4 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;4&#39;</span> <span class="token operator">&amp;&amp;</span> en4<span class="token punctuation">)</span></span>
<span class="line">    en4 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>en4 <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    count4<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>countA <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">    count2 <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">    count3 <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">    count4 <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_08-分糖果" tabindex="-1"><a class="header-anchor" href="#_08-分糖果"><span>[08]分糖果</span></a></h2><p>题目描述</p><p>问题描述</p><p>有 n 个小朋友围坐成一圈。老师给每个小朋友随机发偶数个糖果，然后进行下面的游戏：</p><p>每个小朋友都把自己的糖果分一半给左手边的孩子。</p><p>一轮分糖后，拥有奇数颗糖的孩子由老师补给 1 个糖果，从而变成偶数。</p><p>反复进行这个游戏，直到所有小朋友的糖果数都相同为止。</p><p>你的任务是预测在已知的初始糖果情形下，老师一共需要补发多少个糖果。</p><p>输入</p><p>程序首先读入一个整数 N(2&lt; N&lt; 100)，表示小朋友的人数。</p><p>接着是一行用空格分开的 N 个偶数（每个偶数不大于 1000，不小于 2）</p><p>输出</p><p>要求程序输出一个整数，表示老师需要补发的糖果数。</p><p>样例输入</p><p>3</p><p>2 2 4</p><p>样例输出</p><p>4</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> 蓝桥杯历年真题刷题笔记<span class="token punctuation">.</span>_2014_java_B_<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> _08_分糖果 <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> half<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSame</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    half<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 拿出一半</span></span>
<span class="line">    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> half<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 减少</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> half<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 当前的获取隔壁的一半</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">// 糖果是奇数，补一颗</span></span>
<span class="line">     ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">// 计数</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// 数组中所有数都一样</span></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSame</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> k <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> k<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_09-地宫取宝" tabindex="-1"><a class="header-anchor" href="#_09-地宫取宝"><span>[09]地宫取宝</span></a></h2><p>题目描述<br> X 国王有一个地宫宝库，是 n × m n × mn×m 个格子的矩阵，每个格子放一件宝贝，每个宝贝贴着价值标签。</p><p>地宫的入口在左上角，出口在右下角。</p><p>小明被带到地宫的入口，国王要求他只能向右或向下行走。</p><p>走过某个格子时，如果那个格子中的宝贝价值比小明手中任意宝贝价值都大，小明就可以拿起它（当然，也可以不拿）。</p><p>当小明走到出口时，如果他手中的宝贝恰好是 k kk 件，则这些宝贝就可以送给小明。</p><p>请你帮小明算一算，在给定的局面下，他有多少种不同的行动方案能获得这 k kk 件宝贝。</p><p>输入格式<br> 第一行 3 个整数，n , m , k 含义见题目描述。<br> 接下来 n 行，每行有 m 个整数 C_i 用来描述宝库矩阵每个格子的宝贝价值。</p><p>输出格式<br> 输出一个整数，表示正好取 k kk 个宝贝的行动方案数。</p><p>该数字可能很大，输出它对 1000000007 10000000071000000007 取模的结果。</p><p>样例输入 1：<br> 2 2 2<br> 1 2<br> 2 1</p><p>样例输出 1：<br> 2</p><p>样例输入 2：<br> 2 3 2<br> 1 2 3<br> 2 1 5</p><p>样例输出 2：<br> 14</p>`,60),g=s("p",null,[n("数据范围"),s("br"),n(" $ 1 ≤ n , m ≤ 50 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow"),s("annotation",{encoding:"application/x-tex"})])])]),s("span",{class:"katex-html","aria-hidden":"true"})]),n(" 1 ≤ k ≤ 12 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow"),s("annotation",{encoding:"application/x-tex"})])])]),s("span",{class:"katex-html","aria-hidden":"true"})]),n(" 0 ≤ C_i ≤ 12 $")],-1),_=a(`<p><strong>优化前：暴力递归解法</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> 蓝桥杯历年真题刷题笔记<span class="token punctuation">.</span>_2014_java_B_<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> _09_地宫取宝 <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">K</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">N</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">M</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">K</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> <span class="token class-name">M</span><span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">f</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> step<span class="token punctuation">,</span> <span class="token keyword">int</span> cur_x<span class="token punctuation">,</span> <span class="token keyword">int</span> cur_y<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>cur_x <span class="token operator">==</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> cur_y <span class="token operator">==</span> <span class="token class-name">M</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 走到最后一个格子</span></span>
<span class="line">   <span class="token comment">// 已经拾取足够数量的宝物，计数</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">K</span><span class="token punctuation">)</span></span>
<span class="line">    count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token comment">// 未拾取足够数量宝物，但是拾取当前位置的宝物即可满足条件，计数</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">K</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isMaxNumAtList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> matrix<span class="token punctuation">[</span>cur_x<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur_x <span class="token operator">&lt;</span> <span class="token class-name">N</span> <span class="token operator">&amp;&amp;</span> cur_y <span class="token operator">&lt;</span> <span class="token class-name">M</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">int</span> val <span class="token operator">=</span> matrix<span class="token punctuation">[</span>cur_x<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_y<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token comment">// 当前值若比拥有的值都要大</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMaxNumAtList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 可以拿</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 可以拿 然后拿</span></span>
<span class="line">    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">f</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cur_x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cur_y <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 往右走</span></span>
<span class="line">    <span class="token function">f</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cur_x <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">,</span> cur_y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 往下走</span></span>
<span class="line">    list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 回溯</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 可以拿 但不拿</span></span>
<span class="line">    <span class="token function">f</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cur_x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cur_y <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 往右走</span></span>
<span class="line">    <span class="token function">f</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cur_x <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">,</span> cur_y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 往下走</span></span>
<span class="line"></span>
<span class="line">   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 不可以拿 不拿</span></span>
<span class="line">    <span class="token function">f</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cur_x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cur_y <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 往右走</span></span>
<span class="line">    <span class="token function">f</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cur_x <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">,</span> cur_y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 往下走</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isMaxNumAtList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> item <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> item<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优化后：带记忆的暴力递归</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> 蓝桥杯历年真题刷题笔记<span class="token punctuation">.</span>_2014_java_B_<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> _09_地宫取宝 <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">N</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">M</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">K</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> <span class="token class-name">M</span><span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">K</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">State</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur_x<span class="token punctuation">,</span> <span class="token keyword">int</span> cur_y<span class="token punctuation">,</span> <span class="token keyword">int</span> bagSize<span class="token punctuation">,</span> <span class="token keyword">int</span> bagMaxVal<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>cur_x <span class="token operator">==</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> cur_y <span class="token operator">==</span> <span class="token class-name">M</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 走到最后一个格子</span></span>
<span class="line">   <span class="token comment">// 已经拾取足够数量的宝物，计数</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>bagSize <span class="token operator">==</span> <span class="token class-name">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span> <span class="token keyword">else</span></span>
<span class="line">   <span class="token comment">// 未拾取足够数量宝物，但是拾取当前位置的宝物即可满足条件，计数</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>bagSize <span class="token operator">==</span> <span class="token class-name">K</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>bagMaxVal <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span>cur_x<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur_x <span class="token operator">&lt;</span> <span class="token class-name">N</span> <span class="token operator">&amp;&amp;</span> cur_y <span class="token operator">&lt;</span> <span class="token class-name">M</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token class-name">State</span> curState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">State</span><span class="token punctuation">(</span>cur_x<span class="token punctuation">,</span> cur_y<span class="token punctuation">,</span> bagSize<span class="token punctuation">,</span> bagMaxVal<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>curState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> curVal <span class="token operator">=</span> matrix<span class="token punctuation">[</span>cur_x<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_y<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 当前值若比拥有的值都要大</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>bagMaxVal <span class="token operator">&lt;</span> curVal<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token comment">// 可以拿</span></span>
<span class="line"></span>
<span class="line">     <span class="token comment">// 可以拿 然后拿</span></span>
<span class="line">     cnt <span class="token operator">+=</span> <span class="token function">f</span><span class="token punctuation">(</span>cur_x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cur_y<span class="token punctuation">,</span> bagSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> curVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 往右走</span></span>
<span class="line">     cnt <span class="token operator">+=</span> <span class="token function">f</span><span class="token punctuation">(</span>cur_x<span class="token punctuation">,</span> cur_y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> bagSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> curVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 往下走</span></span>
<span class="line"></span>
<span class="line">     <span class="token comment">// 可以拿 但不拿</span></span>
<span class="line">     cnt <span class="token operator">+=</span> <span class="token function">f</span><span class="token punctuation">(</span>cur_x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cur_y<span class="token punctuation">,</span> bagSize<span class="token punctuation">,</span> bagMaxVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 往右走</span></span>
<span class="line">     cnt <span class="token operator">+=</span> <span class="token function">f</span><span class="token punctuation">(</span>cur_x<span class="token punctuation">,</span> cur_y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> bagSize<span class="token punctuation">,</span> bagMaxVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 往下走</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token comment">// 不可以拿 不拿</span></span>
<span class="line">     cnt <span class="token operator">+=</span> <span class="token function">f</span><span class="token punctuation">(</span>cur_x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cur_y<span class="token punctuation">,</span> bagSize<span class="token punctuation">,</span> bagMaxVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 往右走</span></span>
<span class="line">     cnt <span class="token operator">+=</span> <span class="token function">f</span><span class="token punctuation">(</span>cur_x<span class="token punctuation">,</span> cur_y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> bagSize<span class="token punctuation">,</span> bagMaxVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 往下走</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>curState<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">State</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> bagSize<span class="token punctuation">,</span> bagMaxVal<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">State</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> bagSize<span class="token punctuation">,</span> <span class="token keyword">int</span> bagMaxVal<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">this</span><span class="token punctuation">.</span>bagSize <span class="token operator">=</span> bagSize<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">this</span><span class="token punctuation">.</span>bagMaxVal <span class="token operator">=</span> bagMaxVal<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@Override</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">final</span> <span class="token keyword">int</span> prime <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">   result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> x<span class="token punctuation">;</span></span>
<span class="line">   result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> y<span class="token punctuation">;</span></span>
<span class="line">   result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> bagSize<span class="token punctuation">;</span></span>
<span class="line">   result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> bagMaxVal<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@Override</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token class-name">State</span> other <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">State</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> other<span class="token punctuation">.</span>x<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">!=</span> other<span class="token punctuation">.</span>y<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>bagSize <span class="token operator">!=</span> other<span class="token punctuation">.</span>bagSize<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>bagMaxVal <span class="token operator">!=</span> other<span class="token punctuation">.</span>bagMaxVal<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-矩阵翻硬币" tabindex="-1"><a class="header-anchor" href="#_10-矩阵翻硬币"><span>[10]矩阵翻硬币</span></a></h2><p>问题描述<br> 　　小明先把硬币摆成了一个 n 行 m 列的矩阵。</p><p>随后，小明对每一个硬币分别进行一次 Q 操作。</p><p>对第 x 行第 y 列的硬币进行 Q 操作的定义：将所有第 i<em>x 行，第 j</em>y 列的硬币进行翻转。</p><p>其中 i 和 j 为任意使操作可行的正整数，行号和列号都是从 1 开始。</p><p>当小明对所有硬币都进行了一次 Q 操作后，他发现了一个奇迹——所有硬币均为正面朝上。</p><p>小明想知道最开始有多少枚硬币是反面朝上的。于是，他向他的好朋友小 M 寻求帮助。</p><p>聪明的小 M 告诉小明，只需要对所有硬币再进行一次 Q 操作，即可恢复到最开始的状态。然而小明很懒，不愿意照做。于是小明希望你给出他更好的方法。帮他计算出答案。</p><p>输入格式<br> 　　输入数据包含一行，两个正整数 n m，含义见题目描述。</p><p>输出格式<br> 　　输出一个正整数，表示最开始有多少枚硬币是反面朝上的。</p><p>样例输入</p><p>2 3</p><p>样例输出</p><p>1</p><p>数据规模和约定</p><p>对于 10%的数据，n、m &lt;= 10^3；</p><p>对于 20%的数据，n、m &lt;= 10^7；</p><p>对于 40%的数据，n、m &lt;= 10^15；</p><p>对于 10%的数据，n、m &lt;= 10^1000（10 的 1000 次方）。</p><p><strong>思路</strong></p><p><img src="`+m+`" alt=""></p><ul><li>很容易得出，如果一枚硬币被翻了奇数次，那么它原来的状态肯定是反面朝上，所以，我们要找的就是被翻了奇数次的硬币</li><li>Q 操作的定义：将所有第 i<em>x 行，第 j</em>y 列的硬币进行翻转。正向看可能不好想，那么我们反向看一下，对于一个横坐标为 N 的硬币，在翻哪些硬币（横坐标 x）的时候会翻到它呢？其实就是这个数 N 所有的约数，比如横坐标为 4 的硬币，那么，在翻横坐标为 1，2，4 的硬币时都会翻到它，纵坐标的情况是一样的。</li><li>对于一个硬币，我们必须同时考虑其横坐标 x 和纵坐标 y，假如横坐标被翻了 a 次，纵坐标被翻了 b 次，则这个硬币总共被翻了 a*b 次，若想要这个硬币被翻奇数次，a 和 b 必须都得是奇数，即 x 和 y 都有奇数个约数</li><li>那么问题来了：哪些数有奇数个约数呢？不管你知不知道，反正现在你知道了，完全平方数有奇数个约数。那么什么又是完全平方数呢，简单的说就是 n^2，n 为自然数，也就是 0，2，4，9……</li><li>问题又来了，怎么求完全平方数的个数呢，首先，我们已经知道了这个矩阵式 n*m 的，而且是从 1 开始编号的，对于 n，我们可以求 sqrt（n），然后取整，容易想出，在 1-n 的范围内的完全平方数的个数为（int）（sqrt（n））个，而 sqrt（n）*sqrt（m）就是所有的横纵坐标都是完全平方数的硬币的个数。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> 蓝桥杯历年真题刷题笔记<span class="token punctuation">.</span>_2014_java_B_<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigInteger</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> _10_矩阵翻硬币 <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">BigInteger</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 需要读取字符串，不能使用sc.nextInt,因为数值很大</span></span>
<span class="line">  <span class="token class-name">BigInteger</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">M</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),f=[b,y,w,h,g,_];function x(j,A){return e(),t("div",null,f)}const E=p(v,[["render",x],["__file","index.html.vue"]]),z=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%982014_java_B%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/","title":"蓝桥杯 2014 年 javaB 组真题刷题笔记","lang":"zh-CN","frontmatter":{"title":"蓝桥杯 2014 年 javaB 组真题刷题笔记","cover":"./cover/蓝桥杯历年真题刷题笔记.png","date":"2023-02-18T07:07:00.000Z","end":"2023-02-21 21:30","tag":["蓝桥杯","JAVA","算法","刷题笔记"],"category":"算法","description":"蓝桥杯 2014 年 javaB 组真题刷题笔记 目录 蓝桥杯 2014 年 javaB 组真题刷题笔记 目录 [01]武功秘籍 [02]切面条 [03]猜字母 [04]大衍数列 [05]圆周率 [06]奇怪的分式 [07]扑克排序 [08]分糖果 [09]地宫取宝 [10]矩阵翻硬币 [01]武功秘籍 思路 书的结构推导: [n,m]表示在一张纸上 ...","head":[["meta",{"property":"og:url","content":"https://dingdingdang.online/%E7%AE%97%E6%B3%95/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%982014_java_B%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"}],["meta",{"property":"og:site_name","content":"YiguiDing的Blog小站"}],["meta",{"property":"og:title","content":"蓝桥杯 2014 年 javaB 组真题刷题笔记"}],["meta",{"property":"og:description","content":"蓝桥杯 2014 年 javaB 组真题刷题笔记 目录 蓝桥杯 2014 年 javaB 组真题刷题笔记 目录 [01]武功秘籍 [02]切面条 [03]猜字母 [04]大衍数列 [05]圆周率 [06]奇怪的分式 [07]扑克排序 [08]分糖果 [09]地宫取宝 [10]矩阵翻硬币 [01]武功秘籍 思路 书的结构推导: [n,m]表示在一张纸上 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-22T16:53:14.000Z"}],["meta",{"property":"article:author","content":"丁毅桂"}],["meta",{"property":"article:tag","content":"蓝桥杯"}],["meta",{"property":"article:tag","content":"JAVA"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:tag","content":"刷题笔记"}],["meta",{"property":"article:published_time","content":"2023-02-18T07:07:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-22T16:53:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"蓝桥杯 2014 年 javaB 组真题刷题笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-18T07:07:00.000Z\\",\\"dateModified\\":\\"2024-07-22T16:53:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"丁毅桂\\",\\"email\\":\\"2449695354@qq.com\\"}]}"],["meta",{"name":"baidu-site-verification","content":"codeva-PwE9Ts6nMl"}]]},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"[01]武功秘籍","slug":"_01-武功秘籍","link":"#_01-武功秘籍","children":[]},{"level":2,"title":"[02]切面条","slug":"_02-切面条","link":"#_02-切面条","children":[]},{"level":2,"title":"[03]猜字母","slug":"_03-猜字母","link":"#_03-猜字母","children":[]},{"level":2,"title":"[04]大衍数列","slug":"_04-大衍数列","link":"#_04-大衍数列","children":[]},{"level":2,"title":"[05]圆周率","slug":"_05-圆周率","link":"#_05-圆周率","children":[]},{"level":2,"title":"[06]奇怪的分式","slug":"_06-奇怪的分式","link":"#_06-奇怪的分式","children":[]},{"level":2,"title":"[07]扑克排序","slug":"_07-扑克排序","link":"#_07-扑克排序","children":[]},{"level":2,"title":"[08]分糖果","slug":"_08-分糖果","link":"#_08-分糖果","children":[]},{"level":2,"title":"[09]地宫取宝","slug":"_09-地宫取宝","link":"#_09-地宫取宝","children":[]},{"level":2,"title":"[10]矩阵翻硬币","slug":"_10-矩阵翻硬币","link":"#_10-矩阵翻硬币","children":[]}],"git":{"createdTime":1700226391000,"updatedTime":1721667194000,"contributors":[{"name":"YiguiDing","email":"2449695354@qq.com","commits":1}]},"readingTime":{"minutes":18.18,"words":5455},"filePathRelative":"算法/蓝桥杯真题2014_java_B刷题笔记/index.md","localizedDate":"2023年2月18日","excerpt":"","autoDesc":true}');export{E as comp,z as data};
